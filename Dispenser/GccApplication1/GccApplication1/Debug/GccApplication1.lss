
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000374  00000408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000374  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800102  00800102  0000040a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000040a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000043c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000083b  00000000  00000000  000004cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006b5  00000000  00000000  00000d07  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000406  00000000  00000000  000013bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  000017c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003fe  00000000  00000000  000018c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000219  00000000  00000000  00001cc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001edf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_7>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e7       	ldi	r30, 0x74	; 116
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 30       	cpi	r26, 0x0A	; 10
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 15 01 	call	0x22a	; 0x22a <main>
  9e:	0c 94 b8 01 	jmp	0x370	; 0x370 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_5>:
		
		}
    }
}

ISR(PCINT2_vect){
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	4f 93       	push	r20
  b6:	5f 93       	push	r21
  b8:	6f 93       	push	r22
  ba:	7f 93       	push	r23
  bc:	8f 93       	push	r24
  be:	9f 93       	push	r25
  c0:	af 93       	push	r26
  c2:	bf 93       	push	r27
  c4:	ef 93       	push	r30
	uint8_t change = oldvalue ^ PIND;
  c6:	49 b1       	in	r20, 0x09	; 9
  c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  cc:	48 27       	eor	r20, r24
	oldvalue = PIND;
  ce:	89 b1       	in	r24, 0x09	; 9
  d0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
  d4:	82 e0       	ldi	r24, 0x02	; 2
  d6:	90 e0       	ldi	r25, 0x00	; 0
	bool hold = false;
  d8:	70 e0       	ldi	r23, 0x00	; 0
	for (uint8_t i = PIND2; i <= PIND7; i++)
	{
		if ((change & (1 << i)) && !(PIND & (1<<i)))
  da:	50 e0       	ldi	r21, 0x00	; 0
		{
			pulsante = (1 << i);
  dc:	a1 e0       	ldi	r26, 0x01	; 1
  de:	b0 e0       	ldi	r27, 0x00	; 0
			hold = true;
  e0:	e1 e0       	ldi	r30, 0x01	; 1
	uint8_t change = oldvalue ^ PIND;
	oldvalue = PIND;
	bool hold = false;
	for (uint8_t i = PIND2; i <= PIND7; i++)
	{
		if ((change & (1 << i)) && !(PIND & (1<<i)))
  e2:	9a 01       	movw	r18, r20
  e4:	08 2e       	mov	r0, r24
  e6:	02 c0       	rjmp	.+4      	; 0xec <__vector_5+0x46>
  e8:	35 95       	asr	r19
  ea:	27 95       	ror	r18
  ec:	0a 94       	dec	r0
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <__vector_5+0x42>
  f0:	20 ff       	sbrs	r18, 0
  f2:	14 c0       	rjmp	.+40     	; 0x11c <__vector_5+0x76>
  f4:	29 b1       	in	r18, 0x09	; 9
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	08 2e       	mov	r0, r24
  fa:	02 c0       	rjmp	.+4      	; 0x100 <__vector_5+0x5a>
  fc:	35 95       	asr	r19
  fe:	27 95       	ror	r18
 100:	0a 94       	dec	r0
 102:	e2 f7       	brpl	.-8      	; 0xfc <__vector_5+0x56>
 104:	20 fd       	sbrc	r18, 0
 106:	0a c0       	rjmp	.+20     	; 0x11c <__vector_5+0x76>
		{
			pulsante = (1 << i);
 108:	9d 01       	movw	r18, r26
 10a:	08 2e       	mov	r0, r24
 10c:	02 c0       	rjmp	.+4      	; 0x112 <__vector_5+0x6c>
 10e:	22 0f       	add	r18, r18
 110:	33 1f       	adc	r19, r19
 112:	0a 94       	dec	r0
 114:	e2 f7       	brpl	.-8      	; 0x10e <__vector_5+0x68>
 116:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <pulsante>
			hold = true;
 11a:	7e 2f       	mov	r23, r30
 11c:	01 96       	adiw	r24, 0x01	; 1

ISR(PCINT2_vect){
	uint8_t change = oldvalue ^ PIND;
	oldvalue = PIND;
	bool hold = false;
	for (uint8_t i = PIND2; i <= PIND7; i++)
 11e:	88 30       	cpi	r24, 0x08	; 8
 120:	91 05       	cpc	r25, r1
 122:	f9 f6       	brne	.-66     	; 0xe2 <__vector_5+0x3c>
		{
			pulsante = (1 << i);
			hold = true;
		}
	}
	if(!(hold)){
 124:	71 11       	cpse	r23, r1
 126:	02 c0       	rjmp	.+4      	; 0x12c <__vector_5+0x86>
		pulsante = 0;
 128:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <pulsante>
	}
}
 12c:	ef 91       	pop	r30
 12e:	bf 91       	pop	r27
 130:	af 91       	pop	r26
 132:	9f 91       	pop	r25
 134:	8f 91       	pop	r24
 136:	7f 91       	pop	r23
 138:	6f 91       	pop	r22
 13a:	5f 91       	pop	r21
 13c:	4f 91       	pop	r20
 13e:	3f 91       	pop	r19
 140:	2f 91       	pop	r18
 142:	0f 90       	pop	r0
 144:	0f be       	out	0x3f, r0	; 63
 146:	0f 90       	pop	r0
 148:	1f 90       	pop	r1
 14a:	18 95       	reti

0000014c <__vector_14>:
ISR(TIMER0_COMPA_vect){
 14c:	1f 92       	push	r1
 14e:	0f 92       	push	r0
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	0f 92       	push	r0
 154:	11 24       	eor	r1, r1
 156:	8f 93       	push	r24
 158:	9f 93       	push	r25
	tick++;
 15a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <tick>
 15e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <tick+0x1>
 162:	01 96       	adiw	r24, 0x01	; 1
 164:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <tick+0x1>
 168:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <tick>
}
 16c:	9f 91       	pop	r25
 16e:	8f 91       	pop	r24
 170:	0f 90       	pop	r0
 172:	0f be       	out	0x3f, r0	; 63
 174:	0f 90       	pop	r0
 176:	1f 90       	pop	r1
 178:	18 95       	reti

0000017a <__vector_11>:
ISR(TIMER1_COMPA_vect){
 17a:	1f 92       	push	r1
 17c:	0f 92       	push	r0
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	0f 92       	push	r0
 182:	11 24       	eor	r1, r1
 184:	8f 93       	push	r24
 186:	9f 93       	push	r25
	secondi++;
 188:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <secondi>
 18c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <secondi+0x1>
 190:	01 96       	adiw	r24, 0x01	; 1
 192:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <secondi+0x1>
 196:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <secondi>
}
 19a:	9f 91       	pop	r25
 19c:	8f 91       	pop	r24
 19e:	0f 90       	pop	r0
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	0f 90       	pop	r0
 1a4:	1f 90       	pop	r1
 1a6:	18 95       	reti

000001a8 <__vector_7>:
ISR(TIMER2_COMPA_vect){
 1a8:	1f 92       	push	r1
 1aa:	0f 92       	push	r0
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	0f 92       	push	r0
 1b0:	11 24       	eor	r1, r1
 1b2:	8f 93       	push	r24
 1b4:	9f 93       	push	r25
	presstimer++;
 1b6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1ba:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 1be:	01 96       	adiw	r24, 0x01	; 1
 1c0:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 1c4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
}
 1c8:	9f 91       	pop	r25
 1ca:	8f 91       	pop	r24
 1cc:	0f 90       	pop	r0
 1ce:	0f be       	out	0x3f, r0	; 63
 1d0:	0f 90       	pop	r0
 1d2:	1f 90       	pop	r1
 1d4:	18 95       	reti

000001d6 <lampeggio>:
	int period;
	
	cycle = 50;
	period = 150;
	
	if(tick <= cycle){
 1d6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <tick>
 1da:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <tick+0x1>
 1de:	c3 97       	sbiw	r24, 0x33	; 51
 1e0:	14 f4       	brge	.+4      	; 0x1e6 <lampeggio+0x10>
		PORTC |= l5;
 1e2:	45 9a       	sbi	0x08, 5	; 8
 1e4:	01 c0       	rjmp	.+2      	; 0x1e8 <lampeggio+0x12>
	}
	else{
		PORTC &=~ l5;
 1e6:	45 98       	cbi	0x08, 5	; 8
	}
	if(tick == period){
 1e8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <tick>
 1ec:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <tick+0x1>
 1f0:	86 39       	cpi	r24, 0x96	; 150
 1f2:	91 05       	cpc	r25, r1
 1f4:	21 f4       	brne	.+8      	; 0x1fe <lampeggio+0x28>
		tick = 0;
 1f6:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <tick+0x1>
 1fa:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <tick>
 1fe:	08 95       	ret

00000200 <lampeggio2>:
	int period;
	
	cycle = 50;
	period = 100;
	
	if(tick <= cycle){
 200:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <tick>
 204:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <tick+0x1>
 208:	c3 97       	sbiw	r24, 0x33	; 51
 20a:	14 f4       	brge	.+4      	; 0x210 <lampeggio2+0x10>
		PORTC |= l0;
 20c:	40 9a       	sbi	0x08, 0	; 8
 20e:	01 c0       	rjmp	.+2      	; 0x212 <lampeggio2+0x12>
	}
	else{
		PORTC &=~ l0;
 210:	40 98       	cbi	0x08, 0	; 8
	}
	if(tick == period){
 212:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <tick>
 216:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <tick+0x1>
 21a:	84 36       	cpi	r24, 0x64	; 100
 21c:	91 05       	cpc	r25, r1
 21e:	21 f4       	brne	.+8      	; 0x228 <lampeggio2+0x28>
		tick = 0;
 220:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <tick+0x1>
 224:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <tick>
 228:	08 95       	ret

0000022a <main>:
void lampeggio2();


int main(void)
{
    DDRC |= (l0 | l3 | l5);
 22a:	87 b1       	in	r24, 0x07	; 7
 22c:	89 62       	ori	r24, 0x29	; 41
 22e:	87 b9       	out	0x07, r24	; 7
    PORTC &=~ (l0 | l3 | l5);
 230:	88 b1       	in	r24, 0x08	; 8
 232:	86 7d       	andi	r24, 0xD6	; 214
 234:	88 b9       	out	0x08, r24	; 8
	
    DDRD &=~ (b2 | b4 | b7);
 236:	8a b1       	in	r24, 0x0a	; 10
 238:	8b 76       	andi	r24, 0x6B	; 107
 23a:	8a b9       	out	0x0a, r24	; 10
    PORTD |= (b2 | b4 | b7);
 23c:	8b b1       	in	r24, 0x0b	; 11
 23e:	84 69       	ori	r24, 0x94	; 148
 240:	8b b9       	out	0x0b, r24	; 11
	
    PCICR |= (1 << PCIE2);
 242:	e8 e6       	ldi	r30, 0x68	; 104
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	80 81       	ld	r24, Z
 248:	84 60       	ori	r24, 0x04	; 4
 24a:	80 83       	st	Z, r24
    PCMSK2 |= (b2 | b4 | b7);
 24c:	ed e6       	ldi	r30, 0x6D	; 109
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	80 81       	ld	r24, Z
 252:	84 69       	ori	r24, 0x94	; 148
 254:	80 83       	st	Z, r24
	
    TCCR0A |= (1 << WGM01);
 256:	84 b5       	in	r24, 0x24	; 36
 258:	82 60       	ori	r24, 0x02	; 2
 25a:	84 bd       	out	0x24, r24	; 36
    TIMSK0 |= (1 << OCIE0A);
 25c:	ee e6       	ldi	r30, 0x6E	; 110
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	80 81       	ld	r24, Z
 262:	82 60       	ori	r24, 0x02	; 2
 264:	80 83       	st	Z, r24
    OCR0A = 79; //5ms
 266:	8f e4       	ldi	r24, 0x4F	; 79
 268:	87 bd       	out	0x27, r24	; 39
	
    TCCR1B |= (1 << WGM12);
 26a:	e1 e8       	ldi	r30, 0x81	; 129
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	80 81       	ld	r24, Z
 270:	88 60       	ori	r24, 0x08	; 8
 272:	80 83       	st	Z, r24
    TIMSK1 |= (1 << OCIE1A);
 274:	ef e6       	ldi	r30, 0x6F	; 111
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 81       	ld	r24, Z
 27a:	82 60       	ori	r24, 0x02	; 2
 27c:	80 83       	st	Z, r24
    OCR1A = 15625; // 1sec
 27e:	89 e0       	ldi	r24, 0x09	; 9
 280:	9d e3       	ldi	r25, 0x3D	; 61
 282:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 286:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	
    TCCR2A |= (1 << WGM21);
 28a:	e0 eb       	ldi	r30, 0xB0	; 176
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	80 81       	ld	r24, Z
 290:	82 60       	ori	r24, 0x02	; 2
 292:	80 83       	st	Z, r24
    TIMSK2 |= (1 << OCIE2A);
 294:	e0 e7       	ldi	r30, 0x70	; 112
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	80 81       	ld	r24, Z
 29a:	82 60       	ori	r24, 0x02	; 2
 29c:	80 83       	st	Z, r24
    OCR2A = 157; //10ms
 29e:	8d e9       	ldi	r24, 0x9D	; 157
 2a0:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
	
    sei();
 2a4:	78 94       	sei
	
    TCCR2B |= ((1<<CS20) | (1<<CS21) | (1<<CS22));
 2a6:	e1 eb       	ldi	r30, 0xB1	; 177
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	80 81       	ld	r24, Z
 2ac:	87 60       	ori	r24, 0x07	; 7
 2ae:	80 83       	st	Z, r24
			
			}
		
			case wait:
			TCCR0B |= ((1 << CS00) | (1 << CS02));
			TCCR1B |= ((1 << CS10) | (1 << CS12));
 2b0:	c1 e8       	ldi	r28, 0x81	; 129
 2b2:	d0 e0       	ldi	r29, 0x00	; 0
			PORTC &=~ (l0 | l5);
			PORTC |= l3;
			if(secondi == 15){
				currentstate = reset;
 2b4:	12 e0       	ldi	r17, 0x02	; 2
				}else{
					PORTC |= l0;
				}break;
				
				case b4:
				currentstate = wait;
 2b6:	01 e0       	ldi	r16, 0x01	; 1
    TCCR2B |= ((1<<CS20) | (1<<CS21) | (1<<CS22));


    while (1) 
    {
		switch(currentstate){
 2b8:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <currentstate>
 2bc:	81 30       	cpi	r24, 0x01	; 1
 2be:	59 f1       	breq	.+86     	; 0x316 <main+0xec>
 2c0:	18 f0       	brcs	.+6      	; 0x2c8 <main+0x9e>
 2c2:	82 30       	cpi	r24, 0x02	; 2
 2c4:	d9 f1       	breq	.+118    	; 0x33c <main+0x112>
 2c6:	fa cf       	rjmp	.-12     	; 0x2bc <main+0x92>
			
			case erogazione:
			TCCR0B |= ((1 << CS00) | (1 << CS02));
 2c8:	85 b5       	in	r24, 0x25	; 37
 2ca:	85 60       	ori	r24, 0x05	; 5
 2cc:	85 bd       	out	0x25, r24	; 37
			TCCR1B |= ((1 << CS10) | (1 << CS12));
 2ce:	88 81       	ld	r24, Y
 2d0:	85 60       	ori	r24, 0x05	; 5
 2d2:	88 83       	st	Y, r24
			switch(pulsante){
 2d4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <pulsante>
 2d8:	80 31       	cpi	r24, 0x10	; 16
 2da:	d9 f0       	breq	.+54     	; 0x312 <main+0xe8>
 2dc:	80 38       	cpi	r24, 0x80	; 128
 2de:	69 f0       	breq	.+26     	; 0x2fa <main+0xd0>
 2e0:	84 30       	cpi	r24, 0x04	; 4
 2e2:	c9 f4       	brne	.+50     	; 0x316 <main+0xec>
				case b2:
				lampeggio();
 2e4:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lampeggio>
				if (secondi == 8)
 2e8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <secondi>
 2ec:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <secondi+0x1>
 2f0:	08 97       	sbiw	r24, 0x08	; 8
 2f2:	89 f4       	brne	.+34     	; 0x316 <main+0xec>
				{
					currentstate = reset;
 2f4:	10 93 09 01 	sts	0x0109, r17	; 0x800109 <currentstate>
 2f8:	0e c0       	rjmp	.+28     	; 0x316 <main+0xec>
				}break;
				
				case b7:
				if (presstimer <= 500)
 2fa:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 2fe:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 302:	85 3f       	cpi	r24, 0xF5	; 245
 304:	91 40       	sbci	r25, 0x01	; 1
 306:	1c f4       	brge	.+6      	; 0x30e <main+0xe4>
				{
					lampeggio2();
 308:	0e 94 00 01 	call	0x200	; 0x200 <lampeggio2>
 30c:	04 c0       	rjmp	.+8      	; 0x316 <main+0xec>
				}else{
					PORTC |= l0;
 30e:	40 9a       	sbi	0x08, 0	; 8
 310:	02 c0       	rjmp	.+4      	; 0x316 <main+0xec>
				}break;
				
				case b4:
				currentstate = wait;
 312:	00 93 09 01 	sts	0x0109, r16	; 0x800109 <currentstate>
				break;
			
			}
		
			case wait:
			TCCR0B |= ((1 << CS00) | (1 << CS02));
 316:	85 b5       	in	r24, 0x25	; 37
 318:	85 60       	ori	r24, 0x05	; 5
 31a:	85 bd       	out	0x25, r24	; 37
			TCCR1B |= ((1 << CS10) | (1 << CS12));
 31c:	88 81       	ld	r24, Y
 31e:	85 60       	ori	r24, 0x05	; 5
 320:	88 83       	st	Y, r24
			PORTC &=~ (l0 | l5);
 322:	88 b1       	in	r24, 0x08	; 8
 324:	8e 7d       	andi	r24, 0xDE	; 222
 326:	88 b9       	out	0x08, r24	; 8
			PORTC |= l3;
 328:	43 9a       	sbi	0x08, 3	; 8
			if(secondi == 15){
 32a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <secondi>
 32e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <secondi+0x1>
 332:	0f 97       	sbiw	r24, 0x0f	; 15
 334:	09 f6       	brne	.-126    	; 0x2b8 <main+0x8e>
				currentstate = reset;
 336:	10 93 09 01 	sts	0x0109, r17	; 0x800109 <currentstate>
 33a:	be cf       	rjmp	.-132    	; 0x2b8 <main+0x8e>
			break;
			
			
			
			case reset:
			TCCR0B &=~ ((1 << CS00) | (1 << CS02));
 33c:	85 b5       	in	r24, 0x25	; 37
 33e:	8a 7f       	andi	r24, 0xFA	; 250
 340:	85 bd       	out	0x25, r24	; 37
			TCCR1B &=~ ((1 << CS10) | (1 << CS12));
 342:	88 81       	ld	r24, Y
 344:	8a 7f       	andi	r24, 0xFA	; 250
 346:	88 83       	st	Y, r24
			PORTC &=~ (l0 | l3 | l5);
 348:	88 b1       	in	r24, 0x08	; 8
 34a:	86 7d       	andi	r24, 0xD6	; 214
 34c:	88 b9       	out	0x08, r24	; 8
			tick = 0;
 34e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <tick+0x1>
 352:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <tick>
			secondi = 0;
 356:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <secondi+0x1>
 35a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <secondi>
			presstimer = 0;
 35e:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 362:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
			pulsante = 0;
 366:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <pulsante>
			currentstate = erogazione;
 36a:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <currentstate>
			break;
 36e:	a4 cf       	rjmp	.-184    	; 0x2b8 <main+0x8e>

00000370 <_exit>:
 370:	f8 94       	cli

00000372 <__stop_program>:
 372:	ff cf       	rjmp	.-2      	; 0x372 <__stop_program>
