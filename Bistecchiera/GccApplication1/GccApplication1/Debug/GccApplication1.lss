
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000004f8  0000058c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800102  00800102  0000058e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000058e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000600  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000855  00000000  00000000  00000658  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006a4  00000000  00000000  00000ead  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000052b  00000000  00000000  00001551  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  00001a7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000410  00000000  00000000  00001b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000219  00000000  00000000  00001fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000021b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__vector_5>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__vector_7>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__vector_11>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__vector_14>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	02 01       	movw	r0, r4
  6a:	13 01       	movw	r2, r6
  6c:	24 01       	movw	r4, r8
  6e:	35 01       	movw	r6, r10
  70:	46 01       	movw	r8, r12
  72:	57 01       	movw	r10, r14
  74:	68 01       	movw	r12, r16

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
  82:	11 e0       	ldi	r17, 0x01	; 1
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	e8 ef       	ldi	r30, 0xF8	; 248
  8a:	f4 e0       	ldi	r31, 0x04	; 4
  8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
  8e:	05 90       	lpm	r0, Z+
  90:	0d 92       	st	X+, r0
  92:	a2 30       	cpi	r26, 0x02	; 2
  94:	b1 07       	cpc	r27, r17
  96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a2 e0       	ldi	r26, 0x02	; 2
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a0 31       	cpi	r26, 0x10	; 16
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <main>
  ac:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <__vector_5>:
			
		}
    }
}

ISR(PCINT2_vect){
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	11 24       	eor	r1, r1
  be:	2f 93       	push	r18
  c0:	3f 93       	push	r19
  c2:	4f 93       	push	r20
  c4:	5f 93       	push	r21
  c6:	6f 93       	push	r22
  c8:	7f 93       	push	r23
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
  ce:	af 93       	push	r26
  d0:	bf 93       	push	r27
  d2:	ef 93       	push	r30
	uint8_t change = oldvalue ^ PIND;
  d4:	49 b1       	in	r20, 0x09	; 9
  d6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  da:	48 27       	eor	r20, r24
	oldvalue = PIND;
  dc:	89 b1       	in	r24, 0x09	; 9
  de:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
  e2:	82 e0       	ldi	r24, 0x02	; 2
  e4:	90 e0       	ldi	r25, 0x00	; 0
	bool hold = false;
  e6:	70 e0       	ldi	r23, 0x00	; 0
	for (uint8_t i = PIND2; i <= PIND7; i++)
	{
		if ((change &(1 << i)) && !(PIND & (1 << i)))
  e8:	50 e0       	ldi	r21, 0x00	; 0
		{
			pulsante = (1 << i);
  ea:	a1 e0       	ldi	r26, 0x01	; 1
  ec:	b0 e0       	ldi	r27, 0x00	; 0
			hold = true;
  ee:	e1 e0       	ldi	r30, 0x01	; 1
	uint8_t change = oldvalue ^ PIND;
	oldvalue = PIND;
	bool hold = false;
	for (uint8_t i = PIND2; i <= PIND7; i++)
	{
		if ((change &(1 << i)) && !(PIND & (1 << i)))
  f0:	9a 01       	movw	r18, r20
  f2:	08 2e       	mov	r0, r24
  f4:	02 c0       	rjmp	.+4      	; 0xfa <__vector_5+0x46>
  f6:	35 95       	asr	r19
  f8:	27 95       	ror	r18
  fa:	0a 94       	dec	r0
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <__vector_5+0x42>
  fe:	20 ff       	sbrs	r18, 0
 100:	14 c0       	rjmp	.+40     	; 0x12a <__vector_5+0x76>
 102:	29 b1       	in	r18, 0x09	; 9
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	08 2e       	mov	r0, r24
 108:	02 c0       	rjmp	.+4      	; 0x10e <__vector_5+0x5a>
 10a:	35 95       	asr	r19
 10c:	27 95       	ror	r18
 10e:	0a 94       	dec	r0
 110:	e2 f7       	brpl	.-8      	; 0x10a <__vector_5+0x56>
 112:	20 fd       	sbrc	r18, 0
 114:	0a c0       	rjmp	.+20     	; 0x12a <__vector_5+0x76>
		{
			pulsante = (1 << i);
 116:	9d 01       	movw	r18, r26
 118:	08 2e       	mov	r0, r24
 11a:	02 c0       	rjmp	.+4      	; 0x120 <__vector_5+0x6c>
 11c:	22 0f       	add	r18, r18
 11e:	33 1f       	adc	r19, r19
 120:	0a 94       	dec	r0
 122:	e2 f7       	brpl	.-8      	; 0x11c <__vector_5+0x68>
 124:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <pulsante>
			hold = true;
 128:	7e 2f       	mov	r23, r30
 12a:	01 96       	adiw	r24, 0x01	; 1

ISR(PCINT2_vect){
	uint8_t change = oldvalue ^ PIND;
	oldvalue = PIND;
	bool hold = false;
	for (uint8_t i = PIND2; i <= PIND7; i++)
 12c:	88 30       	cpi	r24, 0x08	; 8
 12e:	91 05       	cpc	r25, r1
 130:	f9 f6       	brne	.-66     	; 0xf0 <__vector_5+0x3c>
		{
			pulsante = (1 << i);
			hold = true;
		}
	}
	if (!(hold))
 132:	71 11       	cpse	r23, r1
 134:	02 c0       	rjmp	.+4      	; 0x13a <__vector_5+0x86>
	{
		pulsante = 0;
 136:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <pulsante>
	}
}
 13a:	ef 91       	pop	r30
 13c:	bf 91       	pop	r27
 13e:	af 91       	pop	r26
 140:	9f 91       	pop	r25
 142:	8f 91       	pop	r24
 144:	7f 91       	pop	r23
 146:	6f 91       	pop	r22
 148:	5f 91       	pop	r21
 14a:	4f 91       	pop	r20
 14c:	3f 91       	pop	r19
 14e:	2f 91       	pop	r18
 150:	0f 90       	pop	r0
 152:	0f be       	out	0x3f, r0	; 63
 154:	0f 90       	pop	r0
 156:	1f 90       	pop	r1
 158:	18 95       	reti

0000015a <__vector_14>:

ISR(TIMER0_COMPA_vect){
 15a:	1f 92       	push	r1
 15c:	0f 92       	push	r0
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	0f 92       	push	r0
 162:	11 24       	eor	r1, r1
 164:	8f 93       	push	r24
 166:	9f 93       	push	r25
	tick++;
 168:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <tick>
 16c:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <tick+0x1>
 170:	01 96       	adiw	r24, 0x01	; 1
 172:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <tick+0x1>
 176:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <tick>
}
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <__vector_11>:

ISR(TIMER1_COMPA_vect){
 188:	1f 92       	push	r1
 18a:	0f 92       	push	r0
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	0f 92       	push	r0
 190:	11 24       	eor	r1, r1
 192:	8f 93       	push	r24
 194:	9f 93       	push	r25
	secondi++;
 196:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <secondi>
 19a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <secondi+0x1>
 19e:	01 96       	adiw	r24, 0x01	; 1
 1a0:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <secondi+0x1>
 1a4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <secondi>
}
 1a8:	9f 91       	pop	r25
 1aa:	8f 91       	pop	r24
 1ac:	0f 90       	pop	r0
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	0f 90       	pop	r0
 1b2:	1f 90       	pop	r1
 1b4:	18 95       	reti

000001b6 <__vector_7>:

ISR(TIMER2_COMPA_vect){
 1b6:	1f 92       	push	r1
 1b8:	0f 92       	push	r0
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	0f 92       	push	r0
 1be:	11 24       	eor	r1, r1
 1c0:	8f 93       	push	r24
 1c2:	9f 93       	push	r25
	presstimer++;
 1c4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <presstimer>
 1c8:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <presstimer+0x1>
 1cc:	01 96       	adiw	r24, 0x01	; 1
 1ce:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <presstimer+0x1>
 1d2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <presstimer>
}
 1d6:	9f 91       	pop	r25
 1d8:	8f 91       	pop	r24
 1da:	0f 90       	pop	r0
 1dc:	0f be       	out	0x3f, r0	; 63
 1de:	0f 90       	pop	r0
 1e0:	1f 90       	pop	r1
 1e2:	18 95       	reti

000001e4 <livellicott>:



void livellicott(){
	switch(level){
 1e4:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <level>
 1e8:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <level+0x1>
 1ec:	31 97       	sbiw	r30, 0x01	; 1
 1ee:	e7 30       	cpi	r30, 0x07	; 7
 1f0:	f1 05       	cpc	r31, r1
 1f2:	20 f4       	brcc	.+8      	; 0x1fc <livellicott+0x18>
 1f4:	ec 5c       	subi	r30, 0xCC	; 204
 1f6:	ff 4f       	sbci	r31, 0xFF	; 255
 1f8:	0c 94 74 02 	jmp	0x4e8	; 0x4e8 <__tablejump2__>
		default:
		PORTC &=~ (l2|l1|l0);
 1fc:	88 b1       	in	r24, 0x08	; 8
 1fe:	88 7f       	andi	r24, 0xF8	; 248
 200:	88 b9       	out	0x08, r24	; 8
		break;
 202:	08 95       	ret
		
		case 1:
		PORTC |=l0;
 204:	40 9a       	sbi	0x08, 0	; 8
		PORTC &=~ (l2|l1);
 206:	88 b1       	in	r24, 0x08	; 8
 208:	89 7f       	andi	r24, 0xF9	; 249
 20a:	88 b9       	out	0x08, r24	; 8
		cycle = 10;
 20c:	8a e0       	ldi	r24, 0x0A	; 10
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <cycle+0x1>
 214:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <cycle>
		period = 100;
 218:	84 e6       	ldi	r24, 0x64	; 100
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 220:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
		break;
 224:	08 95       	ret
		
		case 2:
		PORTC |=l1;
 226:	41 9a       	sbi	0x08, 1	; 8
		PORTC &=~ (l2|l0);
 228:	88 b1       	in	r24, 0x08	; 8
 22a:	8a 7f       	andi	r24, 0xFA	; 250
 22c:	88 b9       	out	0x08, r24	; 8
		cycle = 20;
 22e:	84 e1       	ldi	r24, 0x14	; 20
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <cycle+0x1>
 236:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <cycle>
		period = 100;
 23a:	84 e6       	ldi	r24, 0x64	; 100
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 242:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
		break;
 246:	08 95       	ret
		
		case 3:
		PORTC |=(l0|l1);
 248:	88 b1       	in	r24, 0x08	; 8
 24a:	83 60       	ori	r24, 0x03	; 3
 24c:	88 b9       	out	0x08, r24	; 8
		PORTC &=~ l2;
 24e:	42 98       	cbi	0x08, 2	; 8
		cycle = 40;
 250:	88 e2       	ldi	r24, 0x28	; 40
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <cycle+0x1>
 258:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <cycle>
		period = 100;
 25c:	84 e6       	ldi	r24, 0x64	; 100
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 264:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
		break;
 268:	08 95       	ret
		
		case 4:
		PORTC |=l2;
 26a:	42 9a       	sbi	0x08, 2	; 8
		PORTC &=~ (l0|l1);
 26c:	88 b1       	in	r24, 0x08	; 8
 26e:	8c 7f       	andi	r24, 0xFC	; 252
 270:	88 b9       	out	0x08, r24	; 8
		cycle = 25;
 272:	89 e1       	ldi	r24, 0x19	; 25
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <cycle+0x1>
 27a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <cycle>
		period = 50;
 27e:	82 e3       	ldi	r24, 0x32	; 50
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 286:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
		break;
 28a:	08 95       	ret
		
		
		case 5:
		PORTC |=(l0|l2);
 28c:	88 b1       	in	r24, 0x08	; 8
 28e:	85 60       	ori	r24, 0x05	; 5
 290:	88 b9       	out	0x08, r24	; 8
		PORTC &=~ l1;
 292:	41 98       	cbi	0x08, 1	; 8
		cycle = 35;
 294:	83 e2       	ldi	r24, 0x23	; 35
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <cycle+0x1>
 29c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <cycle>
		period = 50;
 2a0:	82 e3       	ldi	r24, 0x32	; 50
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 2a8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
		break;
 2ac:	08 95       	ret
		
		case 6:
		PORTC &=~l0;
 2ae:	40 98       	cbi	0x08, 0	; 8
		PORTC |= (l2|l1);
 2b0:	88 b1       	in	r24, 0x08	; 8
 2b2:	86 60       	ori	r24, 0x06	; 6
 2b4:	88 b9       	out	0x08, r24	; 8
		cycle = 45;
 2b6:	8d e2       	ldi	r24, 0x2D	; 45
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <cycle+0x1>
 2be:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <cycle>
		period = 50;
 2c2:	82 e3       	ldi	r24, 0x32	; 50
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 2ca:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
		break;
 2ce:	08 95       	ret
		
		case 7:
		PORTC |=(l2|l1|l0);
 2d0:	88 b1       	in	r24, 0x08	; 8
 2d2:	87 60       	ori	r24, 0x07	; 7
 2d4:	88 b9       	out	0x08, r24	; 8
 2d6:	08 95       	ret

000002d8 <incredecre>:
}



void incredecre(){
	switch(pulsante){
 2d8:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <pulsante>
 2dc:	84 30       	cpi	r24, 0x04	; 4
 2de:	19 f0       	breq	.+6      	; 0x2e6 <incredecre+0xe>
 2e0:	88 30       	cpi	r24, 0x08	; 8
 2e2:	e1 f0       	breq	.+56     	; 0x31c <incredecre+0x44>
 2e4:	08 95       	ret
		
		case b2:
		if (presstimer == 100)
 2e6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <presstimer>
 2ea:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <presstimer+0x1>
 2ee:	84 36       	cpi	r24, 0x64	; 100
 2f0:	91 05       	cpc	r25, r1
 2f2:	79 f5       	brne	.+94     	; 0x352 <incredecre+0x7a>
		{
			presstimer = 0;
 2f4:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <presstimer+0x1>
 2f8:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <presstimer>
			if (level < 7)
 2fc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <level>
 300:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <level+0x1>
 304:	07 97       	sbiw	r24, 0x07	; 7
 306:	2c f5       	brge	.+74     	; 0x352 <incredecre+0x7a>
			{
				level++;
 308:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <level>
 30c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <level+0x1>
 310:	01 96       	adiw	r24, 0x01	; 1
 312:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <level+0x1>
 316:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <level>
 31a:	08 95       	ret
		}
		break;
		
		
		case b3:
		if (presstimer == 100)
 31c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <presstimer>
 320:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <presstimer+0x1>
 324:	84 36       	cpi	r24, 0x64	; 100
 326:	91 05       	cpc	r25, r1
 328:	a1 f4       	brne	.+40     	; 0x352 <incredecre+0x7a>
		{
			presstimer = 0;
 32a:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <presstimer+0x1>
 32e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <presstimer>
			if (level > 0)
 332:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <level>
 336:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <level+0x1>
 33a:	18 16       	cp	r1, r24
 33c:	19 06       	cpc	r1, r25
 33e:	4c f4       	brge	.+18     	; 0x352 <incredecre+0x7a>
			{
				level--;
 340:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <level>
 344:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <level+0x1>
 348:	01 97       	sbiw	r24, 0x01	; 1
 34a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <level+0x1>
 34e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <level>
 352:	08 95       	ret

00000354 <lampeggio>:
	
}


void lampeggio(){
	if (level == 0)
 354:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <level>
 358:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <level+0x1>
 35c:	89 2b       	or	r24, r25
 35e:	19 f4       	brne	.+6      	; 0x366 <lampeggio+0x12>
	{
		PORTC |= l4;
 360:	44 9a       	sbi	0x08, 4	; 8
		PORTC &=~ l5;
 362:	45 98       	cbi	0x08, 5	; 8
 364:	08 95       	ret
	}
	else if (level == 7)
 366:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <level>
 36a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <level+0x1>
 36e:	07 97       	sbiw	r24, 0x07	; 7
 370:	19 f4       	brne	.+6      	; 0x378 <lampeggio+0x24>
	{
		PORTC |= l5;
 372:	45 9a       	sbi	0x08, 5	; 8
		PORTC &=~ l4;
 374:	44 98       	cbi	0x08, 4	; 8
 376:	08 95       	ret
	}
	
	else{
		 if (tick <= cycle)
 378:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <tick>
 37c:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <tick+0x1>
 380:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <cycle>
 384:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <cycle+0x1>
 388:	82 17       	cp	r24, r18
 38a:	93 07       	cpc	r25, r19
 38c:	1c f0       	brlt	.+6      	; 0x394 <lampeggio+0x40>
	{
		PORTC |= l4;
 38e:	44 9a       	sbi	0x08, 4	; 8
		PORTC &=~ l5;
 390:	45 98       	cbi	0x08, 5	; 8
 392:	02 c0       	rjmp	.+4      	; 0x398 <lampeggio+0x44>
	}else{
		PORTC |= l5;
 394:	45 9a       	sbi	0x08, 5	; 8
		PORTC &=~ l4;
 396:	44 98       	cbi	0x08, 4	; 8
	}
	if (tick == period)
 398:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <tick>
 39c:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <tick+0x1>
 3a0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 3a4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 3a8:	28 17       	cp	r18, r24
 3aa:	39 07       	cpc	r19, r25
 3ac:	21 f4       	brne	.+8      	; 0x3b6 <lampeggio+0x62>
	{
		tick = 0;
 3ae:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <tick+0x1>
 3b2:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <tick>
 3b6:	08 95       	ret

000003b8 <main>:



int main(void)
{
    DDRC |= (l0|l1|l2|l3|l4|l5);
 3b8:	87 b1       	in	r24, 0x07	; 7
 3ba:	8f 63       	ori	r24, 0x3F	; 63
 3bc:	87 b9       	out	0x07, r24	; 7
	PORTC &=~ (l0|l1|l2|l3|l4|l5);
 3be:	88 b1       	in	r24, 0x08	; 8
 3c0:	80 7c       	andi	r24, 0xC0	; 192
 3c2:	88 b9       	out	0x08, r24	; 8
	
	DDRD &=~(b2|b3|b4|b5|b6|b7);
 3c4:	8a b1       	in	r24, 0x0a	; 10
 3c6:	83 70       	andi	r24, 0x03	; 3
 3c8:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (b2|b3|b4|b5|b6|b7);
 3ca:	8b b1       	in	r24, 0x0b	; 11
 3cc:	8c 6f       	ori	r24, 0xFC	; 252
 3ce:	8b b9       	out	0x0b, r24	; 11
	
	PCICR |= (1 << PCIE2);
 3d0:	e8 e6       	ldi	r30, 0x68	; 104
 3d2:	f0 e0       	ldi	r31, 0x00	; 0
 3d4:	80 81       	ld	r24, Z
 3d6:	84 60       	ori	r24, 0x04	; 4
 3d8:	80 83       	st	Z, r24
	PCMSK2 |= (b2|b3|b4|b5|b6|b7);
 3da:	ed e6       	ldi	r30, 0x6D	; 109
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	80 81       	ld	r24, Z
 3e0:	8c 6f       	ori	r24, 0xFC	; 252
 3e2:	80 83       	st	Z, r24
	
	TCCR0A |= (1 << WGM01);
 3e4:	84 b5       	in	r24, 0x24	; 36
 3e6:	82 60       	ori	r24, 0x02	; 2
 3e8:	84 bd       	out	0x24, r24	; 36
	TIMSK0 |= (1 << OCIE0A);
 3ea:	ee e6       	ldi	r30, 0x6E	; 110
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	80 81       	ld	r24, Z
 3f0:	82 60       	ori	r24, 0x02	; 2
 3f2:	80 83       	st	Z, r24
	OCR0A =  157;
 3f4:	9d e9       	ldi	r25, 0x9D	; 157
 3f6:	97 bd       	out	0x27, r25	; 39
	
	TCCR1B |= (1 << WGM12);
 3f8:	e1 e8       	ldi	r30, 0x81	; 129
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	80 81       	ld	r24, Z
 3fe:	88 60       	ori	r24, 0x08	; 8
 400:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A);
 402:	ef e6       	ldi	r30, 0x6F	; 111
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	80 81       	ld	r24, Z
 408:	82 60       	ori	r24, 0x02	; 2
 40a:	80 83       	st	Z, r24
	OCR1A =  15626;
 40c:	2a e0       	ldi	r18, 0x0A	; 10
 40e:	3d e3       	ldi	r19, 0x3D	; 61
 410:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 414:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	
	TCCR2A |= (1 << WGM21);
 418:	e0 eb       	ldi	r30, 0xB0	; 176
 41a:	f0 e0       	ldi	r31, 0x00	; 0
 41c:	80 81       	ld	r24, Z
 41e:	82 60       	ori	r24, 0x02	; 2
 420:	80 83       	st	Z, r24
	TIMSK2 |= (1 << OCIE2A);
 422:	e0 e7       	ldi	r30, 0x70	; 112
 424:	f0 e0       	ldi	r31, 0x00	; 0
 426:	80 81       	ld	r24, Z
 428:	82 60       	ori	r24, 0x02	; 2
 42a:	80 83       	st	Z, r24
	OCR2A =  157;
 42c:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
	
	
	
	TCCR2B |= ((1<<CS20)|(1<<CS21)|(1<<CS22));
 430:	e1 eb       	ldi	r30, 0xB1	; 177
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	80 81       	ld	r24, Z
 436:	87 60       	ori	r24, 0x07	; 7
 438:	80 83       	st	Z, r24
	sei();
 43a:	78 94       	sei
			case cottura:
			lampeggio();
			
			if ((secondi == 16) || (pulsante == b4))
			{
				currentstate = reset;
 43c:	12 e0       	ldi	r17, 0x02	; 2
    {
		switch(currentstate){
			
			case livelli:
			TCCR0B |= ((1<<CS00)|(1<<CS02));
			TCCR1B |= ((1<<CS10)|(1<<CS12));
 43e:	c1 e8       	ldi	r28, 0x81	; 129
 440:	d0 e0       	ldi	r29, 0x00	; 0
			livellicott();
			incredecre();
			
			if (pulsante == b7)
			{
				currentstate = cottura;
 442:	01 e0       	ldi	r16, 0x01	; 1
	
	TCCR2B |= ((1<<CS20)|(1<<CS21)|(1<<CS22));
	sei();
    while (1) 
    {
		switch(currentstate){
 444:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <currentstate>
 448:	81 30       	cpi	r24, 0x01	; 1
 44a:	b9 f0       	breq	.+46     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 44c:	18 f0       	brcs	.+6      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 44e:	82 30       	cpi	r24, 0x02	; 2
 450:	29 f1       	breq	.+74     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
 452:	fa cf       	rjmp	.-12     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
			
			case livelli:
			TCCR0B |= ((1<<CS00)|(1<<CS02));
 454:	85 b5       	in	r24, 0x25	; 37
 456:	85 60       	ori	r24, 0x05	; 5
 458:	85 bd       	out	0x25, r24	; 37
			TCCR1B |= ((1<<CS10)|(1<<CS12));
 45a:	88 81       	ld	r24, Y
 45c:	85 60       	ori	r24, 0x05	; 5
 45e:	88 83       	st	Y, r24
			livellicott();
 460:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <livellicott>
			incredecre();
 464:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <incredecre>
			
			if (pulsante == b7)
 468:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <pulsante>
 46c:	80 38       	cpi	r24, 0x80	; 128
 46e:	51 f7       	brne	.-44     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
			{
				currentstate = cottura;
 470:	00 93 0f 01 	sts	0x010F, r16	; 0x80010f <currentstate>
				pulsante = 0;
 474:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <pulsante>
 478:	e5 cf       	rjmp	.-54     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
			}break;
			
			
			case cottura:
			lampeggio();
 47a:	0e 94 aa 01 	call	0x354	; 0x354 <lampeggio>
			
			if ((secondi == 16) || (pulsante == b4))
 47e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <secondi>
 482:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <secondi+0x1>
 486:	40 97       	sbiw	r24, 0x10	; 16
 488:	21 f0       	breq	.+8      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 48a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <pulsante>
 48e:	80 31       	cpi	r24, 0x10	; 16
 490:	c9 f6       	brne	.-78     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
			{
				currentstate = reset;
 492:	10 93 0f 01 	sts	0x010F, r17	; 0x80010f <currentstate>
				pulsante = 0;
 496:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <pulsante>
 49a:	d4 cf       	rjmp	.-88     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
			}break;
			
			
			
			case reset:
			TCCR0B &=~ ((1<<CS00)|(1<<CS02));
 49c:	85 b5       	in	r24, 0x25	; 37
 49e:	8a 7f       	andi	r24, 0xFA	; 250
 4a0:	85 bd       	out	0x25, r24	; 37
			TCCR1B &=~ ((1<<CS10)|(1<<CS12));
 4a2:	88 81       	ld	r24, Y
 4a4:	8a 7f       	andi	r24, 0xFA	; 250
 4a6:	88 83       	st	Y, r24
			PORTC &=~ (l0|l1|l2|l3|l4|l5);
 4a8:	88 b1       	in	r24, 0x08	; 8
 4aa:	80 7c       	andi	r24, 0xC0	; 192
 4ac:	88 b9       	out	0x08, r24	; 8
			tick = 0;
 4ae:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <tick+0x1>
 4b2:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <tick>
			secondi = 0;
 4b6:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <secondi+0x1>
 4ba:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <secondi>
			presstimer = 0;
 4be:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <presstimer+0x1>
 4c2:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <presstimer>
			level = 0;
 4c6:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <level+0x1>
 4ca:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <level>
			pulsante = 0;
 4ce:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <pulsante>
			period = 0;
 4d2:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 4d6:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
			cycle = 0;
 4da:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <cycle+0x1>
 4de:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <cycle>
			currentstate = livelli;
 4e2:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <currentstate>
			break;
 4e6:	ae cf       	rjmp	.-164    	; 0x444 <__LOCK_REGION_LENGTH__+0x44>

000004e8 <__tablejump2__>:
 4e8:	ee 0f       	add	r30, r30
 4ea:	ff 1f       	adc	r31, r31
 4ec:	05 90       	lpm	r0, Z+
 4ee:	f4 91       	lpm	r31, Z
 4f0:	e0 2d       	mov	r30, r0
 4f2:	09 94       	ijmp

000004f4 <_exit>:
 4f4:	f8 94       	cli

000004f6 <__stop_program>:
 4f6:	ff cf       	rjmp	.-2      	; 0x4f6 <__stop_program>
