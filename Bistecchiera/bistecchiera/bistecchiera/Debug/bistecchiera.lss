
bistecchiera.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000004fe  00000592  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800102  00800102  00000594  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000594  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000604  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000855  00000000  00000000  0000065c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006a4  00000000  00000000  00000eb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000531  00000000  00000000  00001555  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  00001a88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000444  00000000  00000000  00001b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000219  00000000  00000000  00001fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000021f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__vector_5>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__vector_7>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__vector_11>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__vector_14>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	9a 01       	movw	r18, r20
  6a:	89 01       	movw	r16, r18
  6c:	78 01       	movw	r14, r16
  6e:	67 01       	movw	r12, r14
  70:	56 01       	movw	r10, r12
  72:	45 01       	movw	r8, r10
  74:	41 01       	movw	r8, r2

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
  82:	11 e0       	ldi	r17, 0x01	; 1
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	ee ef       	ldi	r30, 0xFE	; 254
  8a:	f4 e0       	ldi	r31, 0x04	; 4
  8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
  8e:	05 90       	lpm	r0, Z+
  90:	0d 92       	st	X+, r0
  92:	a2 30       	cpi	r26, 0x02	; 2
  94:	b1 07       	cpc	r27, r17
  96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a2 e0       	ldi	r26, 0x02	; 2
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a0 31       	cpi	r26, 0x10	; 16
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <main>
  ac:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <__vector_5>:
						
		 }
    }
}

 ISR(PCINT2_vect){
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	11 24       	eor	r1, r1
  be:	2f 93       	push	r18
  c0:	3f 93       	push	r19
  c2:	4f 93       	push	r20
  c4:	5f 93       	push	r21
  c6:	6f 93       	push	r22
  c8:	7f 93       	push	r23
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
  ce:	af 93       	push	r26
  d0:	bf 93       	push	r27
  d2:	ef 93       	push	r30
	 uint8_t change = oldvalue ^ PIND;
  d4:	49 b1       	in	r20, 0x09	; 9
  d6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  da:	48 27       	eor	r20, r24
	 bool hold = false;
	 oldvalue = PIND;
  dc:	89 b1       	in	r24, 0x09	; 9
  de:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
  e2:	82 e0       	ldi	r24, 0x02	; 2
  e4:	90 e0       	ldi	r25, 0x00	; 0
    }
}

 ISR(PCINT2_vect){
	 uint8_t change = oldvalue ^ PIND;
	 bool hold = false;
  e6:	70 e0       	ldi	r23, 0x00	; 0
	 oldvalue = PIND;
	 for(uint8_t i = PIND2; i<=PIND7; i++){
		 if((change & (1<<i)) && !(PIND & (1<<i))){
  e8:	50 e0       	ldi	r21, 0x00	; 0
			 pulsantepremuto = (1<<i);
  ea:	a1 e0       	ldi	r26, 0x01	; 1
  ec:	b0 e0       	ldi	r27, 0x00	; 0
			 hold = true;
  ee:	e1 e0       	ldi	r30, 0x01	; 1
 ISR(PCINT2_vect){
	 uint8_t change = oldvalue ^ PIND;
	 bool hold = false;
	 oldvalue = PIND;
	 for(uint8_t i = PIND2; i<=PIND7; i++){
		 if((change & (1<<i)) && !(PIND & (1<<i))){
  f0:	9a 01       	movw	r18, r20
  f2:	08 2e       	mov	r0, r24
  f4:	02 c0       	rjmp	.+4      	; 0xfa <__vector_5+0x46>
  f6:	35 95       	asr	r19
  f8:	27 95       	ror	r18
  fa:	0a 94       	dec	r0
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <__vector_5+0x42>
  fe:	20 ff       	sbrs	r18, 0
 100:	14 c0       	rjmp	.+40     	; 0x12a <__vector_5+0x76>
 102:	29 b1       	in	r18, 0x09	; 9
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	08 2e       	mov	r0, r24
 108:	02 c0       	rjmp	.+4      	; 0x10e <__vector_5+0x5a>
 10a:	35 95       	asr	r19
 10c:	27 95       	ror	r18
 10e:	0a 94       	dec	r0
 110:	e2 f7       	brpl	.-8      	; 0x10a <__vector_5+0x56>
 112:	20 fd       	sbrc	r18, 0
 114:	0a c0       	rjmp	.+20     	; 0x12a <__vector_5+0x76>
			 pulsantepremuto = (1<<i);
 116:	9d 01       	movw	r18, r26
 118:	08 2e       	mov	r0, r24
 11a:	02 c0       	rjmp	.+4      	; 0x120 <__vector_5+0x6c>
 11c:	22 0f       	add	r18, r18
 11e:	33 1f       	adc	r19, r19
 120:	0a 94       	dec	r0
 122:	e2 f7       	brpl	.-8      	; 0x11c <__vector_5+0x68>
 124:	20 93 0f 01 	sts	0x010F, r18	; 0x80010f <pulsantepremuto>
			 hold = true;
 128:	7e 2f       	mov	r23, r30
 12a:	01 96       	adiw	r24, 0x01	; 1

 ISR(PCINT2_vect){
	 uint8_t change = oldvalue ^ PIND;
	 bool hold = false;
	 oldvalue = PIND;
	 for(uint8_t i = PIND2; i<=PIND7; i++){
 12c:	88 30       	cpi	r24, 0x08	; 8
 12e:	91 05       	cpc	r25, r1
 130:	f9 f6       	brne	.-66     	; 0xf0 <__vector_5+0x3c>
		 if((change & (1<<i)) && !(PIND & (1<<i))){
			 pulsantepremuto = (1<<i);
			 hold = true;
		 }
	 }
	 if(!(hold)){
 132:	71 11       	cpse	r23, r1
 134:	02 c0       	rjmp	.+4      	; 0x13a <__vector_5+0x86>
		 pulsantepremuto = 0;
 136:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <pulsantepremuto>
	 }
 }
 13a:	ef 91       	pop	r30
 13c:	bf 91       	pop	r27
 13e:	af 91       	pop	r26
 140:	9f 91       	pop	r25
 142:	8f 91       	pop	r24
 144:	7f 91       	pop	r23
 146:	6f 91       	pop	r22
 148:	5f 91       	pop	r21
 14a:	4f 91       	pop	r20
 14c:	3f 91       	pop	r19
 14e:	2f 91       	pop	r18
 150:	0f 90       	pop	r0
 152:	0f be       	out	0x3f, r0	; 63
 154:	0f 90       	pop	r0
 156:	1f 90       	pop	r1
 158:	18 95       	reti

0000015a <__vector_14>:

 ISR(TIMER0_COMPA_vect){
 15a:	1f 92       	push	r1
 15c:	0f 92       	push	r0
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	0f 92       	push	r0
 162:	11 24       	eor	r1, r1
 164:	8f 93       	push	r24
 166:	9f 93       	push	r25
	 tick++;
 168:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <tick>
 16c:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <tick+0x1>
 170:	01 96       	adiw	r24, 0x01	; 1
 172:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <tick+0x1>
 176:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <tick>
 }
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <__vector_11>:
 ISR(TIMER1_COMPA_vect){
 188:	1f 92       	push	r1
 18a:	0f 92       	push	r0
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	0f 92       	push	r0
 190:	11 24       	eor	r1, r1
 192:	8f 93       	push	r24
 194:	9f 93       	push	r25
	 secondi++;
 196:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <secondi>
 19a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <secondi+0x1>
 19e:	01 96       	adiw	r24, 0x01	; 1
 1a0:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <secondi+0x1>
 1a4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <secondi>
 }
 1a8:	9f 91       	pop	r25
 1aa:	8f 91       	pop	r24
 1ac:	0f 90       	pop	r0
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	0f 90       	pop	r0
 1b2:	1f 90       	pop	r1
 1b4:	18 95       	reti

000001b6 <__vector_7>:
 ISR(TIMER2_COMPA_vect){
 1b6:	1f 92       	push	r1
 1b8:	0f 92       	push	r0
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	0f 92       	push	r0
 1be:	11 24       	eor	r1, r1
 1c0:	8f 93       	push	r24
 1c2:	9f 93       	push	r25
	 pulsantetenutopremuto++;
 1c4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <pulsantetenutopremuto>
 1c8:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <pulsantetenutopremuto+0x1>
 1cc:	01 96       	adiw	r24, 0x01	; 1
 1ce:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <pulsantetenutopremuto+0x1>
 1d2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <pulsantetenutopremuto>
 }
 1d6:	9f 91       	pop	r25
 1d8:	8f 91       	pop	r24
 1da:	0f 90       	pop	r0
 1dc:	0f be       	out	0x3f, r0	; 63
 1de:	0f 90       	pop	r0
 1e0:	1f 90       	pop	r1
 1e2:	18 95       	reti

000001e4 <incrementodecremento>:
 
 
 
 
 void incrementodecremento(){
  switch(pulsantepremuto){
 1e4:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <pulsantepremuto>
 1e8:	84 30       	cpi	r24, 0x04	; 4
 1ea:	f1 f0       	breq	.+60     	; 0x228 <incrementodecremento+0x44>
 1ec:	88 30       	cpi	r24, 0x08	; 8
 1ee:	b9 f5       	brne	.+110    	; 0x25e <incrementodecremento+0x7a>
	  case B3:
	  if(pulsantetenutopremuto == 100){
 1f0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <pulsantetenutopremuto>
 1f4:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <pulsantetenutopremuto+0x1>
 1f8:	84 36       	cpi	r24, 0x64	; 100
 1fa:	91 05       	cpc	r25, r1
 1fc:	a1 f5       	brne	.+104    	; 0x266 <incrementodecremento+0x82>
		  pulsantetenutopremuto = 0;
 1fe:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <pulsantetenutopremuto+0x1>
 202:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <pulsantetenutopremuto>
		  if(level > 0){
 206:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <level>
 20a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <level+0x1>
 20e:	18 16       	cp	r1, r24
 210:	19 06       	cpc	r1, r25
 212:	4c f5       	brge	.+82     	; 0x266 <incrementodecremento+0x82>
			  level--;
 214:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <level>
 218:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <level+0x1>
 21c:	01 97       	sbiw	r24, 0x01	; 1
 21e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <level+0x1>
 222:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <level>
 226:	08 95       	ret
		  }
	  }break;
	  
	  case B2:
	  if(pulsantetenutopremuto == 100){
 228:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <pulsantetenutopremuto>
 22c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <pulsantetenutopremuto+0x1>
 230:	84 36       	cpi	r24, 0x64	; 100
 232:	91 05       	cpc	r25, r1
 234:	c1 f4       	brne	.+48     	; 0x266 <incrementodecremento+0x82>
		  pulsantetenutopremuto = 0;
 236:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <pulsantetenutopremuto+0x1>
 23a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <pulsantetenutopremuto>
		  if(level < 7){
 23e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <level>
 242:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <level+0x1>
 246:	07 97       	sbiw	r24, 0x07	; 7
 248:	74 f4       	brge	.+28     	; 0x266 <incrementodecremento+0x82>
			  level++;
 24a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <level>
 24e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <level+0x1>
 252:	01 96       	adiw	r24, 0x01	; 1
 254:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <level+0x1>
 258:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <level>
 25c:	08 95       	ret
		  }
	  } break;
	  
	  default:
	  pulsantetenutopremuto = 0;
 25e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <pulsantetenutopremuto+0x1>
 262:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <pulsantetenutopremuto>
 266:	08 95       	ret

00000268 <livelli>:
	  }
	  
	  
	  
	void livelli(){
	  	switch(level){
 268:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <level>
 26c:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <level+0x1>
 270:	31 97       	sbiw	r30, 0x01	; 1
 272:	e7 30       	cpi	r30, 0x07	; 7
 274:	f1 05       	cpc	r31, r1
 276:	08 f0       	brcs	.+2      	; 0x27a <livelli+0x12>
 278:	6e c0       	rjmp	.+220    	; 0x356 <livelli+0xee>
 27a:	ec 5c       	subi	r30, 0xCC	; 204
 27c:	ff 4f       	sbci	r31, 0xFF	; 255
 27e:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__tablejump2__>
		  	case 7:
		  	PORTC |= (L0 | L1 | L2);
 282:	88 b1       	in	r24, 0x08	; 8
 284:	87 60       	ori	r24, 0x07	; 7
 286:	88 b9       	out	0x08, r24	; 8
		  	break;
 288:	08 95       	ret
		  	
		  	case 6:
		  	PORTC &=~ (L0);
 28a:	40 98       	cbi	0x08, 0	; 8
		  	PORTC |= (L1 | L2);
 28c:	88 b1       	in	r24, 0x08	; 8
 28e:	86 60       	ori	r24, 0x06	; 6
 290:	88 b9       	out	0x08, r24	; 8
		  	cycle = 45;
 292:	8d e2       	ldi	r24, 0x2D	; 45
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <cycle+0x1>
 29a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <cycle>
		  	period = 50;
 29e:	82 e3       	ldi	r24, 0x32	; 50
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 2a6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
		  	break;
 2aa:	08 95       	ret
		  	
		  	case 5:
		  	PORTC &=~ (L1);
 2ac:	41 98       	cbi	0x08, 1	; 8
		  	PORTC |= (L0 | L2);
 2ae:	88 b1       	in	r24, 0x08	; 8
 2b0:	85 60       	ori	r24, 0x05	; 5
 2b2:	88 b9       	out	0x08, r24	; 8
		  	cycle = 35;
 2b4:	83 e2       	ldi	r24, 0x23	; 35
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <cycle+0x1>
 2bc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <cycle>
		  	period = 50;
 2c0:	82 e3       	ldi	r24, 0x32	; 50
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 2c8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
		  	break;
 2cc:	08 95       	ret
		  	
		  	case 4:
		  	PORTC &=~ (L0 | L1);
 2ce:	88 b1       	in	r24, 0x08	; 8
 2d0:	8c 7f       	andi	r24, 0xFC	; 252
 2d2:	88 b9       	out	0x08, r24	; 8
		  	PORTC |= (L2);
 2d4:	42 9a       	sbi	0x08, 2	; 8
		  	cycle = 25;
 2d6:	89 e1       	ldi	r24, 0x19	; 25
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <cycle+0x1>
 2de:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <cycle>
		  	period = 50;
 2e2:	82 e3       	ldi	r24, 0x32	; 50
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 2ea:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
		  	break;
 2ee:	08 95       	ret
		  	
		  	case 3:
		  	PORTC &=~ (L2);
 2f0:	42 98       	cbi	0x08, 2	; 8
		  	PORTC |= (L0 | L1);
 2f2:	88 b1       	in	r24, 0x08	; 8
 2f4:	83 60       	ori	r24, 0x03	; 3
 2f6:	88 b9       	out	0x08, r24	; 8
		  	cycle = 40;
 2f8:	88 e2       	ldi	r24, 0x28	; 40
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <cycle+0x1>
 300:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <cycle>
		  	period = 100;
 304:	84 e6       	ldi	r24, 0x64	; 100
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 30c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
		  	break;
 310:	08 95       	ret
		  	
		  	case 2:
		  	PORTC &=~ (L0 | L2);
 312:	88 b1       	in	r24, 0x08	; 8
 314:	8a 7f       	andi	r24, 0xFA	; 250
 316:	88 b9       	out	0x08, r24	; 8
		  	PORTC |= (L1);
 318:	41 9a       	sbi	0x08, 1	; 8
		  	cycle = 20;
 31a:	84 e1       	ldi	r24, 0x14	; 20
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <cycle+0x1>
 322:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <cycle>
		  	period = 100;
 326:	84 e6       	ldi	r24, 0x64	; 100
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 32e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
		  	break;
 332:	08 95       	ret
		  	
		  	case 1:
		  	PORTC &=~ (L1 | L2);
 334:	88 b1       	in	r24, 0x08	; 8
 336:	89 7f       	andi	r24, 0xF9	; 249
 338:	88 b9       	out	0x08, r24	; 8
		  	PORTC |= (L0);
 33a:	40 9a       	sbi	0x08, 0	; 8
		  	cycle = 10;
 33c:	8a e0       	ldi	r24, 0x0A	; 10
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <cycle+0x1>
 344:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <cycle>
		  	period = 100;
 348:	84 e6       	ldi	r24, 0x64	; 100
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 350:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
		  	break;
 354:	08 95       	ret
		  	
		  	default:
		  	PORTC &=~ (L0 | L1 | L2);
 356:	88 b1       	in	r24, 0x08	; 8
 358:	88 7f       	andi	r24, 0xF8	; 248
 35a:	88 b9       	out	0x08, r24	; 8
 35c:	08 95       	ret

0000035e <blink>:
  	}
	  
	  
	  
	  void blink(){
		  if(level == 0){
 35e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <level>
 362:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <level+0x1>
 366:	89 2b       	or	r24, r25
 368:	19 f4       	brne	.+6      	; 0x370 <blink+0x12>
			PORTC |= L4;
 36a:	44 9a       	sbi	0x08, 4	; 8
			PORTC &=~ L5;
 36c:	45 98       	cbi	0x08, 5	; 8
 36e:	08 95       	ret
	   }
			else if(level == 7){
 370:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <level>
 374:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <level+0x1>
 378:	07 97       	sbiw	r24, 0x07	; 7
 37a:	19 f4       	brne	.+6      	; 0x382 <blink+0x24>
			 PORTC |= L5;
 37c:	45 9a       	sbi	0x08, 5	; 8
			PORTC &=~ L4;
 37e:	44 98       	cbi	0x08, 4	; 8
 380:	08 95       	ret
		}
		else{
			if(tick <= cycle){
 382:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <tick>
 386:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <tick+0x1>
 38a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <cycle>
 38e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <cycle+0x1>
 392:	82 17       	cp	r24, r18
 394:	93 07       	cpc	r25, r19
 396:	1c f0       	brlt	.+6      	; 0x39e <blink+0x40>
			 PORTC |= L5;
 398:	45 9a       	sbi	0x08, 5	; 8
			 PORTC &=~ L4;
 39a:	44 98       	cbi	0x08, 4	; 8
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <blink+0x44>
		}
			else{

			PORTC |= L4;
 39e:	44 9a       	sbi	0x08, 4	; 8
			PORTC &=~ L5;
 3a0:	45 98       	cbi	0x08, 5	; 8
		}
		if(tick == period){
 3a2:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <tick>
 3a6:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <tick+0x1>
 3aa:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 3ae:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 3b2:	28 17       	cp	r18, r24
 3b4:	39 07       	cpc	r19, r25
 3b6:	21 f4       	brne	.+8      	; 0x3c0 <blink+0x62>
		 tick = 0;		  
 3b8:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <tick+0x1>
 3bc:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <tick>
 3c0:	08 95       	ret

000003c2 <main>:
	void livelli(); 
	void blink();
	
int main(void)
{
    DDRD &=~ (B2|B3|B4|B7);
 3c2:	8a b1       	in	r24, 0x0a	; 10
 3c4:	83 76       	andi	r24, 0x63	; 99
 3c6:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (B2|B3|B4|B7);
 3c8:	8b b1       	in	r24, 0x0b	; 11
 3ca:	8c 69       	ori	r24, 0x9C	; 156
 3cc:	8b b9       	out	0x0b, r24	; 11
	
	DDRC |= (L0|L1|L2|L4|L5);
 3ce:	87 b1       	in	r24, 0x07	; 7
 3d0:	87 63       	ori	r24, 0x37	; 55
 3d2:	87 b9       	out	0x07, r24	; 7
	PORTC &=~ (L0|L1|L2|L4|L5);
 3d4:	88 b1       	in	r24, 0x08	; 8
 3d6:	88 7c       	andi	r24, 0xC8	; 200
 3d8:	88 b9       	out	0x08, r24	; 8
	
	PCICR |= (1 << PCIE2);
 3da:	e8 e6       	ldi	r30, 0x68	; 104
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	80 81       	ld	r24, Z
 3e0:	84 60       	ori	r24, 0x04	; 4
 3e2:	80 83       	st	Z, r24
	PCMSK2 |= (B2|B3|B4|B7);
 3e4:	ed e6       	ldi	r30, 0x6D	; 109
 3e6:	f0 e0       	ldi	r31, 0x00	; 0
 3e8:	80 81       	ld	r24, Z
 3ea:	8c 69       	ori	r24, 0x9C	; 156
 3ec:	80 83       	st	Z, r24
	
	TCCR0A |= (1 << WGM01);
 3ee:	84 b5       	in	r24, 0x24	; 36
 3f0:	82 60       	ori	r24, 0x02	; 2
 3f2:	84 bd       	out	0x24, r24	; 36
	TIMSK1 |=(1 << OCIE0A);
 3f4:	ef e6       	ldi	r30, 0x6F	; 111
 3f6:	f0 e0       	ldi	r31, 0x00	; 0
 3f8:	80 81       	ld	r24, Z
 3fa:	82 60       	ori	r24, 0x02	; 2
 3fc:	80 83       	st	Z, r24
	OCR0A =157; //10ms
 3fe:	9d e9       	ldi	r25, 0x9D	; 157
 400:	97 bd       	out	0x27, r25	; 39
	
	TCCR1B |= (1<<WGM12);
 402:	a1 e8       	ldi	r26, 0x81	; 129
 404:	b0 e0       	ldi	r27, 0x00	; 0
 406:	8c 91       	ld	r24, X
 408:	88 60       	ori	r24, 0x08	; 8
 40a:	8c 93       	st	X, r24
	TIMSK1 |= (1<<OCIE1A);
 40c:	80 81       	ld	r24, Z
 40e:	82 60       	ori	r24, 0x02	; 2
 410:	80 83       	st	Z, r24
	OCR1A = 15626; //1s
 412:	2a e0       	ldi	r18, 0x0A	; 10
 414:	3d e3       	ldi	r19, 0x3D	; 61
 416:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 41a:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	 
	TCCR2A |= (1<<WGM21);
 41e:	e0 eb       	ldi	r30, 0xB0	; 176
 420:	f0 e0       	ldi	r31, 0x00	; 0
 422:	80 81       	ld	r24, Z
 424:	82 60       	ori	r24, 0x02	; 2
 426:	80 83       	st	Z, r24
	TIMSK2 |= (1<<OCIE2A);
 428:	e0 e7       	ldi	r30, 0x70	; 112
 42a:	f0 e0       	ldi	r31, 0x00	; 0
 42c:	80 81       	ld	r24, Z
 42e:	82 60       	ori	r24, 0x02	; 2
 430:	80 83       	st	Z, r24
	OCR2A = 157; //10ms
 432:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
	 
	TCCR2B |= ((1<<CS20) | (1<<CS21) | (1<<CS22));
 436:	e1 eb       	ldi	r30, 0xB1	; 177
 438:	f0 e0       	ldi	r31, 0x00	; 0
 43a:	80 81       	ld	r24, Z
 43c:	87 60       	ori	r24, 0x07	; 7
 43e:	80 83       	st	Z, r24
	 
	sei();
 440:	78 94       	sei
			 
			 
			 case cottura:
			 blink();
			 if((secondi == 16) || (pulsantepremuto == B4)){
				 currentstate = reset;
 442:	12 e0       	ldi	r17, 0x02	; 2
			livelli();
			incrementodecremento();
			
			 if(pulsantepremuto == B7){
				 TCCR0B |= ((1<<CS00) | (1<<CS02));
				 TCCR1B |= ((1<<CS10) | (1<<CS12));
 444:	c1 e8       	ldi	r28, 0x81	; 129
 446:	d0 e0       	ldi	r29, 0x00	; 0
				 currentstate = cottura;
 448:	01 e0       	ldi	r16, 0x01	; 1
	TCCR2B |= ((1<<CS20) | (1<<CS21) | (1<<CS22));
	 
	sei();
    while (1) 
    {
		switch(currentstate){
 44a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <currentstate>
 44e:	81 30       	cpi	r24, 0x01	; 1
 450:	b9 f0       	breq	.+46     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 452:	18 f0       	brcs	.+6      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 454:	82 30       	cpi	r24, 0x02	; 2
 456:	29 f1       	breq	.+74     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 458:	fa cf       	rjmp	.-12     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
			case selezione:
			livelli();
 45a:	0e 94 34 01 	call	0x268	; 0x268 <livelli>
			incrementodecremento();
 45e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <incrementodecremento>
			
			 if(pulsantepremuto == B7){
 462:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <pulsantepremuto>
 466:	80 38       	cpi	r24, 0x80	; 128
 468:	81 f7       	brne	.-32     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
				 TCCR0B |= ((1<<CS00) | (1<<CS02));
 46a:	85 b5       	in	r24, 0x25	; 37
 46c:	85 60       	ori	r24, 0x05	; 5
 46e:	85 bd       	out	0x25, r24	; 37
				 TCCR1B |= ((1<<CS10) | (1<<CS12));
 470:	88 81       	ld	r24, Y
 472:	85 60       	ori	r24, 0x05	; 5
 474:	88 83       	st	Y, r24
				 currentstate = cottura;
 476:	00 93 0e 01 	sts	0x010E, r16	; 0x80010e <currentstate>
				 pulsantepremuto = 0;
 47a:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <pulsantepremuto>
 47e:	e5 cf       	rjmp	.-54     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
			 }
			 break;
			 
			 
			 case cottura:
			 blink();
 480:	0e 94 af 01 	call	0x35e	; 0x35e <blink>
			 if((secondi == 16) || (pulsantepremuto == B4)){
 484:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <secondi>
 488:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <secondi+0x1>
 48c:	40 97       	sbiw	r24, 0x10	; 16
 48e:	21 f0       	breq	.+8      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 490:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <pulsantepremuto>
 494:	80 31       	cpi	r24, 0x10	; 16
 496:	c9 f6       	brne	.-78     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
				 currentstate = reset;
 498:	10 93 0e 01 	sts	0x010E, r17	; 0x80010e <currentstate>
				pulsantepremuto = 0;
 49c:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <pulsantepremuto>
 4a0:	d4 cf       	rjmp	.-88     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
				}break;
				
			case reset:
			 TCCR0B &=~ ((1<<CS00) | (1<<CS02));
 4a2:	85 b5       	in	r24, 0x25	; 37
 4a4:	8a 7f       	andi	r24, 0xFA	; 250
 4a6:	85 bd       	out	0x25, r24	; 37
			 TCCR1B &=~ ((1<<CS10) | (1<<CS12));
 4a8:	88 81       	ld	r24, Y
 4aa:	8a 7f       	andi	r24, 0xFA	; 250
 4ac:	88 83       	st	Y, r24
			 PORTC &=~ (L0|L1|L2|L4|L5);;
 4ae:	88 b1       	in	r24, 0x08	; 8
 4b0:	88 7c       	andi	r24, 0xC8	; 200
 4b2:	88 b9       	out	0x08, r24	; 8
			 secondi = 0;
 4b4:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <secondi+0x1>
 4b8:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <secondi>
			 tick = 0;
 4bc:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <tick+0x1>
 4c0:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <tick>
			 pulsantetenutopremuto = 0;
 4c4:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <pulsantetenutopremuto+0x1>
 4c8:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <pulsantetenutopremuto>
			 level = 0;
 4cc:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <level+0x1>
 4d0:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <level>
			 pulsantepremuto = 0;
 4d4:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <pulsantepremuto>
			 cycle = 0;
 4d8:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <cycle+0x1>
 4dc:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <cycle>
			 period = 0;
 4e0:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 4e4:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
			 currentstate = selezione;
 4e8:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <currentstate>
			 break;
 4ec:	ae cf       	rjmp	.-164    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>

000004ee <__tablejump2__>:
 4ee:	ee 0f       	add	r30, r30
 4f0:	ff 1f       	adc	r31, r31
 4f2:	05 90       	lpm	r0, Z+
 4f4:	f4 91       	lpm	r31, Z
 4f6:	e0 2d       	mov	r30, r0
 4f8:	09 94       	ijmp

000004fa <_exit>:
 4fa:	f8 94       	cli

000004fc <__stop_program>:
 4fc:	ff cf       	rjmp	.-2      	; 0x4fc <__stop_program>
