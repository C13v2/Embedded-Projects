
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000007bc  00000850  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800104  00800104  00000854  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000854  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000884  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000008c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000885  00000000  00000000  0000091c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e3  00000000  00000000  000011a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000550  00000000  00000000  00001884  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  00001dd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000421  00000000  00000000  00001ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000231  00000000  00000000  00002309  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  0000253a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_7>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec eb       	ldi	r30, 0xBC	; 188
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 30       	cpi	r26, 0x0E	; 14
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 cd 01 	call	0x39a	; 0x39a <main>
  9e:	0c 94 dc 03 	jmp	0x7b8	; 0x7b8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_5>:
			
		}
    }
}

ISR(PCINT2_vect){
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	4f 93       	push	r20
  b6:	5f 93       	push	r21
  b8:	6f 93       	push	r22
  ba:	7f 93       	push	r23
  bc:	8f 93       	push	r24
  be:	9f 93       	push	r25
  c0:	af 93       	push	r26
  c2:	bf 93       	push	r27
  c4:	ef 93       	push	r30
	uint8_t change = oldvalue ^ PIND;
  c6:	49 b1       	in	r20, 0x09	; 9
  c8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <oldvalue>
  cc:	48 27       	eor	r20, r24
	oldvalue = PIND;
  ce:	89 b1       	in	r24, 0x09	; 9
  d0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <oldvalue>
  d4:	82 e0       	ldi	r24, 0x02	; 2
  d6:	90 e0       	ldi	r25, 0x00	; 0
	bool hold = false;
  d8:	70 e0       	ldi	r23, 0x00	; 0
	for(uint8_t i = PIND2; i<=PIND7; i++){
		if((change & (1<<i)) && !(PIND & (1<<i))){
  da:	50 e0       	ldi	r21, 0x00	; 0
			pulsante = (1<<i);
  dc:	a1 e0       	ldi	r26, 0x01	; 1
  de:	b0 e0       	ldi	r27, 0x00	; 0
			hold = true;
  e0:	e1 e0       	ldi	r30, 0x01	; 1
ISR(PCINT2_vect){
	uint8_t change = oldvalue ^ PIND;
	oldvalue = PIND;
	bool hold = false;
	for(uint8_t i = PIND2; i<=PIND7; i++){
		if((change & (1<<i)) && !(PIND & (1<<i))){
  e2:	9a 01       	movw	r18, r20
  e4:	08 2e       	mov	r0, r24
  e6:	02 c0       	rjmp	.+4      	; 0xec <__vector_5+0x46>
  e8:	35 95       	asr	r19
  ea:	27 95       	ror	r18
  ec:	0a 94       	dec	r0
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <__vector_5+0x42>
  f0:	20 ff       	sbrs	r18, 0
  f2:	14 c0       	rjmp	.+40     	; 0x11c <__vector_5+0x76>
  f4:	29 b1       	in	r18, 0x09	; 9
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	08 2e       	mov	r0, r24
  fa:	02 c0       	rjmp	.+4      	; 0x100 <__vector_5+0x5a>
  fc:	35 95       	asr	r19
  fe:	27 95       	ror	r18
 100:	0a 94       	dec	r0
 102:	e2 f7       	brpl	.-8      	; 0xfc <__vector_5+0x56>
 104:	20 fd       	sbrc	r18, 0
 106:	0a c0       	rjmp	.+20     	; 0x11c <__vector_5+0x76>
			pulsante = (1<<i);
 108:	9d 01       	movw	r18, r26
 10a:	08 2e       	mov	r0, r24
 10c:	02 c0       	rjmp	.+4      	; 0x112 <__vector_5+0x6c>
 10e:	22 0f       	add	r18, r18
 110:	33 1f       	adc	r19, r19
 112:	0a 94       	dec	r0
 114:	e2 f7       	brpl	.-8      	; 0x10e <__vector_5+0x68>
 116:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <pulsante>
			hold = true;
 11a:	7e 2f       	mov	r23, r30
 11c:	01 96       	adiw	r24, 0x01	; 1

ISR(PCINT2_vect){
	uint8_t change = oldvalue ^ PIND;
	oldvalue = PIND;
	bool hold = false;
	for(uint8_t i = PIND2; i<=PIND7; i++){
 11e:	88 30       	cpi	r24, 0x08	; 8
 120:	91 05       	cpc	r25, r1
 122:	f9 f6       	brne	.-66     	; 0xe2 <__vector_5+0x3c>
		if((change & (1<<i)) && !(PIND & (1<<i))){
			pulsante = (1<<i);
			hold = true;
		}
	}
	if(!(hold)){
 124:	71 11       	cpse	r23, r1
 126:	02 c0       	rjmp	.+4      	; 0x12c <__vector_5+0x86>
		pulsante = 0;
 128:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <pulsante>
	}
}
 12c:	ef 91       	pop	r30
 12e:	bf 91       	pop	r27
 130:	af 91       	pop	r26
 132:	9f 91       	pop	r25
 134:	8f 91       	pop	r24
 136:	7f 91       	pop	r23
 138:	6f 91       	pop	r22
 13a:	5f 91       	pop	r21
 13c:	4f 91       	pop	r20
 13e:	3f 91       	pop	r19
 140:	2f 91       	pop	r18
 142:	0f 90       	pop	r0
 144:	0f be       	out	0x3f, r0	; 63
 146:	0f 90       	pop	r0
 148:	1f 90       	pop	r1
 14a:	18 95       	reti

0000014c <__vector_14>:

ISR(TIMER0_COMPA_vect){
 14c:	1f 92       	push	r1
 14e:	0f 92       	push	r0
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	0f 92       	push	r0
 154:	11 24       	eor	r1, r1
 156:	8f 93       	push	r24
 158:	9f 93       	push	r25
	tick++;
 15a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <tick>
 15e:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <tick+0x1>
 162:	01 96       	adiw	r24, 0x01	; 1
 164:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <tick+0x1>
 168:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <tick>
}
 16c:	9f 91       	pop	r25
 16e:	8f 91       	pop	r24
 170:	0f 90       	pop	r0
 172:	0f be       	out	0x3f, r0	; 63
 174:	0f 90       	pop	r0
 176:	1f 90       	pop	r1
 178:	18 95       	reti

0000017a <__vector_11>:

ISR(TIMER1_COMPA_vect){
 17a:	1f 92       	push	r1
 17c:	0f 92       	push	r0
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	0f 92       	push	r0
 182:	11 24       	eor	r1, r1
 184:	8f 93       	push	r24
 186:	9f 93       	push	r25
	secondi++;
 188:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <secondi>
 18c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <secondi+0x1>
 190:	01 96       	adiw	r24, 0x01	; 1
 192:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <secondi+0x1>
 196:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <secondi>
}
 19a:	9f 91       	pop	r25
 19c:	8f 91       	pop	r24
 19e:	0f 90       	pop	r0
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	0f 90       	pop	r0
 1a4:	1f 90       	pop	r1
 1a6:	18 95       	reti

000001a8 <__vector_7>:

ISR(TIMER2_COMPA_vect){
 1a8:	1f 92       	push	r1
 1aa:	0f 92       	push	r0
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	0f 92       	push	r0
 1b0:	11 24       	eor	r1, r1
 1b2:	8f 93       	push	r24
 1b4:	9f 93       	push	r25
	presstimer++;
 1b6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <presstimer>
 1ba:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <presstimer+0x1>
 1be:	01 96       	adiw	r24, 0x01	; 1
 1c0:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <presstimer+0x1>
 1c4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <presstimer>
}
 1c8:	9f 91       	pop	r25
 1ca:	8f 91       	pop	r24
 1cc:	0f 90       	pop	r0
 1ce:	0f be       	out	0x3f, r0	; 63
 1d0:	0f 90       	pop	r0
 1d2:	1f 90       	pop	r1
 1d4:	18 95       	reti

000001d6 <cambiovelocita>:



void cambiovelocita(){
	switch(period){
 1d6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1da:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1de:	82 30       	cpi	r24, 0x02	; 2
 1e0:	91 05       	cpc	r25, r1
 1e2:	99 f0       	breq	.+38     	; 0x20a <cambiovelocita+0x34>
 1e4:	83 30       	cpi	r24, 0x03	; 3
 1e6:	91 05       	cpc	r25, r1
 1e8:	b9 f0       	breq	.+46     	; 0x218 <cambiovelocita+0x42>
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	39 f0       	breq	.+14     	; 0x1fc <cambiovelocita+0x26>
		default:
		period = 600;
 1ee:	88 e5       	ldi	r24, 0x58	; 88
 1f0:	92 e0       	ldi	r25, 0x02	; 2
 1f2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 1f6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		break;
 1fa:	08 95       	ret
		
		case 1:
		period = 400;
 1fc:	80 e9       	ldi	r24, 0x90	; 144
 1fe:	91 e0       	ldi	r25, 0x01	; 1
 200:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 204:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		break;
 208:	08 95       	ret
		
		 case 2:
		 period = 200;
 20a:	88 ec       	ldi	r24, 0xC8	; 200
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 212:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		 break;
 216:	08 95       	ret
		 
		 case 3:
		 period = 120;
 218:	88 e7       	ldi	r24, 0x78	; 120
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 220:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 224:	08 95       	ret

00000226 <lampeggio>:
}


void lampeggio(){
	
	int cycle = (period)*(0.125);
 226:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 22a:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 22e:	07 2e       	mov	r0, r23
 230:	00 0c       	add	r0, r0
 232:	88 0b       	sbc	r24, r24
 234:	99 0b       	sbc	r25, r25
 236:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <__floatsisf>
 23a:	20 e0       	ldi	r18, 0x00	; 0
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	40 e0       	ldi	r20, 0x00	; 0
 240:	5e e3       	ldi	r21, 0x3E	; 62
 242:	0e 94 47 03 	call	0x68e	; 0x68e <__mulsf3>
 246:	0e 94 ab 02 	call	0x556	; 0x556 <__fixsfsi>
	int icycle = (int) cycle;
	
	
	if (tick <= icycle)
 24a:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <tick>
 24e:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <tick+0x1>
 252:	62 17       	cp	r22, r18
 254:	73 07       	cpc	r23, r19
 256:	1c f0       	brlt	.+6      	; 0x25e <lampeggio+0x38>
	{
		PORTC |= L1;
 258:	41 9a       	sbi	0x08, 1	; 8
		PORTC &=~ L2;
 25a:	42 98       	cbi	0x08, 2	; 8
 25c:	6f c0       	rjmp	.+222    	; 0x33c <lampeggio+0x116>
	}
	else if (tick <= 2*icycle)
 25e:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <tick>
 262:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <tick+0x1>
 266:	ab 01       	movw	r20, r22
 268:	44 0f       	add	r20, r20
 26a:	55 1f       	adc	r21, r21
 26c:	42 17       	cp	r20, r18
 26e:	53 07       	cpc	r21, r19
 270:	1c f0       	brlt	.+6      	; 0x278 <lampeggio+0x52>
	{
		PORTC |= L2;
 272:	42 9a       	sbi	0x08, 2	; 8
		PORTC &= ~L1;
 274:	41 98       	cbi	0x08, 1	; 8
 276:	62 c0       	rjmp	.+196    	; 0x33c <lampeggio+0x116>
	}
	else if (tick <= 3*icycle)
 278:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <tick>
 27c:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <tick+0x1>
 280:	9b 01       	movw	r18, r22
 282:	22 0f       	add	r18, r18
 284:	33 1f       	adc	r19, r19
 286:	26 0f       	add	r18, r22
 288:	37 1f       	adc	r19, r23
 28a:	24 17       	cp	r18, r20
 28c:	35 07       	cpc	r19, r21
 28e:	1c f0       	brlt	.+6      	; 0x296 <lampeggio+0x70>
	{
		PORTC |= L3;
 290:	43 9a       	sbi	0x08, 3	; 8
		PORTC &= ~L2;
 292:	42 98       	cbi	0x08, 2	; 8
 294:	53 c0       	rjmp	.+166    	; 0x33c <lampeggio+0x116>
	}
	else if (tick <= 4*icycle)
 296:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <tick>
 29a:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <tick+0x1>
 29e:	ab 01       	movw	r20, r22
 2a0:	44 0f       	add	r20, r20
 2a2:	55 1f       	adc	r21, r21
 2a4:	44 0f       	add	r20, r20
 2a6:	55 1f       	adc	r21, r21
 2a8:	42 17       	cp	r20, r18
 2aa:	53 07       	cpc	r21, r19
 2ac:	1c f0       	brlt	.+6      	; 0x2b4 <lampeggio+0x8e>
	{
		PORTC |= L4;
 2ae:	44 9a       	sbi	0x08, 4	; 8
		PORTC &= ~L3;
 2b0:	43 98       	cbi	0x08, 3	; 8
 2b2:	44 c0       	rjmp	.+136    	; 0x33c <lampeggio+0x116>
	}
	else if (tick <= 5*icycle)
 2b4:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <tick>
 2b8:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <tick+0x1>
 2bc:	9b 01       	movw	r18, r22
 2be:	22 0f       	add	r18, r18
 2c0:	33 1f       	adc	r19, r19
 2c2:	22 0f       	add	r18, r18
 2c4:	33 1f       	adc	r19, r19
 2c6:	26 0f       	add	r18, r22
 2c8:	37 1f       	adc	r19, r23
 2ca:	24 17       	cp	r18, r20
 2cc:	35 07       	cpc	r19, r21
 2ce:	1c f0       	brlt	.+6      	; 0x2d6 <lampeggio+0xb0>
	{
		PORTC |= L5;
 2d0:	45 9a       	sbi	0x08, 5	; 8
		PORTC &= ~L4;
 2d2:	44 98       	cbi	0x08, 4	; 8
 2d4:	33 c0       	rjmp	.+102    	; 0x33c <lampeggio+0x116>
	}
	else if (tick <= 6*icycle)
 2d6:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <tick>
 2da:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <tick+0x1>
 2de:	9b 01       	movw	r18, r22
 2e0:	22 0f       	add	r18, r18
 2e2:	33 1f       	adc	r19, r19
 2e4:	26 0f       	add	r18, r22
 2e6:	37 1f       	adc	r19, r23
 2e8:	22 0f       	add	r18, r18
 2ea:	33 1f       	adc	r19, r19
 2ec:	24 17       	cp	r18, r20
 2ee:	35 07       	cpc	r19, r21
 2f0:	1c f0       	brlt	.+6      	; 0x2f8 <lampeggio+0xd2>
	{
		PORTC |= L4;
 2f2:	44 9a       	sbi	0x08, 4	; 8
		PORTC &= ~L5;
 2f4:	45 98       	cbi	0x08, 5	; 8
 2f6:	22 c0       	rjmp	.+68     	; 0x33c <lampeggio+0x116>
	}
	else if (tick <= 7*icycle)
 2f8:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <tick>
 2fc:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <tick+0x1>
 300:	9b 01       	movw	r18, r22
 302:	22 0f       	add	r18, r18
 304:	33 1f       	adc	r19, r19
 306:	22 0f       	add	r18, r18
 308:	33 1f       	adc	r19, r19
 30a:	22 0f       	add	r18, r18
 30c:	33 1f       	adc	r19, r19
 30e:	26 1b       	sub	r18, r22
 310:	37 0b       	sbc	r19, r23
 312:	24 17       	cp	r18, r20
 314:	35 07       	cpc	r19, r21
 316:	1c f0       	brlt	.+6      	; 0x31e <lampeggio+0xf8>
	{
		PORTC |= L3;
 318:	43 9a       	sbi	0x08, 3	; 8
		PORTC &= ~L4;
 31a:	44 98       	cbi	0x08, 4	; 8
 31c:	0f c0       	rjmp	.+30     	; 0x33c <lampeggio+0x116>
	}
	else if (tick <= 8*icycle)
 31e:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <tick>
 322:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <tick+0x1>
 326:	66 0f       	add	r22, r22
 328:	77 1f       	adc	r23, r23
 32a:	66 0f       	add	r22, r22
 32c:	77 1f       	adc	r23, r23
 32e:	66 0f       	add	r22, r22
 330:	77 1f       	adc	r23, r23
 332:	62 17       	cp	r22, r18
 334:	73 07       	cpc	r23, r19
 336:	14 f0       	brlt	.+4      	; 0x33c <lampeggio+0x116>
	{
		PORTC |= L2;
 338:	42 9a       	sbi	0x08, 2	; 8
		PORTC &= ~L3;
 33a:	43 98       	cbi	0x08, 3	; 8
	}
	
	if (tick == period)
 33c:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <tick>
 340:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <tick+0x1>
 344:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 348:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 34c:	28 17       	cp	r18, r24
 34e:	39 07       	cpc	r19, r25
 350:	21 f4       	brne	.+8      	; 0x35a <lampeggio+0x134>
	{
		tick = 0;
 352:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <tick+0x1>
 356:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <tick>
 35a:	08 95       	ret

0000035c <lampeggioallarme>:


void lampeggioallarme(){
	int cycle;
	
	alarmperiod = 200;
 35c:	88 ec       	ldi	r24, 0xC8	; 200
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 364:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
	cycle = 50;
	
	if ( tick <= cycle)
 368:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <tick>
 36c:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <tick+0x1>
 370:	c3 97       	sbiw	r24, 0x33	; 51
 372:	14 f4       	brge	.+4      	; 0x378 <lampeggioallarme+0x1c>
	{
		PORTC |= L0;
 374:	40 9a       	sbi	0x08, 0	; 8
 376:	01 c0       	rjmp	.+2      	; 0x37a <lampeggioallarme+0x1e>
	}else  {
		PORTC &=~ L0;
 378:	40 98       	cbi	0x08, 0	; 8
	}
	if (tick == alarmperiod)
 37a:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <tick>
 37e:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <tick+0x1>
 382:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 386:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 38a:	28 17       	cp	r18, r24
 38c:	39 07       	cpc	r19, r25
 38e:	21 f4       	brne	.+8      	; 0x398 <lampeggioallarme+0x3c>
	{
		tick = 0;
 390:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <tick+0x1>
 394:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <tick>
 398:	08 95       	ret

0000039a <main>:
void lampeggio();
void lampeggioallarme();

int main(void)
{
    DDRC |= leds;
 39a:	87 b1       	in	r24, 0x07	; 7
 39c:	8f 63       	ori	r24, 0x3F	; 63
 39e:	87 b9       	out	0x07, r24	; 7
    PORTC &=~ leds;
 3a0:	88 b1       	in	r24, 0x08	; 8
 3a2:	80 7c       	andi	r24, 0xC0	; 192
 3a4:	88 b9       	out	0x08, r24	; 8
	
    DDRD &=~ buttons;
 3a6:	8a b1       	in	r24, 0x0a	; 10
 3a8:	8b 70       	andi	r24, 0x0B	; 11
 3aa:	8a b9       	out	0x0a, r24	; 10
    PORTD |= buttons;
 3ac:	8b b1       	in	r24, 0x0b	; 11
 3ae:	84 6f       	ori	r24, 0xF4	; 244
 3b0:	8b b9       	out	0x0b, r24	; 11
	
    PCICR |= (1<<PCIE2);
 3b2:	e8 e6       	ldi	r30, 0x68	; 104
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	80 81       	ld	r24, Z
 3b8:	84 60       	ori	r24, 0x04	; 4
 3ba:	80 83       	st	Z, r24
    PCMSK2 |= buttons;
 3bc:	ed e6       	ldi	r30, 0x6D	; 109
 3be:	f0 e0       	ldi	r31, 0x00	; 0
 3c0:	80 81       	ld	r24, Z
 3c2:	84 6f       	ori	r24, 0xF4	; 244
 3c4:	80 83       	st	Z, r24

	TCCR0A |= (1 << WGM01);
 3c6:	84 b5       	in	r24, 0x24	; 36
 3c8:	82 60       	ori	r24, 0x02	; 2
 3ca:	84 bd       	out	0x24, r24	; 36
	TIMSK0 |= (1 << OCIE0A);
 3cc:	ee e6       	ldi	r30, 0x6E	; 110
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	80 81       	ld	r24, Z
 3d2:	82 60       	ori	r24, 0x02	; 2
 3d4:	80 83       	st	Z, r24
	OCR0A = 79;
 3d6:	8f e4       	ldi	r24, 0x4F	; 79
 3d8:	87 bd       	out	0x27, r24	; 39

	TCCR1B |= (1 << WGM12);
 3da:	e1 e8       	ldi	r30, 0x81	; 129
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	80 81       	ld	r24, Z
 3e0:	88 60       	ori	r24, 0x08	; 8
 3e2:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A);
 3e4:	ef e6       	ldi	r30, 0x6F	; 111
 3e6:	f0 e0       	ldi	r31, 0x00	; 0
 3e8:	80 81       	ld	r24, Z
 3ea:	82 60       	ori	r24, 0x02	; 2
 3ec:	80 83       	st	Z, r24
	OCR1A = 15626;
 3ee:	8a e0       	ldi	r24, 0x0A	; 10
 3f0:	9d e3       	ldi	r25, 0x3D	; 61
 3f2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 3f6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>

	TCCR2A |= (1 << WGM21);
 3fa:	e0 eb       	ldi	r30, 0xB0	; 176
 3fc:	f0 e0       	ldi	r31, 0x00	; 0
 3fe:	80 81       	ld	r24, Z
 400:	82 60       	ori	r24, 0x02	; 2
 402:	80 83       	st	Z, r24
	TIMSK2 |= (1 << OCIE2A);
 404:	e0 e7       	ldi	r30, 0x70	; 112
 406:	f0 e0       	ldi	r31, 0x00	; 0
 408:	80 81       	ld	r24, Z
 40a:	82 60       	ori	r24, 0x02	; 2
 40c:	80 83       	st	Z, r24
	OCR2A = 157;
 40e:	8d e9       	ldi	r24, 0x9D	; 157
 410:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>

	sei();
 414:	78 94       	sei
	
	TCCR2B |= ((1 << CS20) | (1 << CS21) | (1 << CS22));
 416:	e1 eb       	ldi	r30, 0xB1	; 177
 418:	f0 e0       	ldi	r31, 0x00	; 0
 41a:	80 81       	ld	r24, Z
 41c:	87 60       	ori	r24, 0x07	; 7
 41e:	80 83       	st	Z, r24
			
			
			
			case reset:
			TCCR0B &= ~((1 << CS00) | (1 << CS02));
			TCCR1B &=~ ((1 << CS10) | (1 << CS12));
 420:	c1 e8       	ldi	r28, 0x81	; 129
 422:	d0 e0       	ldi	r29, 0x00	; 0
			
			if (pulsante == B2)
			{
				if ( presstimer >= 400)
				{
					currentstate = reset;
 424:	68 94       	set
 426:	ff 24       	eor	r15, r15
 428:	f2 f8       	bld	r15, 2
				cambiovelocita();
			}pulsante = 0;
			
			if (pulsante == B7)
			{
				currentstate = avvio;
 42a:	ee 24       	eor	r14, r14
 42c:	e3 94       	inc	r14
			}
			
			switch(pulsante){
			
			case B4:
			currentstate = freeze;
 42e:	68 94       	set
 430:	cc 24       	eor	r12, r12
 432:	c1 f8       	bld	r12, 1
				}
			break;
			
	
			case B6:
			currentstate = allarme;
 434:	0f 2e       	mov	r0, r31
 436:	f3 e0       	ldi	r31, 0x03	; 3
 438:	df 2e       	mov	r13, r31
 43a:	f0 2d       	mov	r31, r0
			pulsante = 0;
			break;
			
			
			case B2:
				if (presstimer = 100)
 43c:	04 e6       	ldi	r16, 0x64	; 100
 43e:	10 e0       	ldi	r17, 0x00	; 0
	
	TCCR2B |= ((1 << CS20) | (1 << CS21) | (1 << CS22));
	
    while (1) 
    {
		switch(currentstate){
 440:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <currentstate>
 444:	82 30       	cpi	r24, 0x02	; 2
 446:	09 f4       	brne	.+2      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 448:	49 c0       	rjmp	.+146    	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
 44a:	28 f4       	brcc	.+10     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 44c:	88 23       	and	r24, r24
 44e:	51 f0       	breq	.+20     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 450:	81 30       	cpi	r24, 0x01	; 1
 452:	d1 f0       	breq	.+52     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 454:	f7 cf       	rjmp	.-18     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 456:	83 30       	cpi	r24, 0x03	; 3
 458:	09 f4       	brne	.+2      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 45a:	50 c0       	rjmp	.+160    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
 45c:	84 30       	cpi	r24, 0x04	; 4
 45e:	09 f4       	brne	.+2      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 460:	5c c0       	rjmp	.+184    	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
 462:	f0 cf       	rjmp	.-32     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
			
			case accensione:
			PORTC |= L0;
 464:	40 9a       	sbi	0x08, 0	; 8
			if (pulsante == B5)
 466:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <pulsante>
 46a:	80 32       	cpi	r24, 0x20	; 32
 46c:	11 f4       	brne	.+4      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
			{
				cambiovelocita();
 46e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <cambiovelocita>
			}pulsante = 0;
 472:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <pulsante>
			
			if (pulsante == B7)
 476:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <pulsante>
 47a:	80 38       	cpi	r24, 0x80	; 128
 47c:	11 f4       	brne	.+4      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
			{
				currentstate = avvio;
 47e:	e0 92 0d 01 	sts	0x010D, r14	; 0x80010d <currentstate>
			}pulsante = 0;
 482:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <pulsante>
			break;
 486:	dc cf       	rjmp	.-72     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
			
			case avvio:
			TCCR0B |= ((1 << CS00) | (1 << CS02));
 488:	85 b5       	in	r24, 0x25	; 37
 48a:	85 60       	ori	r24, 0x05	; 5
 48c:	85 bd       	out	0x25, r24	; 37
			TCCR1B |= ((1 << CS10) | (1 << CS12));
 48e:	88 81       	ld	r24, Y
 490:	85 60       	ori	r24, 0x05	; 5
 492:	88 83       	st	Y, r24
			
			lampeggio();
 494:	0e 94 13 01 	call	0x226	; 0x226 <lampeggio>
			
			if (secondi == 10)
 498:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <secondi>
 49c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <secondi+0x1>
 4a0:	0a 97       	sbiw	r24, 0x0a	; 10
 4a2:	11 f4       	brne	.+4      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
			{
				currentstate = reset;
 4a4:	f0 92 0d 01 	sts	0x010D, r15	; 0x80010d <currentstate>
			}
			
			switch(pulsante){
 4a8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <pulsante>
 4ac:	80 31       	cpi	r24, 0x10	; 16
 4ae:	29 f0       	breq	.+10     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 4b0:	80 34       	cpi	r24, 0x40	; 64
 4b2:	79 f0       	breq	.+30     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 4b4:	84 30       	cpi	r24, 0x04	; 4
 4b6:	21 f6       	brne	.-120    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 4b8:	05 c0       	rjmp	.+10     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
			
			case B4:
			currentstate = freeze;
 4ba:	c0 92 0d 01 	sts	0x010D, r12	; 0x80010d <currentstate>
			pulsante = 0;
 4be:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <pulsante>
			break;
 4c2:	be cf       	rjmp	.-132    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
			
			
			case B2:
				if (presstimer = 100)
 4c4:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <presstimer+0x1>
 4c8:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <presstimer>
				{
					currentstate = reset;
 4cc:	f0 92 0d 01 	sts	0x010D, r15	; 0x80010d <currentstate>
 4d0:	b7 cf       	rjmp	.-146    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
				}
			break;
			
	
			case B6:
			currentstate = allarme;
 4d2:	d0 92 0d 01 	sts	0x010D, r13	; 0x80010d <currentstate>
			pulsante = 0;
 4d6:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <pulsante>
			break;
 4da:	b2 cf       	rjmp	.-156    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
		}break;
			
			case freeze:
			PORTC |= L0;
 4dc:	40 9a       	sbi	0x08, 0	; 8
			TCCR0B &=~ ((1<<CS00) | (1<<CS02));
 4de:	85 b5       	in	r24, 0x25	; 37
 4e0:	8a 7f       	andi	r24, 0xFA	; 250
 4e2:	85 bd       	out	0x25, r24	; 37
			TCCR1B &=~ ((1<<CS10) | (1<<CS12));
 4e4:	88 81       	ld	r24, Y
 4e6:	8a 7f       	andi	r24, 0xFA	; 250
 4e8:	88 83       	st	Y, r24
			
			if (pulsante == B7)
 4ea:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <pulsante>
 4ee:	80 38       	cpi	r24, 0x80	; 128
 4f0:	11 f4       	brne	.+4      	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
			{
				currentstate = avvio;
 4f2:	e0 92 0d 01 	sts	0x010D, r14	; 0x80010d <currentstate>
			}pulsante = 0;
 4f6:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <pulsante>
			break;
 4fa:	a2 cf       	rjmp	.-188    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
			
			
			
			
			case allarme: 
			lampeggioallarme();
 4fc:	0e 94 ae 01 	call	0x35c	; 0x35c <lampeggioallarme>
			
			if (pulsante == B2)
 500:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <pulsante>
 504:	84 30       	cpi	r24, 0x04	; 4
 506:	49 f4       	brne	.+18     	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
			{
				if ( presstimer >= 400)
 508:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <presstimer>
 50c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <presstimer+0x1>
 510:	80 39       	cpi	r24, 0x90	; 144
 512:	91 40       	sbci	r25, 0x01	; 1
 514:	14 f0       	brlt	.+4      	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
				{
					currentstate = reset;
 516:	f0 92 0d 01 	sts	0x010D, r15	; 0x80010d <currentstate>
			}
			
			
			
			case reset:
			TCCR0B &= ~((1 << CS00) | (1 << CS02));
 51a:	85 b5       	in	r24, 0x25	; 37
 51c:	8a 7f       	andi	r24, 0xFA	; 250
 51e:	85 bd       	out	0x25, r24	; 37
			TCCR1B &=~ ((1 << CS10) | (1 << CS12));
 520:	88 81       	ld	r24, Y
 522:	8a 7f       	andi	r24, 0xFA	; 250
 524:	88 83       	st	Y, r24
			PORTC &=~ leds;
 526:	88 b1       	in	r24, 0x08	; 8
 528:	80 7c       	andi	r24, 0xC0	; 192
 52a:	88 b9       	out	0x08, r24	; 8
			tick = 0;
 52c:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <tick+0x1>
 530:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <tick>
			secondi = 0;
 534:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <secondi+0x1>
 538:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <secondi>
			presstimer = 0;
 53c:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <presstimer+0x1>
 540:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <presstimer>
			pulsante = 0;
 544:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <pulsante>
			period = 0;
 548:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
 54c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
			currentstate = accensione;
 550:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <currentstate>
			break;
 554:	75 cf       	rjmp	.-278    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>

00000556 <__fixsfsi>:
 556:	0e 94 b2 02 	call	0x564	; 0x564 <__fixunssfsi>
 55a:	68 94       	set
 55c:	b1 11       	cpse	r27, r1
 55e:	0c 94 41 03 	jmp	0x682	; 0x682 <__fp_szero>
 562:	08 95       	ret

00000564 <__fixunssfsi>:
 564:	0e 94 26 03 	call	0x64c	; 0x64c <__fp_splitA>
 568:	88 f0       	brcs	.+34     	; 0x58c <__fixunssfsi+0x28>
 56a:	9f 57       	subi	r25, 0x7F	; 127
 56c:	98 f0       	brcs	.+38     	; 0x594 <__fixunssfsi+0x30>
 56e:	b9 2f       	mov	r27, r25
 570:	99 27       	eor	r25, r25
 572:	b7 51       	subi	r27, 0x17	; 23
 574:	b0 f0       	brcs	.+44     	; 0x5a2 <__fixunssfsi+0x3e>
 576:	e1 f0       	breq	.+56     	; 0x5b0 <__fixunssfsi+0x4c>
 578:	66 0f       	add	r22, r22
 57a:	77 1f       	adc	r23, r23
 57c:	88 1f       	adc	r24, r24
 57e:	99 1f       	adc	r25, r25
 580:	1a f0       	brmi	.+6      	; 0x588 <__fixunssfsi+0x24>
 582:	ba 95       	dec	r27
 584:	c9 f7       	brne	.-14     	; 0x578 <__fixunssfsi+0x14>
 586:	14 c0       	rjmp	.+40     	; 0x5b0 <__fixunssfsi+0x4c>
 588:	b1 30       	cpi	r27, 0x01	; 1
 58a:	91 f0       	breq	.+36     	; 0x5b0 <__fixunssfsi+0x4c>
 58c:	0e 94 40 03 	call	0x680	; 0x680 <__fp_zero>
 590:	b1 e0       	ldi	r27, 0x01	; 1
 592:	08 95       	ret
 594:	0c 94 40 03 	jmp	0x680	; 0x680 <__fp_zero>
 598:	67 2f       	mov	r22, r23
 59a:	78 2f       	mov	r23, r24
 59c:	88 27       	eor	r24, r24
 59e:	b8 5f       	subi	r27, 0xF8	; 248
 5a0:	39 f0       	breq	.+14     	; 0x5b0 <__fixunssfsi+0x4c>
 5a2:	b9 3f       	cpi	r27, 0xF9	; 249
 5a4:	cc f3       	brlt	.-14     	; 0x598 <__fixunssfsi+0x34>
 5a6:	86 95       	lsr	r24
 5a8:	77 95       	ror	r23
 5aa:	67 95       	ror	r22
 5ac:	b3 95       	inc	r27
 5ae:	d9 f7       	brne	.-10     	; 0x5a6 <__fixunssfsi+0x42>
 5b0:	3e f4       	brtc	.+14     	; 0x5c0 <__fixunssfsi+0x5c>
 5b2:	90 95       	com	r25
 5b4:	80 95       	com	r24
 5b6:	70 95       	com	r23
 5b8:	61 95       	neg	r22
 5ba:	7f 4f       	sbci	r23, 0xFF	; 255
 5bc:	8f 4f       	sbci	r24, 0xFF	; 255
 5be:	9f 4f       	sbci	r25, 0xFF	; 255
 5c0:	08 95       	ret

000005c2 <__floatunsisf>:
 5c2:	e8 94       	clt
 5c4:	09 c0       	rjmp	.+18     	; 0x5d8 <__floatsisf+0x12>

000005c6 <__floatsisf>:
 5c6:	97 fb       	bst	r25, 7
 5c8:	3e f4       	brtc	.+14     	; 0x5d8 <__floatsisf+0x12>
 5ca:	90 95       	com	r25
 5cc:	80 95       	com	r24
 5ce:	70 95       	com	r23
 5d0:	61 95       	neg	r22
 5d2:	7f 4f       	sbci	r23, 0xFF	; 255
 5d4:	8f 4f       	sbci	r24, 0xFF	; 255
 5d6:	9f 4f       	sbci	r25, 0xFF	; 255
 5d8:	99 23       	and	r25, r25
 5da:	a9 f0       	breq	.+42     	; 0x606 <__floatsisf+0x40>
 5dc:	f9 2f       	mov	r31, r25
 5de:	96 e9       	ldi	r25, 0x96	; 150
 5e0:	bb 27       	eor	r27, r27
 5e2:	93 95       	inc	r25
 5e4:	f6 95       	lsr	r31
 5e6:	87 95       	ror	r24
 5e8:	77 95       	ror	r23
 5ea:	67 95       	ror	r22
 5ec:	b7 95       	ror	r27
 5ee:	f1 11       	cpse	r31, r1
 5f0:	f8 cf       	rjmp	.-16     	; 0x5e2 <__floatsisf+0x1c>
 5f2:	fa f4       	brpl	.+62     	; 0x632 <__floatsisf+0x6c>
 5f4:	bb 0f       	add	r27, r27
 5f6:	11 f4       	brne	.+4      	; 0x5fc <__floatsisf+0x36>
 5f8:	60 ff       	sbrs	r22, 0
 5fa:	1b c0       	rjmp	.+54     	; 0x632 <__floatsisf+0x6c>
 5fc:	6f 5f       	subi	r22, 0xFF	; 255
 5fe:	7f 4f       	sbci	r23, 0xFF	; 255
 600:	8f 4f       	sbci	r24, 0xFF	; 255
 602:	9f 4f       	sbci	r25, 0xFF	; 255
 604:	16 c0       	rjmp	.+44     	; 0x632 <__floatsisf+0x6c>
 606:	88 23       	and	r24, r24
 608:	11 f0       	breq	.+4      	; 0x60e <__floatsisf+0x48>
 60a:	96 e9       	ldi	r25, 0x96	; 150
 60c:	11 c0       	rjmp	.+34     	; 0x630 <__floatsisf+0x6a>
 60e:	77 23       	and	r23, r23
 610:	21 f0       	breq	.+8      	; 0x61a <__floatsisf+0x54>
 612:	9e e8       	ldi	r25, 0x8E	; 142
 614:	87 2f       	mov	r24, r23
 616:	76 2f       	mov	r23, r22
 618:	05 c0       	rjmp	.+10     	; 0x624 <__floatsisf+0x5e>
 61a:	66 23       	and	r22, r22
 61c:	71 f0       	breq	.+28     	; 0x63a <__floatsisf+0x74>
 61e:	96 e8       	ldi	r25, 0x86	; 134
 620:	86 2f       	mov	r24, r22
 622:	70 e0       	ldi	r23, 0x00	; 0
 624:	60 e0       	ldi	r22, 0x00	; 0
 626:	2a f0       	brmi	.+10     	; 0x632 <__floatsisf+0x6c>
 628:	9a 95       	dec	r25
 62a:	66 0f       	add	r22, r22
 62c:	77 1f       	adc	r23, r23
 62e:	88 1f       	adc	r24, r24
 630:	da f7       	brpl	.-10     	; 0x628 <__floatsisf+0x62>
 632:	88 0f       	add	r24, r24
 634:	96 95       	lsr	r25
 636:	87 95       	ror	r24
 638:	97 f9       	bld	r25, 7
 63a:	08 95       	ret

0000063c <__fp_split3>:
 63c:	57 fd       	sbrc	r21, 7
 63e:	90 58       	subi	r25, 0x80	; 128
 640:	44 0f       	add	r20, r20
 642:	55 1f       	adc	r21, r21
 644:	59 f0       	breq	.+22     	; 0x65c <__fp_splitA+0x10>
 646:	5f 3f       	cpi	r21, 0xFF	; 255
 648:	71 f0       	breq	.+28     	; 0x666 <__fp_splitA+0x1a>
 64a:	47 95       	ror	r20

0000064c <__fp_splitA>:
 64c:	88 0f       	add	r24, r24
 64e:	97 fb       	bst	r25, 7
 650:	99 1f       	adc	r25, r25
 652:	61 f0       	breq	.+24     	; 0x66c <__fp_splitA+0x20>
 654:	9f 3f       	cpi	r25, 0xFF	; 255
 656:	79 f0       	breq	.+30     	; 0x676 <__fp_splitA+0x2a>
 658:	87 95       	ror	r24
 65a:	08 95       	ret
 65c:	12 16       	cp	r1, r18
 65e:	13 06       	cpc	r1, r19
 660:	14 06       	cpc	r1, r20
 662:	55 1f       	adc	r21, r21
 664:	f2 cf       	rjmp	.-28     	; 0x64a <__fp_split3+0xe>
 666:	46 95       	lsr	r20
 668:	f1 df       	rcall	.-30     	; 0x64c <__fp_splitA>
 66a:	08 c0       	rjmp	.+16     	; 0x67c <__fp_splitA+0x30>
 66c:	16 16       	cp	r1, r22
 66e:	17 06       	cpc	r1, r23
 670:	18 06       	cpc	r1, r24
 672:	99 1f       	adc	r25, r25
 674:	f1 cf       	rjmp	.-30     	; 0x658 <__fp_splitA+0xc>
 676:	86 95       	lsr	r24
 678:	71 05       	cpc	r23, r1
 67a:	61 05       	cpc	r22, r1
 67c:	08 94       	sec
 67e:	08 95       	ret

00000680 <__fp_zero>:
 680:	e8 94       	clt

00000682 <__fp_szero>:
 682:	bb 27       	eor	r27, r27
 684:	66 27       	eor	r22, r22
 686:	77 27       	eor	r23, r23
 688:	cb 01       	movw	r24, r22
 68a:	97 f9       	bld	r25, 7
 68c:	08 95       	ret

0000068e <__mulsf3>:
 68e:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <__mulsf3x>
 692:	0c 94 cb 03 	jmp	0x796	; 0x796 <__fp_round>
 696:	0e 94 bd 03 	call	0x77a	; 0x77a <__fp_pscA>
 69a:	38 f0       	brcs	.+14     	; 0x6aa <__mulsf3+0x1c>
 69c:	0e 94 c4 03 	call	0x788	; 0x788 <__fp_pscB>
 6a0:	20 f0       	brcs	.+8      	; 0x6aa <__mulsf3+0x1c>
 6a2:	95 23       	and	r25, r21
 6a4:	11 f0       	breq	.+4      	; 0x6aa <__mulsf3+0x1c>
 6a6:	0c 94 b4 03 	jmp	0x768	; 0x768 <__fp_inf>
 6aa:	0c 94 ba 03 	jmp	0x774	; 0x774 <__fp_nan>
 6ae:	11 24       	eor	r1, r1
 6b0:	0c 94 41 03 	jmp	0x682	; 0x682 <__fp_szero>

000006b4 <__mulsf3x>:
 6b4:	0e 94 1e 03 	call	0x63c	; 0x63c <__fp_split3>
 6b8:	70 f3       	brcs	.-36     	; 0x696 <__mulsf3+0x8>

000006ba <__mulsf3_pse>:
 6ba:	95 9f       	mul	r25, r21
 6bc:	c1 f3       	breq	.-16     	; 0x6ae <__mulsf3+0x20>
 6be:	95 0f       	add	r25, r21
 6c0:	50 e0       	ldi	r21, 0x00	; 0
 6c2:	55 1f       	adc	r21, r21
 6c4:	62 9f       	mul	r22, r18
 6c6:	f0 01       	movw	r30, r0
 6c8:	72 9f       	mul	r23, r18
 6ca:	bb 27       	eor	r27, r27
 6cc:	f0 0d       	add	r31, r0
 6ce:	b1 1d       	adc	r27, r1
 6d0:	63 9f       	mul	r22, r19
 6d2:	aa 27       	eor	r26, r26
 6d4:	f0 0d       	add	r31, r0
 6d6:	b1 1d       	adc	r27, r1
 6d8:	aa 1f       	adc	r26, r26
 6da:	64 9f       	mul	r22, r20
 6dc:	66 27       	eor	r22, r22
 6de:	b0 0d       	add	r27, r0
 6e0:	a1 1d       	adc	r26, r1
 6e2:	66 1f       	adc	r22, r22
 6e4:	82 9f       	mul	r24, r18
 6e6:	22 27       	eor	r18, r18
 6e8:	b0 0d       	add	r27, r0
 6ea:	a1 1d       	adc	r26, r1
 6ec:	62 1f       	adc	r22, r18
 6ee:	73 9f       	mul	r23, r19
 6f0:	b0 0d       	add	r27, r0
 6f2:	a1 1d       	adc	r26, r1
 6f4:	62 1f       	adc	r22, r18
 6f6:	83 9f       	mul	r24, r19
 6f8:	a0 0d       	add	r26, r0
 6fa:	61 1d       	adc	r22, r1
 6fc:	22 1f       	adc	r18, r18
 6fe:	74 9f       	mul	r23, r20
 700:	33 27       	eor	r19, r19
 702:	a0 0d       	add	r26, r0
 704:	61 1d       	adc	r22, r1
 706:	23 1f       	adc	r18, r19
 708:	84 9f       	mul	r24, r20
 70a:	60 0d       	add	r22, r0
 70c:	21 1d       	adc	r18, r1
 70e:	82 2f       	mov	r24, r18
 710:	76 2f       	mov	r23, r22
 712:	6a 2f       	mov	r22, r26
 714:	11 24       	eor	r1, r1
 716:	9f 57       	subi	r25, 0x7F	; 127
 718:	50 40       	sbci	r21, 0x00	; 0
 71a:	9a f0       	brmi	.+38     	; 0x742 <__mulsf3_pse+0x88>
 71c:	f1 f0       	breq	.+60     	; 0x75a <__mulsf3_pse+0xa0>
 71e:	88 23       	and	r24, r24
 720:	4a f0       	brmi	.+18     	; 0x734 <__mulsf3_pse+0x7a>
 722:	ee 0f       	add	r30, r30
 724:	ff 1f       	adc	r31, r31
 726:	bb 1f       	adc	r27, r27
 728:	66 1f       	adc	r22, r22
 72a:	77 1f       	adc	r23, r23
 72c:	88 1f       	adc	r24, r24
 72e:	91 50       	subi	r25, 0x01	; 1
 730:	50 40       	sbci	r21, 0x00	; 0
 732:	a9 f7       	brne	.-22     	; 0x71e <__mulsf3_pse+0x64>
 734:	9e 3f       	cpi	r25, 0xFE	; 254
 736:	51 05       	cpc	r21, r1
 738:	80 f0       	brcs	.+32     	; 0x75a <__mulsf3_pse+0xa0>
 73a:	0c 94 b4 03 	jmp	0x768	; 0x768 <__fp_inf>
 73e:	0c 94 41 03 	jmp	0x682	; 0x682 <__fp_szero>
 742:	5f 3f       	cpi	r21, 0xFF	; 255
 744:	e4 f3       	brlt	.-8      	; 0x73e <__mulsf3_pse+0x84>
 746:	98 3e       	cpi	r25, 0xE8	; 232
 748:	d4 f3       	brlt	.-12     	; 0x73e <__mulsf3_pse+0x84>
 74a:	86 95       	lsr	r24
 74c:	77 95       	ror	r23
 74e:	67 95       	ror	r22
 750:	b7 95       	ror	r27
 752:	f7 95       	ror	r31
 754:	e7 95       	ror	r30
 756:	9f 5f       	subi	r25, 0xFF	; 255
 758:	c1 f7       	brne	.-16     	; 0x74a <__mulsf3_pse+0x90>
 75a:	fe 2b       	or	r31, r30
 75c:	88 0f       	add	r24, r24
 75e:	91 1d       	adc	r25, r1
 760:	96 95       	lsr	r25
 762:	87 95       	ror	r24
 764:	97 f9       	bld	r25, 7
 766:	08 95       	ret

00000768 <__fp_inf>:
 768:	97 f9       	bld	r25, 7
 76a:	9f 67       	ori	r25, 0x7F	; 127
 76c:	80 e8       	ldi	r24, 0x80	; 128
 76e:	70 e0       	ldi	r23, 0x00	; 0
 770:	60 e0       	ldi	r22, 0x00	; 0
 772:	08 95       	ret

00000774 <__fp_nan>:
 774:	9f ef       	ldi	r25, 0xFF	; 255
 776:	80 ec       	ldi	r24, 0xC0	; 192
 778:	08 95       	ret

0000077a <__fp_pscA>:
 77a:	00 24       	eor	r0, r0
 77c:	0a 94       	dec	r0
 77e:	16 16       	cp	r1, r22
 780:	17 06       	cpc	r1, r23
 782:	18 06       	cpc	r1, r24
 784:	09 06       	cpc	r0, r25
 786:	08 95       	ret

00000788 <__fp_pscB>:
 788:	00 24       	eor	r0, r0
 78a:	0a 94       	dec	r0
 78c:	12 16       	cp	r1, r18
 78e:	13 06       	cpc	r1, r19
 790:	14 06       	cpc	r1, r20
 792:	05 06       	cpc	r0, r21
 794:	08 95       	ret

00000796 <__fp_round>:
 796:	09 2e       	mov	r0, r25
 798:	03 94       	inc	r0
 79a:	00 0c       	add	r0, r0
 79c:	11 f4       	brne	.+4      	; 0x7a2 <__fp_round+0xc>
 79e:	88 23       	and	r24, r24
 7a0:	52 f0       	brmi	.+20     	; 0x7b6 <__fp_round+0x20>
 7a2:	bb 0f       	add	r27, r27
 7a4:	40 f4       	brcc	.+16     	; 0x7b6 <__fp_round+0x20>
 7a6:	bf 2b       	or	r27, r31
 7a8:	11 f4       	brne	.+4      	; 0x7ae <__fp_round+0x18>
 7aa:	60 ff       	sbrs	r22, 0
 7ac:	04 c0       	rjmp	.+8      	; 0x7b6 <__fp_round+0x20>
 7ae:	6f 5f       	subi	r22, 0xFF	; 255
 7b0:	7f 4f       	sbci	r23, 0xFF	; 255
 7b2:	8f 4f       	sbci	r24, 0xFF	; 255
 7b4:	9f 4f       	sbci	r25, 0xFF	; 255
 7b6:	08 95       	ret

000007b8 <_exit>:
 7b8:	f8 94       	cli

000007ba <__stop_program>:
 7ba:	ff cf       	rjmp	.-2      	; 0x7ba <__stop_program>
