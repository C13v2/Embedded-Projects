
tastierino numerico con password.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000322  000003b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000322  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800106  00800106  000003bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000085a  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ce  00000000  00000000  00000cc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003d0  00000000  00000000  00001394  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  00001764  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000460  00000000  00000000  00001814  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000197  00000000  00000000  00001c74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001e0b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 9b 00 	jmp	0x136	; 0x136 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e2       	ldi	r30, 0x22	; 34
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 31       	cpi	r26, 0x13	; 19
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <main>
  9e:	0c 94 8f 01 	jmp	0x31e	; 0x31e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_5>:
			 break;
			 }
    }
}

 ISR(PCINT2_vect) {
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	4f 93       	push	r20
  b6:	5f 93       	push	r21
  b8:	6f 93       	push	r22
  ba:	8f 93       	push	r24
  bc:	9f 93       	push	r25
  be:	ef 93       	push	r30
  c0:	ff 93       	push	r31
	 uint8_t change = oldval ^ PIND;
  c2:	49 b1       	in	r20, 0x09	; 9
  c4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <oldval>
  c8:	48 27       	eor	r20, r24
	 oldval = PIND;
  ca:	89 b1       	in	r24, 0x09	; 9
  cc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <oldval>
  d0:	82 e0       	ldi	r24, 0x02	; 2
  d2:	90 e0       	ldi	r25, 0x00	; 0
	 for(uint8_t i = PIND2; i<=PIND7; i++){
		 if((change & (1<<i)) && !(PIND & (1<<i))){
  d4:	50 e0       	ldi	r21, 0x00	; 0
			 pulsantepremuto = (1<<i);
  d6:	e1 e0       	ldi	r30, 0x01	; 1
  d8:	f0 e0       	ldi	r31, 0x00	; 0

 ISR(PCINT2_vect) {
	 uint8_t change = oldval ^ PIND;
	 oldval = PIND;
	 for(uint8_t i = PIND2; i<=PIND7; i++){
		 if((change & (1<<i)) && !(PIND & (1<<i))){
  da:	9a 01       	movw	r18, r20
  dc:	08 2e       	mov	r0, r24
  de:	02 c0       	rjmp	.+4      	; 0xe4 <__vector_5+0x3e>
  e0:	35 95       	asr	r19
  e2:	27 95       	ror	r18
  e4:	0a 94       	dec	r0
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <__vector_5+0x3a>
  e8:	20 ff       	sbrs	r18, 0
  ea:	13 c0       	rjmp	.+38     	; 0x112 <__vector_5+0x6c>
  ec:	29 b1       	in	r18, 0x09	; 9
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	08 2e       	mov	r0, r24
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <__vector_5+0x52>
  f4:	35 95       	asr	r19
  f6:	27 95       	ror	r18
  f8:	0a 94       	dec	r0
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <__vector_5+0x4e>
  fc:	20 fd       	sbrc	r18, 0
  fe:	09 c0       	rjmp	.+18     	; 0x112 <__vector_5+0x6c>
			 pulsantepremuto = (1<<i);
 100:	9f 01       	movw	r18, r30
 102:	08 2e       	mov	r0, r24
 104:	02 c0       	rjmp	.+4      	; 0x10a <__vector_5+0x64>
 106:	22 0f       	add	r18, r18
 108:	33 1f       	adc	r19, r19
 10a:	0a 94       	dec	r0
 10c:	e2 f7       	brpl	.-8      	; 0x106 <__vector_5+0x60>
 10e:	20 93 11 01 	sts	0x0111, r18	; 0x800111 <pulsantepremuto>
 112:	01 96       	adiw	r24, 0x01	; 1
}

 ISR(PCINT2_vect) {
	 uint8_t change = oldval ^ PIND;
	 oldval = PIND;
	 for(uint8_t i = PIND2; i<=PIND7; i++){
 114:	88 30       	cpi	r24, 0x08	; 8
 116:	91 05       	cpc	r25, r1
 118:	01 f7       	brne	.-64     	; 0xda <__vector_5+0x34>
		 if((change & (1<<i)) && !(PIND & (1<<i))){
			 pulsantepremuto = (1<<i);
		 }
	 }
 }
 11a:	ff 91       	pop	r31
 11c:	ef 91       	pop	r30
 11e:	9f 91       	pop	r25
 120:	8f 91       	pop	r24
 122:	6f 91       	pop	r22
 124:	5f 91       	pop	r21
 126:	4f 91       	pop	r20
 128:	3f 91       	pop	r19
 12a:	2f 91       	pop	r18
 12c:	0f 90       	pop	r0
 12e:	0f be       	out	0x3f, r0	; 63
 130:	0f 90       	pop	r0
 132:	1f 90       	pop	r1
 134:	18 95       	reti

00000136 <__vector_11>:
 
 ISR(TIMER1_COMPA_vect) {
 136:	1f 92       	push	r1
 138:	0f 92       	push	r0
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	0f 92       	push	r0
 13e:	11 24       	eor	r1, r1
 140:	8f 93       	push	r24
 142:	9f 93       	push	r25
	 tick++;
 144:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <tick>
 148:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <tick+0x1>
 14c:	01 96       	adiw	r24, 0x01	; 1
 14e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <tick+0x1>
 152:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <tick>
 }
 156:	9f 91       	pop	r25
 158:	8f 91       	pop	r24
 15a:	0f 90       	pop	r0
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	0f 90       	pop	r0
 160:	1f 90       	pop	r1
 162:	18 95       	reti

00000164 <check_password>:
 
 
  void check_password() {
 164:	50 91 12 01 	lds	r21, 0x0112	; 0x800112 <currentstate>
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	90 e0       	ldi	r25, 0x00	; 0
	  bool errorcheck = false;
 16c:	40 e0       	ldi	r20, 0x00	; 0
	  for (uint8_t i = 0; i < 4; i++) {
		  if (guess[i] != password[i]) {
			  currentstate = reset;
 16e:	72 e0       	ldi	r23, 0x02	; 2
			  errorcheck = true;
 170:	61 e0       	ldi	r22, 0x01	; 1
 
 
  void check_password() {
	  bool errorcheck = false;
	  for (uint8_t i = 0; i < 4; i++) {
		  if (guess[i] != password[i]) {
 172:	fc 01       	movw	r30, r24
 174:	e3 5f       	subi	r30, 0xF3	; 243
 176:	fe 4f       	sbci	r31, 0xFE	; 254
 178:	30 81       	ld	r19, Z
 17a:	fc 01       	movw	r30, r24
 17c:	e0 50       	subi	r30, 0x00	; 0
 17e:	ff 4f       	sbci	r31, 0xFF	; 255
 180:	20 81       	ld	r18, Z
 182:	32 17       	cp	r19, r18
 184:	11 f0       	breq	.+4      	; 0x18a <check_password+0x26>
			  currentstate = reset;
 186:	57 2f       	mov	r21, r23
			  errorcheck = true;
 188:	46 2f       	mov	r20, r22
 18a:	01 96       	adiw	r24, 0x01	; 1
 }
 
 
  void check_password() {
	  bool errorcheck = false;
	  for (uint8_t i = 0; i < 4; i++) {
 18c:	84 30       	cpi	r24, 0x04	; 4
 18e:	91 05       	cpc	r25, r1
 190:	81 f7       	brne	.-32     	; 0x172 <check_password+0xe>
 192:	50 93 12 01 	sts	0x0112, r21	; 0x800112 <currentstate>
		  if (guess[i] != password[i]) {
			  currentstate = reset;
			  errorcheck = true;
		  }
	  }
	  if(!(errorcheck)){
 196:	41 11       	cpse	r20, r1
 198:	07 c0       	rjmp	.+14     	; 0x1a8 <check_password+0x44>
	  
	  currentstate = avvio;
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <currentstate>
	  tick = 0;
 1a0:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <tick+0x1>
 1a4:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <tick>
 1a8:	08 95       	ret

000001aa <lampeggio>:
	  }
  }
  
 void lampeggio(){
	 if (tick < 5 && loopcount < 3)
 1aa:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <tick>
 1ae:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <tick+0x1>
 1b2:	05 97       	sbiw	r24, 0x05	; 5
 1b4:	54 f4       	brge	.+20     	; 0x1ca <lampeggio+0x20>
 1b6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 1ba:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
 1be:	03 97       	sbiw	r24, 0x03	; 3
 1c0:	24 f4       	brge	.+8      	; 0x1ca <lampeggio+0x20>
	 {
		 PORTC |= (l0|l1|l2|l3);
 1c2:	88 b1       	in	r24, 0x08	; 8
 1c4:	8f 60       	ori	r24, 0x0F	; 15
 1c6:	88 b9       	out	0x08, r24	; 8
 1c8:	03 c0       	rjmp	.+6      	; 0x1d0 <lampeggio+0x26>
	 }else{
		 PORTC &=~ (l0|l1|l2|l3);
 1ca:	88 b1       	in	r24, 0x08	; 8
 1cc:	80 7f       	andi	r24, 0xF0	; 240
 1ce:	88 b9       	out	0x08, r24	; 8
	 }
	 if (tick == 7)
 1d0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <tick>
 1d4:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <tick+0x1>
 1d8:	07 97       	sbiw	r24, 0x07	; 7
 1da:	69 f4       	brne	.+26     	; 0x1f6 <lampeggio+0x4c>
	 {
		 tick = 0;
 1dc:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <tick+0x1>
 1e0:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <tick>
		 loopcount ++;
 1e4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 1e8:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
 1ec:	01 96       	adiw	r24, 0x01	; 1
 1ee:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
 1f2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 1f6:	08 95       	ret

000001f8 <main>:
void lampeggio();
void check_password();

int main(void)
{
	 DDRC |= (l1 | l2 | l3 | l0 | l5);
 1f8:	87 b1       	in	r24, 0x07	; 7
 1fa:	8f 62       	ori	r24, 0x2F	; 47
 1fc:	87 b9       	out	0x07, r24	; 7
	 PORTC &=~ (l1 | l2 | l3 | l0 | l5);
 1fe:	88 b1       	in	r24, 0x08	; 8
 200:	80 7d       	andi	r24, 0xD0	; 208
 202:	88 b9       	out	0x08, r24	; 8
	 
	 DDRD &=~ (b3 | b4 | b5 | b7);
 204:	8a b1       	in	r24, 0x0a	; 10
 206:	87 74       	andi	r24, 0x47	; 71
 208:	8a b9       	out	0x0a, r24	; 10
	 PORTD |=(b3 | b4 | b5 | b7);
 20a:	8b b1       	in	r24, 0x0b	; 11
 20c:	88 6b       	ori	r24, 0xB8	; 184
 20e:	8b b9       	out	0x0b, r24	; 11
	 
	 PCICR |= (1 << PCIE2);
 210:	e8 e6       	ldi	r30, 0x68	; 104
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	80 81       	ld	r24, Z
 216:	84 60       	ori	r24, 0x04	; 4
 218:	80 83       	st	Z, r24
	 PCMSK2 |= (b3 | b4 | b5 | b7);
 21a:	ed e6       	ldi	r30, 0x6D	; 109
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	80 81       	ld	r24, Z
 220:	88 6b       	ori	r24, 0xB8	; 184
 222:	80 83       	st	Z, r24
	 
	 TCCR1B |= (1 << WGM12);
 224:	e1 e8       	ldi	r30, 0x81	; 129
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	80 81       	ld	r24, Z
 22a:	88 60       	ori	r24, 0x08	; 8
 22c:	80 83       	st	Z, r24
	 TIMSK1 |= (1 << OCIE1A);
 22e:	ef e6       	ldi	r30, 0x6F	; 111
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	80 81       	ld	r24, Z
 234:	82 60       	ori	r24, 0x02	; 2
 236:	80 83       	st	Z, r24
	 OCR1A = 1564; //100 ms
 238:	8c e1       	ldi	r24, 0x1C	; 28
 23a:	96 e0       	ldi	r25, 0x06	; 6
 23c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 240:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	 sei();
 244:	78 94       	sei
				 check_password();
			 }
			 break;
			 
			 case avvio:
			 TCCR1B |= (1 << CS10)|(1 << CS12);
 246:	c1 e8       	ldi	r28, 0x81	; 129
 248:	d0 e0       	ldi	r29, 0x00	; 0
			 lampeggio();
			 if (pulsantepremuto == b7)
			 {
				 b7presscount++;
				 if (b7presscount == 2){
					 currentstate = reset;
 24a:	12 e0       	ldi	r17, 0x02	; 2
	 OCR1A = 1564; //100 ms
	 sei();
	 
    while (1) 
    {
		 switch (currentstate){
 24c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <currentstate>
 250:	81 30       	cpi	r24, 0x01	; 1
 252:	c9 f1       	breq	.+114    	; 0x2c6 <main+0xce>
 254:	20 f0       	brcs	.+8      	; 0x25e <main+0x66>
 256:	82 30       	cpi	r24, 0x02	; 2
 258:	09 f4       	brne	.+2      	; 0x25c <main+0x64>
 25a:	4e c0       	rjmp	.+156    	; 0x2f8 <main+0x100>
 25c:	f9 cf       	rjmp	.-14     	; 0x250 <main+0x58>
			 case inserimento:
			 if (pulsantepremuto !=0)
 25e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <pulsantepremuto>
 262:	88 23       	and	r24, r24
 264:	39 f1       	breq	.+78     	; 0x2b4 <main+0xbc>
			 {
				 guess[currentpos]= pulsantepremuto;
 266:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <currentpos>
 26a:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <currentpos+0x1>
 26e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <pulsantepremuto>
 272:	e3 5f       	subi	r30, 0xF3	; 243
 274:	fe 4f       	sbci	r31, 0xFE	; 254
 276:	80 83       	st	Z, r24
				 switch(currentpos){
 278:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <currentpos>
 27c:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <currentpos+0x1>
 280:	82 30       	cpi	r24, 0x02	; 2
 282:	91 05       	cpc	r25, r1
 284:	49 f0       	breq	.+18     	; 0x298 <main+0xa0>
 286:	83 30       	cpi	r24, 0x03	; 3
 288:	91 05       	cpc	r25, r1
 28a:	21 f0       	breq	.+8      	; 0x294 <main+0x9c>
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	31 f0       	breq	.+12     	; 0x29c <main+0xa4>
					 default:
					 PORTC |= l0;
 290:	40 9a       	sbi	0x08, 0	; 8
					 break;
 292:	05 c0       	rjmp	.+10     	; 0x29e <main+0xa6>
					 case 3:
					 PORTC|=l3;
 294:	43 9a       	sbi	0x08, 3	; 8
					 break;
 296:	03 c0       	rjmp	.+6      	; 0x29e <main+0xa6>
					 case 2:
					 PORTC |=l2;
 298:	42 9a       	sbi	0x08, 2	; 8
					 break;
 29a:	01 c0       	rjmp	.+2      	; 0x29e <main+0xa6>
					 case 1:
					 PORTC|=l1;
 29c:	41 9a       	sbi	0x08, 1	; 8
					 break;
				 }
				 currentpos ++;
 29e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <currentpos>
 2a2:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <currentpos+0x1>
 2a6:	01 96       	adiw	r24, 0x01	; 1
 2a8:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <currentpos+0x1>
 2ac:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <currentpos>
				 pulsantepremuto = 0;
 2b0:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <pulsantepremuto>
			 }
			 if (currentpos == 4) {
 2b4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <currentpos>
 2b8:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <currentpos+0x1>
 2bc:	04 97       	sbiw	r24, 0x04	; 4
 2be:	31 f6       	brne	.-116    	; 0x24c <main+0x54>
				 check_password();
 2c0:	0e 94 b2 00 	call	0x164	; 0x164 <check_password>
 2c4:	c3 cf       	rjmp	.-122    	; 0x24c <main+0x54>
			 }
			 break;
			 
			 case avvio:
			 TCCR1B |= (1 << CS10)|(1 << CS12);
 2c6:	88 81       	ld	r24, Y
 2c8:	85 60       	ori	r24, 0x05	; 5
 2ca:	88 83       	st	Y, r24
			 PORTC |= l5;
 2cc:	45 9a       	sbi	0x08, 5	; 8
			 lampeggio();
 2ce:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lampeggio>
			 if (pulsantepremuto == b7)
 2d2:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <pulsantepremuto>
 2d6:	80 38       	cpi	r24, 0x80	; 128
 2d8:	09 f0       	breq	.+2      	; 0x2dc <main+0xe4>
 2da:	b8 cf       	rjmp	.-144    	; 0x24c <main+0x54>
			 {
				 b7presscount++;
 2dc:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <b7presscount>
 2e0:	8f 5f       	subi	r24, 0xFF	; 255
 2e2:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <b7presscount>
				 if (b7presscount == 2){
 2e6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <b7presscount>
 2ea:	82 30       	cpi	r24, 0x02	; 2
 2ec:	11 f4       	brne	.+4      	; 0x2f2 <main+0xfa>
					 currentstate = reset;
 2ee:	10 93 12 01 	sts	0x0112, r17	; 0x800112 <currentstate>
				 }
				 pulsantepremuto = 0;
 2f2:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <pulsantepremuto>
 2f6:	aa cf       	rjmp	.-172    	; 0x24c <main+0x54>
			 }break;
			 
			 case reset:
			 TCCR1B &=~ ((1<<CS10) | (1<<CS12));
 2f8:	88 81       	ld	r24, Y
 2fa:	8a 7f       	andi	r24, 0xFA	; 250
 2fc:	88 83       	st	Y, r24
			 PORTC &=~ (l0|l1|l2|l3|l5);
 2fe:	88 b1       	in	r24, 0x08	; 8
 300:	80 7d       	andi	r24, 0xD0	; 208
 302:	88 b9       	out	0x08, r24	; 8
			 currentpos = 0;
 304:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <currentpos+0x1>
 308:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <currentpos>
			 tick = 0;
 30c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <tick+0x1>
 310:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <tick>
			 pulsantepremuto = 0;
 314:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <pulsantepremuto>
			 currentstate = inserimento;
 318:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <currentstate>
			 break;
 31c:	97 cf       	rjmp	.-210    	; 0x24c <main+0x54>

0000031e <_exit>:
 31e:	f8 94       	cli

00000320 <__stop_program>:
 320:	ff cf       	rjmp	.-2      	; 0x320 <__stop_program>
