
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000044e  000004e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000044e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  0080010a  0080010a  000004ec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000051c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  0000055c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000865  00000000  00000000  000005ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006dd  00000000  00000000  00000e11  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000460  00000000  00000000  000014ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e4  00000000  00000000  00001950  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040e  00000000  00000000  00001a34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001c6  00000000  00000000  00001e42  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002008  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 9b 00 	jmp	0x136	; 0x136 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e4       	ldi	r30, 0x4E	; 78
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 31       	cpi	r26, 0x13	; 19
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 77 01 	call	0x2ee	; 0x2ee <main>
  9e:	0c 94 25 02 	jmp	0x44a	; 0x44a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_5>:
			
		}
    }
}

ISR(PCINT2_vect){
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	4f 93       	push	r20
  b6:	5f 93       	push	r21
  b8:	6f 93       	push	r22
  ba:	8f 93       	push	r24
  bc:	9f 93       	push	r25
  be:	ef 93       	push	r30
  c0:	ff 93       	push	r31
	uint8_t change = oldvalue ^ PIND;
  c2:	49 b1       	in	r20, 0x09	; 9
  c4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <oldvalue>
  c8:	48 27       	eor	r20, r24
	oldvalue = PIND;
  ca:	89 b1       	in	r24, 0x09	; 9
  cc:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <oldvalue>
  d0:	82 e0       	ldi	r24, 0x02	; 2
  d2:	90 e0       	ldi	r25, 0x00	; 0
	for (uint8_t i = PIND2; i <= PIND7; i++)
	{
		if ((change &(1 << i)) && !(PIND & (1 << i)))
  d4:	50 e0       	ldi	r21, 0x00	; 0
		{
			pulsante = (1 << i);
  d6:	e1 e0       	ldi	r30, 0x01	; 1
  d8:	f0 e0       	ldi	r31, 0x00	; 0
ISR(PCINT2_vect){
	uint8_t change = oldvalue ^ PIND;
	oldvalue = PIND;
	for (uint8_t i = PIND2; i <= PIND7; i++)
	{
		if ((change &(1 << i)) && !(PIND & (1 << i)))
  da:	9a 01       	movw	r18, r20
  dc:	08 2e       	mov	r0, r24
  de:	02 c0       	rjmp	.+4      	; 0xe4 <__vector_5+0x3e>
  e0:	35 95       	asr	r19
  e2:	27 95       	ror	r18
  e4:	0a 94       	dec	r0
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <__vector_5+0x3a>
  e8:	20 ff       	sbrs	r18, 0
  ea:	13 c0       	rjmp	.+38     	; 0x112 <__vector_5+0x6c>
  ec:	29 b1       	in	r18, 0x09	; 9
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	08 2e       	mov	r0, r24
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <__vector_5+0x52>
  f4:	35 95       	asr	r19
  f6:	27 95       	ror	r18
  f8:	0a 94       	dec	r0
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <__vector_5+0x4e>
  fc:	20 fd       	sbrc	r18, 0
  fe:	09 c0       	rjmp	.+18     	; 0x112 <__vector_5+0x6c>
		{
			pulsante = (1 << i);
 100:	9f 01       	movw	r18, r30
 102:	08 2e       	mov	r0, r24
 104:	02 c0       	rjmp	.+4      	; 0x10a <__vector_5+0x64>
 106:	22 0f       	add	r18, r18
 108:	33 1f       	adc	r19, r19
 10a:	0a 94       	dec	r0
 10c:	e2 f7       	brpl	.-8      	; 0x106 <__vector_5+0x60>
 10e:	20 93 11 01 	sts	0x0111, r18	; 0x800111 <pulsante>
 112:	01 96       	adiw	r24, 0x01	; 1
}

ISR(PCINT2_vect){
	uint8_t change = oldvalue ^ PIND;
	oldvalue = PIND;
	for (uint8_t i = PIND2; i <= PIND7; i++)
 114:	88 30       	cpi	r24, 0x08	; 8
 116:	91 05       	cpc	r25, r1
 118:	01 f7       	brne	.-64     	; 0xda <__vector_5+0x34>
			pulsante = (1 << i);

		}
	}

}
 11a:	ff 91       	pop	r31
 11c:	ef 91       	pop	r30
 11e:	9f 91       	pop	r25
 120:	8f 91       	pop	r24
 122:	6f 91       	pop	r22
 124:	5f 91       	pop	r21
 126:	4f 91       	pop	r20
 128:	3f 91       	pop	r19
 12a:	2f 91       	pop	r18
 12c:	0f 90       	pop	r0
 12e:	0f be       	out	0x3f, r0	; 63
 130:	0f 90       	pop	r0
 132:	1f 90       	pop	r1
 134:	18 95       	reti

00000136 <__vector_14>:

ISR(TIMER0_COMPA_vect){
 136:	1f 92       	push	r1
 138:	0f 92       	push	r0
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	0f 92       	push	r0
 13e:	11 24       	eor	r1, r1
 140:	8f 93       	push	r24
 142:	9f 93       	push	r25
	tick++;
 144:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <tick>
 148:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <tick+0x1>
 14c:	01 96       	adiw	r24, 0x01	; 1
 14e:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <tick+0x1>
 152:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <tick>
}
 156:	9f 91       	pop	r25
 158:	8f 91       	pop	r24
 15a:	0f 90       	pop	r0
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	0f 90       	pop	r0
 160:	1f 90       	pop	r1
 162:	18 95       	reti

00000164 <__vector_11>:

ISR(TIMER1_COMPA_vect){
 164:	1f 92       	push	r1
 166:	0f 92       	push	r0
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	0f 92       	push	r0
 16c:	11 24       	eor	r1, r1
 16e:	8f 93       	push	r24
 170:	9f 93       	push	r25
	secondi++;
 172:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <secondi>
 176:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <secondi+0x1>
 17a:	01 96       	adiw	r24, 0x01	; 1
 17c:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <secondi+0x1>
 180:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <secondi>
}
 184:	9f 91       	pop	r25
 186:	8f 91       	pop	r24
 188:	0f 90       	pop	r0
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	0f 90       	pop	r0
 18e:	1f 90       	pop	r1
 190:	18 95       	reti

00000192 <change>:


void change(){
	switch(pulsante){
 192:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <pulsante>
 196:	80 31       	cpi	r24, 0x10	; 16
 198:	19 f0       	breq	.+6      	; 0x1a0 <change+0xe>
 19a:	80 32       	cpi	r24, 0x20	; 32
 19c:	e9 f0       	breq	.+58     	; 0x1d8 <change+0x46>
 19e:	08 95       	ret
		case b4:
		if (secondi == 1)
 1a0:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <secondi>
 1a4:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <secondi+0x1>
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	79 f4       	brne	.+30     	; 0x1ca <change+0x38>
		{
			if (velocitacorrente < 3)
 1ac:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <velocitacorrente>
 1b0:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <velocitacorrente+0x1>
 1b4:	03 97       	sbiw	r24, 0x03	; 3
 1b6:	4c f4       	brge	.+18     	; 0x1ca <change+0x38>
			{
				velocitacorrente++;
 1b8:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <velocitacorrente>
 1bc:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <velocitacorrente+0x1>
 1c0:	01 96       	adiw	r24, 0x01	; 1
 1c2:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <velocitacorrente+0x1>
 1c6:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <velocitacorrente>
			}
		}secondi = 0;
 1ca:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <secondi+0x1>
 1ce:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <secondi>
		pulsante = 0;
 1d2:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <pulsante>
		break;
 1d6:	08 95       	ret
		
		
		case b5:
		if (secondi == 1)
 1d8:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <secondi>
 1dc:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <secondi+0x1>
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	81 f4       	brne	.+32     	; 0x204 <change+0x72>
		{
			if (velocitacorrente > 0)
 1e4:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <velocitacorrente>
 1e8:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <velocitacorrente+0x1>
 1ec:	18 16       	cp	r1, r24
 1ee:	19 06       	cpc	r1, r25
 1f0:	4c f4       	brge	.+18     	; 0x204 <change+0x72>
			{
				velocitacorrente--;
 1f2:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <velocitacorrente>
 1f6:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <velocitacorrente+0x1>
 1fa:	01 97       	sbiw	r24, 0x01	; 1
 1fc:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <velocitacorrente+0x1>
 200:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <velocitacorrente>
			}
		}secondi = 0;
 204:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <secondi+0x1>
 208:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <secondi>
		pulsante = 0;
 20c:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <pulsante>
 210:	08 95       	ret

00000212 <inverti>:
	}
}


void inverti(){
	direzione = !direzione;
 212:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <__data_end>
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	89 27       	eor	r24, r25
 21a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 21e:	08 95       	ret

00000220 <lampeggio>:

void lampeggio(){
	int period;
	int cycle;
	
	period = velocita[velocitacorrente];
 220:	e0 91 0f 01 	lds	r30, 0x010F	; 0x80010f <velocitacorrente>
 224:	f0 91 10 01 	lds	r31, 0x0110	; 0x800110 <velocitacorrente+0x1>
 228:	ee 0f       	add	r30, r30
 22a:	ff 1f       	adc	r31, r31
 22c:	e0 50       	subi	r30, 0x00	; 0
 22e:	ff 4f       	sbci	r31, 0xFF	; 255
 230:	20 81       	ld	r18, Z
 232:	31 81       	ldd	r19, Z+1	; 0x01
	cycle = period /3;
 234:	c9 01       	movw	r24, r18
 236:	63 e0       	ldi	r22, 0x03	; 3
 238:	70 e0       	ldi	r23, 0x00	; 0
 23a:	0e 94 fd 01 	call	0x3fa	; 0x3fa <__divmodhi4>
	if (direzione)
 23e:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <__data_end>
 242:	44 23       	and	r20, r20
 244:	51 f1       	breq	.+84     	; 0x29a <lampeggio+0x7a>
	{
		if (tick <= cycle)
 246:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <tick>
 24a:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <tick+0x1>
 24e:	64 17       	cp	r22, r20
 250:	75 07       	cpc	r23, r21
 252:	2c f0       	brlt	.+10     	; 0x25e <lampeggio+0x3e>
		{
			PORTC |= l1;
 254:	41 9a       	sbi	0x08, 1	; 8
			PORTC &=~ (l2|l3);
 256:	88 b1       	in	r24, 0x08	; 8
 258:	83 7f       	andi	r24, 0xF3	; 243
 25a:	88 b9       	out	0x08, r24	; 8
 25c:	12 c0       	rjmp	.+36     	; 0x282 <lampeggio+0x62>
		}else if(tick <= 2*cycle){
 25e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <tick>
 262:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <tick+0x1>
 266:	66 0f       	add	r22, r22
 268:	77 1f       	adc	r23, r23
 26a:	68 17       	cp	r22, r24
 26c:	79 07       	cpc	r23, r25
 26e:	2c f0       	brlt	.+10     	; 0x27a <lampeggio+0x5a>
			PORTC |= l2;
 270:	42 9a       	sbi	0x08, 2	; 8
			PORTC &=~ (l3|l1);
 272:	88 b1       	in	r24, 0x08	; 8
 274:	85 7f       	andi	r24, 0xF5	; 245
 276:	88 b9       	out	0x08, r24	; 8
 278:	04 c0       	rjmp	.+8      	; 0x282 <lampeggio+0x62>
		}else{
			PORTC |= l3;
 27a:	43 9a       	sbi	0x08, 3	; 8
			PORTC &=~ (l1|l2);
 27c:	88 b1       	in	r24, 0x08	; 8
 27e:	89 7f       	andi	r24, 0xF9	; 249
 280:	88 b9       	out	0x08, r24	; 8
		}
		if (tick == period)
 282:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <tick>
 286:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <tick+0x1>
 28a:	28 17       	cp	r18, r24
 28c:	39 07       	cpc	r19, r25
 28e:	71 f5       	brne	.+92     	; 0x2ec <lampeggio+0xcc>
		{
			tick = 0;
 290:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <tick+0x1>
 294:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <tick>
 298:	08 95       	ret
		}
		
		
	}else{
		if (tick <= cycle)
 29a:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <tick>
 29e:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <tick+0x1>
 2a2:	64 17       	cp	r22, r20
 2a4:	75 07       	cpc	r23, r21
 2a6:	2c f0       	brlt	.+10     	; 0x2b2 <lampeggio+0x92>
		{
			PORTC |= l3;
 2a8:	43 9a       	sbi	0x08, 3	; 8
			PORTC &=~ (l1|l2);
 2aa:	88 b1       	in	r24, 0x08	; 8
 2ac:	89 7f       	andi	r24, 0xF9	; 249
 2ae:	88 b9       	out	0x08, r24	; 8
 2b0:	12 c0       	rjmp	.+36     	; 0x2d6 <lampeggio+0xb6>
			
			}else if(tick <= 2*cycle){
 2b2:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <tick>
 2b6:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <tick+0x1>
 2ba:	66 0f       	add	r22, r22
 2bc:	77 1f       	adc	r23, r23
 2be:	68 17       	cp	r22, r24
 2c0:	79 07       	cpc	r23, r25
 2c2:	2c f0       	brlt	.+10     	; 0x2ce <lampeggio+0xae>
			PORTC |= l2;
 2c4:	42 9a       	sbi	0x08, 2	; 8
			PORTC &=~ (l1|l3);
 2c6:	88 b1       	in	r24, 0x08	; 8
 2c8:	85 7f       	andi	r24, 0xF5	; 245
 2ca:	88 b9       	out	0x08, r24	; 8
 2cc:	04 c0       	rjmp	.+8      	; 0x2d6 <lampeggio+0xb6>
			}else{
			PORTC |= l1;
 2ce:	41 9a       	sbi	0x08, 1	; 8
			PORTC &=~ (l3|l2);
 2d0:	88 b1       	in	r24, 0x08	; 8
 2d2:	83 7f       	andi	r24, 0xF3	; 243
 2d4:	88 b9       	out	0x08, r24	; 8
		}
		if (tick == period)
 2d6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <tick>
 2da:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <tick+0x1>
 2de:	28 17       	cp	r18, r24
 2e0:	39 07       	cpc	r19, r25
 2e2:	21 f4       	brne	.+8      	; 0x2ec <lampeggio+0xcc>
		{
			tick = 0;
 2e4:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <tick+0x1>
 2e8:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <tick>
 2ec:	08 95       	ret

000002ee <main>:
void change();
void inverti();

int main(void)
{
    DDRC |= (l0|l1|l2|l3|l4|l5);
 2ee:	87 b1       	in	r24, 0x07	; 7
 2f0:	8f 63       	ori	r24, 0x3F	; 63
 2f2:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~(l0|l1|l2|l3|l4|l5);
 2f4:	88 b1       	in	r24, 0x08	; 8
 2f6:	80 7c       	andi	r24, 0xC0	; 192
 2f8:	88 b9       	out	0x08, r24	; 8
	
	DDRD &= ~(b2|b3|b4|b5|b6|b7);
 2fa:	8a b1       	in	r24, 0x0a	; 10
 2fc:	83 70       	andi	r24, 0x03	; 3
 2fe:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (b2|b3|b4|b5|b6|b7);
 300:	8b b1       	in	r24, 0x0b	; 11
 302:	8c 6f       	ori	r24, 0xFC	; 252
 304:	8b b9       	out	0x0b, r24	; 11
	
	PCICR |= (1<< PCIE2);
 306:	e8 e6       	ldi	r30, 0x68	; 104
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	80 81       	ld	r24, Z
 30c:	84 60       	ori	r24, 0x04	; 4
 30e:	80 83       	st	Z, r24
	PCMSK2 |= (b2|b3|b4|b5|b6|b7);
 310:	ed e6       	ldi	r30, 0x6D	; 109
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	80 81       	ld	r24, Z
 316:	8c 6f       	ori	r24, 0xFC	; 252
 318:	80 83       	st	Z, r24
	
	TCCR0A |= (1 << WGM01);
 31a:	84 b5       	in	r24, 0x24	; 36
 31c:	82 60       	ori	r24, 0x02	; 2
 31e:	84 bd       	out	0x24, r24	; 36
	TIMSK0 |= (1 << OCIE0A);
 320:	ee e6       	ldi	r30, 0x6E	; 110
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	80 81       	ld	r24, Z
 326:	82 60       	ori	r24, 0x02	; 2
 328:	80 83       	st	Z, r24
	OCR0A = 79;
 32a:	8f e4       	ldi	r24, 0x4F	; 79
 32c:	87 bd       	out	0x27, r24	; 39
	
	TCCR1B |= (1 << WGM12);
 32e:	e1 e8       	ldi	r30, 0x81	; 129
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	80 81       	ld	r24, Z
 334:	88 60       	ori	r24, 0x08	; 8
 336:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A);
 338:	ef e6       	ldi	r30, 0x6F	; 111
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	80 81       	ld	r24, Z
 33e:	82 60       	ori	r24, 0x02	; 2
 340:	80 83       	st	Z, r24
	OCR1A = 15626;
 342:	8a e0       	ldi	r24, 0x0A	; 10
 344:	9d e3       	ldi	r25, 0x3D	; 61
 346:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 34a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	
	
	sei();
 34e:	78 94       	sei
			}break;
			
			
			case avvio:
			TCCR0B |= ((1<<CS00) | (1<<CS02));
			TCCR1B |= ((1<<CS10) | (1<<CS12));
 350:	c1 e8       	ldi	r28, 0x81	; 129
 352:	d0 e0       	ldi	r29, 0x00	; 0
			}pulsante = 0;
			
			
			if (pulsante == b6)
			{
				currentstate = reset;
 354:	02 e0       	ldi	r16, 0x02	; 2
		switch(currentstate){
			case accensione:
			PORTC |= l5;
			if ((pulsante == b4) || (pulsante == b5))
			{
				currentstate = avvio;
 356:	11 e0       	ldi	r17, 0x01	; 1
	sei();
	
	
    while (1) 
    {
		switch(currentstate){
 358:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <currentstate>
 35c:	81 30       	cpi	r24, 0x01	; 1
 35e:	81 f0       	breq	.+32     	; 0x380 <main+0x92>
 360:	18 f0       	brcs	.+6      	; 0x368 <main+0x7a>
 362:	82 30       	cpi	r24, 0x02	; 2
 364:	81 f1       	breq	.+96     	; 0x3c6 <main+0xd8>
 366:	fa cf       	rjmp	.-12     	; 0x35c <main+0x6e>
			case accensione:
			PORTC |= l5;
 368:	45 9a       	sbi	0x08, 5	; 8
			if ((pulsante == b4) || (pulsante == b5))
 36a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <pulsante>
 36e:	80 31       	cpi	r24, 0x10	; 16
 370:	21 f0       	breq	.+8      	; 0x37a <main+0x8c>
 372:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <pulsante>
 376:	80 32       	cpi	r24, 0x20	; 32
 378:	79 f7       	brne	.-34     	; 0x358 <main+0x6a>
			{
				currentstate = avvio;
 37a:	10 93 12 01 	sts	0x0112, r17	; 0x800112 <currentstate>
 37e:	ec cf       	rjmp	.-40     	; 0x358 <main+0x6a>
			}break;
			
			
			case avvio:
			TCCR0B |= ((1<<CS00) | (1<<CS02));
 380:	85 b5       	in	r24, 0x25	; 37
 382:	85 60       	ori	r24, 0x05	; 5
 384:	85 bd       	out	0x25, r24	; 37
			TCCR1B |= ((1<<CS10) | (1<<CS12));
 386:	88 81       	ld	r24, Y
 388:	85 60       	ori	r24, 0x05	; 5
 38a:	88 83       	st	Y, r24
			change();
 38c:	0e 94 c9 00 	call	0x192	; 0x192 <change>
			lampeggio();
 390:	0e 94 10 01 	call	0x220	; 0x220 <lampeggio>
			if (pulsante == b7)
 394:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <pulsante>
 398:	80 38       	cpi	r24, 0x80	; 128
 39a:	61 f4       	brne	.+24     	; 0x3b4 <main+0xc6>
			{
				if (secondi == 1)
 39c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <secondi>
 3a0:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <secondi+0x1>
 3a4:	01 97       	sbiw	r24, 0x01	; 1
 3a6:	11 f4       	brne	.+4      	; 0x3ac <main+0xbe>
				{
				inverti();
 3a8:	0e 94 09 01 	call	0x212	; 0x212 <inverti>
				}secondi = 0;
 3ac:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <secondi+0x1>
 3b0:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <secondi>
			}pulsante = 0;
 3b4:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <pulsante>
			
			
			if (pulsante == b6)
 3b8:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <pulsante>
 3bc:	80 34       	cpi	r24, 0x40	; 64
 3be:	61 f6       	brne	.-104    	; 0x358 <main+0x6a>
			{
				currentstate = reset;
 3c0:	00 93 12 01 	sts	0x0112, r16	; 0x800112 <currentstate>
 3c4:	c9 cf       	rjmp	.-110    	; 0x358 <main+0x6a>
			}break;
			
			
			case reset:
			TCCR0B &=~ ((1<<CS00) | (1<<CS02));
 3c6:	85 b5       	in	r24, 0x25	; 37
 3c8:	8a 7f       	andi	r24, 0xFA	; 250
 3ca:	85 bd       	out	0x25, r24	; 37
			TCCR1B &=~ ((1<<CS10) | (1<<CS12));
 3cc:	88 81       	ld	r24, Y
 3ce:	8a 7f       	andi	r24, 0xFA	; 250
 3d0:	88 83       	st	Y, r24
			PORTC &= ~(l0|l1|l2|l3|l4|l5);
 3d2:	88 b1       	in	r24, 0x08	; 8
 3d4:	80 7c       	andi	r24, 0xC0	; 192
 3d6:	88 b9       	out	0x08, r24	; 8
			tick = 0;
 3d8:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <tick+0x1>
 3dc:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <tick>
			secondi = 0;
 3e0:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <secondi+0x1>
 3e4:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <secondi>
			velocitacorrente = 0;
 3e8:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <velocitacorrente+0x1>
 3ec:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <velocitacorrente>
			pulsante = 0;
 3f0:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <pulsante>
			currentstate = accensione;
 3f4:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <currentstate>
			break;
 3f8:	af cf       	rjmp	.-162    	; 0x358 <main+0x6a>

000003fa <__divmodhi4>:
 3fa:	97 fb       	bst	r25, 7
 3fc:	07 2e       	mov	r0, r23
 3fe:	16 f4       	brtc	.+4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 400:	00 94       	com	r0
 402:	07 d0       	rcall	.+14     	; 0x412 <__divmodhi4_neg1>
 404:	77 fd       	sbrc	r23, 7
 406:	09 d0       	rcall	.+18     	; 0x41a <__divmodhi4_neg2>
 408:	0e 94 11 02 	call	0x422	; 0x422 <__udivmodhi4>
 40c:	07 fc       	sbrc	r0, 7
 40e:	05 d0       	rcall	.+10     	; 0x41a <__divmodhi4_neg2>
 410:	3e f4       	brtc	.+14     	; 0x420 <__divmodhi4_exit>

00000412 <__divmodhi4_neg1>:
 412:	90 95       	com	r25
 414:	81 95       	neg	r24
 416:	9f 4f       	sbci	r25, 0xFF	; 255
 418:	08 95       	ret

0000041a <__divmodhi4_neg2>:
 41a:	70 95       	com	r23
 41c:	61 95       	neg	r22
 41e:	7f 4f       	sbci	r23, 0xFF	; 255

00000420 <__divmodhi4_exit>:
 420:	08 95       	ret

00000422 <__udivmodhi4>:
 422:	aa 1b       	sub	r26, r26
 424:	bb 1b       	sub	r27, r27
 426:	51 e1       	ldi	r21, 0x11	; 17
 428:	07 c0       	rjmp	.+14     	; 0x438 <__udivmodhi4_ep>

0000042a <__udivmodhi4_loop>:
 42a:	aa 1f       	adc	r26, r26
 42c:	bb 1f       	adc	r27, r27
 42e:	a6 17       	cp	r26, r22
 430:	b7 07       	cpc	r27, r23
 432:	10 f0       	brcs	.+4      	; 0x438 <__udivmodhi4_ep>
 434:	a6 1b       	sub	r26, r22
 436:	b7 0b       	sbc	r27, r23

00000438 <__udivmodhi4_ep>:
 438:	88 1f       	adc	r24, r24
 43a:	99 1f       	adc	r25, r25
 43c:	5a 95       	dec	r21
 43e:	a9 f7       	brne	.-22     	; 0x42a <__udivmodhi4_loop>
 440:	80 95       	com	r24
 442:	90 95       	com	r25
 444:	bc 01       	movw	r22, r24
 446:	cd 01       	movw	r24, r26
 448:	08 95       	ret

0000044a <_exit>:
 44a:	f8 94       	cli

0000044c <__stop_program>:
 44c:	ff cf       	rjmp	.-2      	; 0x44c <__stop_program>
