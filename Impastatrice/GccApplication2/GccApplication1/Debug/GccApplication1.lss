
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000444  000004d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000444  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  0080010a  0080010a  000004e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000514  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000847  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006dd  00000000  00000000  00000de3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000437  00000000  00000000  000014c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d4  00000000  00000000  000018f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f6  00000000  00000000  000019cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001c6  00000000  00000000  00001dc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001f88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 9b 00 	jmp	0x136	; 0x136 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e4       	ldi	r30, 0x44	; 68
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 31       	cpi	r26, 0x13	; 19
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 37 01 	call	0x26e	; 0x26e <main>
  9e:	0c 94 20 02 	jmp	0x440	; 0x440 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_5>:
			break;
		}
	}
}

ISR(PCINT2_vect) {
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	4f 93       	push	r20
  b6:	5f 93       	push	r21
  b8:	6f 93       	push	r22
  ba:	8f 93       	push	r24
  bc:	9f 93       	push	r25
  be:	ef 93       	push	r30
  c0:	ff 93       	push	r31
	uint8_t change = oldval ^ PIND;
  c2:	49 b1       	in	r20, 0x09	; 9
  c4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <oldval>
  c8:	48 27       	eor	r20, r24
	oldval = PIND;
  ca:	89 b1       	in	r24, 0x09	; 9
  cc:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <oldval>
  d0:	82 e0       	ldi	r24, 0x02	; 2
  d2:	90 e0       	ldi	r25, 0x00	; 0
	for (uint8_t i = PIND2; i <= PIND7; i++) {
		if ((change & (1<<i)) && !(PIND & (1<<i))) {
  d4:	50 e0       	ldi	r21, 0x00	; 0
			press = (1<<i);
  d6:	e1 e0       	ldi	r30, 0x01	; 1
  d8:	f0 e0       	ldi	r31, 0x00	; 0

ISR(PCINT2_vect) {
	uint8_t change = oldval ^ PIND;
	oldval = PIND;
	for (uint8_t i = PIND2; i <= PIND7; i++) {
		if ((change & (1<<i)) && !(PIND & (1<<i))) {
  da:	9a 01       	movw	r18, r20
  dc:	08 2e       	mov	r0, r24
  de:	02 c0       	rjmp	.+4      	; 0xe4 <__vector_5+0x3e>
  e0:	35 95       	asr	r19
  e2:	27 95       	ror	r18
  e4:	0a 94       	dec	r0
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <__vector_5+0x3a>
  e8:	20 ff       	sbrs	r18, 0
  ea:	13 c0       	rjmp	.+38     	; 0x112 <__vector_5+0x6c>
  ec:	29 b1       	in	r18, 0x09	; 9
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	08 2e       	mov	r0, r24
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <__vector_5+0x52>
  f4:	35 95       	asr	r19
  f6:	27 95       	ror	r18
  f8:	0a 94       	dec	r0
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <__vector_5+0x4e>
  fc:	20 fd       	sbrc	r18, 0
  fe:	09 c0       	rjmp	.+18     	; 0x112 <__vector_5+0x6c>
			press = (1<<i);
 100:	9f 01       	movw	r18, r30
 102:	08 2e       	mov	r0, r24
 104:	02 c0       	rjmp	.+4      	; 0x10a <__vector_5+0x64>
 106:	22 0f       	add	r18, r18
 108:	33 1f       	adc	r19, r19
 10a:	0a 94       	dec	r0
 10c:	e2 f7       	brpl	.-8      	; 0x106 <__vector_5+0x60>
 10e:	20 93 12 01 	sts	0x0112, r18	; 0x800112 <press>
 112:	01 96       	adiw	r24, 0x01	; 1
}

ISR(PCINT2_vect) {
	uint8_t change = oldval ^ PIND;
	oldval = PIND;
	for (uint8_t i = PIND2; i <= PIND7; i++) {
 114:	88 30       	cpi	r24, 0x08	; 8
 116:	91 05       	cpc	r25, r1
 118:	01 f7       	brne	.-64     	; 0xda <__vector_5+0x34>
		if ((change & (1<<i)) && !(PIND & (1<<i))) {
			press = (1<<i);
		}
	}
}
 11a:	ff 91       	pop	r31
 11c:	ef 91       	pop	r30
 11e:	9f 91       	pop	r25
 120:	8f 91       	pop	r24
 122:	6f 91       	pop	r22
 124:	5f 91       	pop	r21
 126:	4f 91       	pop	r20
 128:	3f 91       	pop	r19
 12a:	2f 91       	pop	r18
 12c:	0f 90       	pop	r0
 12e:	0f be       	out	0x3f, r0	; 63
 130:	0f 90       	pop	r0
 132:	1f 90       	pop	r1
 134:	18 95       	reti

00000136 <__vector_14>:

ISR(TIMER0_COMPA_vect) {
 136:	1f 92       	push	r1
 138:	0f 92       	push	r0
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	0f 92       	push	r0
 13e:	11 24       	eor	r1, r1
 140:	8f 93       	push	r24
 142:	9f 93       	push	r25
	tick++;
 144:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <tick>
 148:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <tick+0x1>
 14c:	01 96       	adiw	r24, 0x01	; 1
 14e:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <tick+0x1>
 152:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <tick>
}
 156:	9f 91       	pop	r25
 158:	8f 91       	pop	r24
 15a:	0f 90       	pop	r0
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	0f 90       	pop	r0
 160:	1f 90       	pop	r1
 162:	18 95       	reti

00000164 <__vector_11>:

ISR(TIMER1_COMPA_vect) {
 164:	1f 92       	push	r1
 166:	0f 92       	push	r0
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	0f 92       	push	r0
 16c:	11 24       	eor	r1, r1
 16e:	8f 93       	push	r24
 170:	9f 93       	push	r25
	secondi++;
 172:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <secondi>
 176:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <secondi+0x1>
 17a:	01 96       	adiw	r24, 0x01	; 1
 17c:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <secondi+0x1>
 180:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <secondi>
}
 184:	9f 91       	pop	r25
 186:	8f 91       	pop	r24
 188:	0f 90       	pop	r0
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	0f 90       	pop	r0
 18e:	1f 90       	pop	r1
 190:	18 95       	reti

00000192 <led>:


void led() {
	int period = velocita[velocitacorrente];
 192:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <velocitacorrente>
 196:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <velocitacorrente+0x1>
 19a:	ee 0f       	add	r30, r30
 19c:	ff 1f       	adc	r31, r31
 19e:	e0 50       	subi	r30, 0x00	; 0
 1a0:	ff 4f       	sbci	r31, 0xFF	; 255
 1a2:	20 81       	ld	r18, Z
 1a4:	31 81       	ldd	r19, Z+1	; 0x01
	int cycle = period/3;
 1a6:	c9 01       	movw	r24, r18
 1a8:	63 e0       	ldi	r22, 0x03	; 3
 1aa:	70 e0       	ldi	r23, 0x00	; 0
 1ac:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <__divmodhi4>
	if(orario){
 1b0:	40 91 0b 01 	lds	r20, 0x010B	; 0x80010b <orario>
 1b4:	44 23       	and	r20, r20
 1b6:	51 f1       	breq	.+84     	; 0x20c <led+0x7a>
		if (tick <= cycle) {
 1b8:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <tick>
 1bc:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <tick+0x1>
 1c0:	64 17       	cp	r22, r20
 1c2:	75 07       	cpc	r23, r21
 1c4:	2c f0       	brlt	.+10     	; 0x1d0 <led+0x3e>
			PORTC |= L1;
 1c6:	41 9a       	sbi	0x08, 1	; 8
			PORTC &=~ (L3 | L2);
 1c8:	88 b1       	in	r24, 0x08	; 8
 1ca:	83 7f       	andi	r24, 0xF3	; 243
 1cc:	88 b9       	out	0x08, r24	; 8
 1ce:	12 c0       	rjmp	.+36     	; 0x1f4 <led+0x62>
			} else if (tick <= 2*cycle) {
 1d0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <tick>
 1d4:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <tick+0x1>
 1d8:	66 0f       	add	r22, r22
 1da:	77 1f       	adc	r23, r23
 1dc:	68 17       	cp	r22, r24
 1de:	79 07       	cpc	r23, r25
 1e0:	2c f0       	brlt	.+10     	; 0x1ec <led+0x5a>
			PORTC |= L2;
 1e2:	42 9a       	sbi	0x08, 2	; 8
			PORTC &=~ (L1 | L3);
 1e4:	88 b1       	in	r24, 0x08	; 8
 1e6:	85 7f       	andi	r24, 0xF5	; 245
 1e8:	88 b9       	out	0x08, r24	; 8
 1ea:	04 c0       	rjmp	.+8      	; 0x1f4 <led+0x62>
			} else {
			PORTC |= L3;
 1ec:	43 9a       	sbi	0x08, 3	; 8
			PORTC &=~ (L1 | L2);
 1ee:	88 b1       	in	r24, 0x08	; 8
 1f0:	89 7f       	andi	r24, 0xF9	; 249
 1f2:	88 b9       	out	0x08, r24	; 8
		}
		if (tick >= period) {
 1f4:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <tick>
 1f8:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <tick+0x1>
 1fc:	82 17       	cp	r24, r18
 1fe:	93 07       	cpc	r25, r19
 200:	74 f1       	brlt	.+92     	; 0x25e <led+0xcc>
			tick = 0;
 202:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <tick+0x1>
 206:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <tick>
 20a:	08 95       	ret
		}
	}
	else{
		if (tick <= cycle) {
 20c:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <tick>
 210:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <tick+0x1>
 214:	64 17       	cp	r22, r20
 216:	75 07       	cpc	r23, r21
 218:	2c f0       	brlt	.+10     	; 0x224 <led+0x92>
			PORTC |= L3;
 21a:	43 9a       	sbi	0x08, 3	; 8
			PORTC &=~ (L1 | L2);
 21c:	88 b1       	in	r24, 0x08	; 8
 21e:	89 7f       	andi	r24, 0xF9	; 249
 220:	88 b9       	out	0x08, r24	; 8
 222:	12 c0       	rjmp	.+36     	; 0x248 <led+0xb6>
			} else if (tick <= 2*cycle) {
 224:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <tick>
 228:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <tick+0x1>
 22c:	66 0f       	add	r22, r22
 22e:	77 1f       	adc	r23, r23
 230:	68 17       	cp	r22, r24
 232:	79 07       	cpc	r23, r25
 234:	2c f0       	brlt	.+10     	; 0x240 <led+0xae>
			PORTC |= L2;
 236:	42 9a       	sbi	0x08, 2	; 8
			PORTC &=~ (L1 | L3);
 238:	88 b1       	in	r24, 0x08	; 8
 23a:	85 7f       	andi	r24, 0xF5	; 245
 23c:	88 b9       	out	0x08, r24	; 8
 23e:	04 c0       	rjmp	.+8      	; 0x248 <led+0xb6>
			} else {
			PORTC |= L1;
 240:	41 9a       	sbi	0x08, 1	; 8
			PORTC &=~ (L3 | L2);
 242:	88 b1       	in	r24, 0x08	; 8
 244:	83 7f       	andi	r24, 0xF3	; 243
 246:	88 b9       	out	0x08, r24	; 8
		}
		if (tick >= period) {
 248:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <tick>
 24c:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <tick+0x1>
 250:	82 17       	cp	r24, r18
 252:	93 07       	cpc	r25, r19
 254:	24 f0       	brlt	.+8      	; 0x25e <led+0xcc>
			tick = 0;
 256:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <tick+0x1>
 25a:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <tick>
 25e:	08 95       	ret

00000260 <cambio>:
		}
	}
}
void cambio(){
	orario = !orario;
 260:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <orario>
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	89 27       	eor	r24, r25
 268:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <orario>
 26c:	08 95       	ret

0000026e <main>:

void led();
void cambio();

int main(void) {
	DDRC |= leds;
 26e:	87 b1       	in	r24, 0x07	; 7
 270:	8f 63       	ori	r24, 0x3F	; 63
 272:	87 b9       	out	0x07, r24	; 7
	PORTC &=~ leds;
 274:	88 b1       	in	r24, 0x08	; 8
 276:	80 7c       	andi	r24, 0xC0	; 192
 278:	88 b9       	out	0x08, r24	; 8

	DDRD &=~ buttons;
 27a:	8a b1       	in	r24, 0x0a	; 10
 27c:	83 70       	andi	r24, 0x03	; 3
 27e:	8a b9       	out	0x0a, r24	; 10
	PORTD |= buttons;
 280:	8b b1       	in	r24, 0x0b	; 11
 282:	8c 6f       	ori	r24, 0xFC	; 252
 284:	8b b9       	out	0x0b, r24	; 11

	
	PCICR |= (1<<PCIE2);
 286:	e8 e6       	ldi	r30, 0x68	; 104
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	80 81       	ld	r24, Z
 28c:	84 60       	ori	r24, 0x04	; 4
 28e:	80 83       	st	Z, r24
	PCMSK2 |= buttons;
 290:	ed e6       	ldi	r30, 0x6D	; 109
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	80 81       	ld	r24, Z
 296:	8c 6f       	ori	r24, 0xFC	; 252
 298:	80 83       	st	Z, r24


	TCCR0A |= (1<<WGM01);
 29a:	84 b5       	in	r24, 0x24	; 36
 29c:	82 60       	ori	r24, 0x02	; 2
 29e:	84 bd       	out	0x24, r24	; 36
	TIMSK0 |= (1<<OCIE0A);
 2a0:	ee e6       	ldi	r30, 0x6E	; 110
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	80 81       	ld	r24, Z
 2a6:	82 60       	ori	r24, 0x02	; 2
 2a8:	80 83       	st	Z, r24
	OCR0A = 79; //5ms
 2aa:	8f e4       	ldi	r24, 0x4F	; 79
 2ac:	87 bd       	out	0x27, r24	; 39

	TCCR1B |= (1<<WGM12);
 2ae:	e1 e8       	ldi	r30, 0x81	; 129
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	80 81       	ld	r24, Z
 2b4:	88 60       	ori	r24, 0x08	; 8
 2b6:	80 83       	st	Z, r24
	TIMSK1 |= (1<<OCIE1A);
 2b8:	af e6       	ldi	r26, 0x6F	; 111
 2ba:	b0 e0       	ldi	r27, 0x00	; 0
 2bc:	8c 91       	ld	r24, X
 2be:	82 60       	ori	r24, 0x02	; 2
 2c0:	8c 93       	st	X, r24
	OCR1A = 15626; //1s
 2c2:	8a e0       	ldi	r24, 0x0A	; 10
 2c4:	9d e3       	ldi	r25, 0x3D	; 61
 2c6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 2ca:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>


	TCCR1B |= ((1<<CS10) | (1<<CS12));
 2ce:	80 81       	ld	r24, Z
 2d0:	85 60       	ori	r24, 0x05	; 5
 2d2:	80 83       	st	Z, r24
	TCCR0B |= ((1<<CS00) | (1<<CS02));
 2d4:	85 b5       	in	r24, 0x25	; 37
 2d6:	85 60       	ori	r24, 0x05	; 5
 2d8:	85 bd       	out	0x25, r24	; 37


	sei();
 2da:	78 94       	sei
				}
				press = 0;
			}
			
			if (press == B2){
				currentstates = reset;
 2dc:	02 e0       	ldi	r16, 0x02	; 2
	while (1) {
		switch (currentstates) {
			case riposo:
			PORTC |= L5;
			if((press == B4) || (press == B5)){
				currentstates = rotazione;
 2de:	11 e0       	ldi	r17, 0x01	; 1
			
			
			
			
			case reset:
			TCCR1B &=~ ((1<<CS10) | (1<<CS12));
 2e0:	c1 e8       	ldi	r28, 0x81	; 129
 2e2:	d0 e0       	ldi	r29, 0x00	; 0


	sei();

	while (1) {
		switch (currentstates) {
 2e4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 2e8:	81 30       	cpi	r24, 0x01	; 1
 2ea:	89 f0       	breq	.+34     	; 0x30e <main+0xa0>
 2ec:	20 f0       	brcs	.+8      	; 0x2f6 <main+0x88>
 2ee:	82 30       	cpi	r24, 0x02	; 2
 2f0:	09 f4       	brne	.+2      	; 0x2f4 <main+0x86>
 2f2:	68 c0       	rjmp	.+208    	; 0x3c4 <main+0x156>
 2f4:	f9 cf       	rjmp	.-14     	; 0x2e8 <main+0x7a>
			case riposo:
			PORTC |= L5;
 2f6:	45 9a       	sbi	0x08, 5	; 8
			if((press == B4) || (press == B5)){
 2f8:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <press>
 2fc:	80 31       	cpi	r24, 0x10	; 16
 2fe:	21 f0       	breq	.+8      	; 0x308 <main+0x9a>
 300:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <press>
 304:	80 32       	cpi	r24, 0x20	; 32
 306:	71 f7       	brne	.-36     	; 0x2e4 <main+0x76>
				currentstates = rotazione;
 308:	10 93 0a 01 	sts	0x010A, r17	; 0x80010a <__data_end>
 30c:	eb cf       	rjmp	.-42     	; 0x2e4 <main+0x76>
			}
			break;
			
			case rotazione:
			led();
 30e:	0e 94 c9 00 	call	0x192	; 0x192 <led>
			if (press == B4)
 312:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <press>
 316:	80 31       	cpi	r24, 0x10	; 16
 318:	d9 f4       	brne	.+54     	; 0x350 <main+0xe2>
			{
				if (secondi>=1)
 31a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <secondi>
 31e:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <secondi+0x1>
 322:	18 16       	cp	r1, r24
 324:	19 06       	cpc	r1, r25
 326:	9c f5       	brge	.+102    	; 0x38e <main+0x120>
				{
					if (velocitacorrente < 3){
 328:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <velocitacorrente>
 32c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <velocitacorrente+0x1>
 330:	03 97       	sbiw	r24, 0x03	; 3
 332:	4c f4       	brge	.+18     	; 0x346 <main+0xd8>
						velocitacorrente++;
 334:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <velocitacorrente>
 338:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <velocitacorrente+0x1>
 33c:	01 96       	adiw	r24, 0x01	; 1
 33e:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <velocitacorrente+0x1>
 342:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <velocitacorrente>
					}
					secondi =0;
 346:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <secondi+0x1>
 34a:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <secondi>
 34e:	1f c0       	rjmp	.+62     	; 0x38e <main+0x120>
				}
			}
			else if(press == B5){
 350:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <press>
 354:	80 32       	cpi	r24, 0x20	; 32
 356:	d9 f4       	brne	.+54     	; 0x38e <main+0x120>
				if (secondi >= 1)
 358:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <secondi>
 35c:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <secondi+0x1>
 360:	18 16       	cp	r1, r24
 362:	19 06       	cpc	r1, r25
 364:	a4 f4       	brge	.+40     	; 0x38e <main+0x120>
				{
					if (velocitacorrente > 0)
 366:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <velocitacorrente>
 36a:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <velocitacorrente+0x1>
 36e:	18 16       	cp	r1, r24
 370:	19 06       	cpc	r1, r25
 372:	4c f4       	brge	.+18     	; 0x386 <main+0x118>
					{
						velocitacorrente--;
 374:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <velocitacorrente>
 378:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <velocitacorrente+0x1>
 37c:	01 97       	sbiw	r24, 0x01	; 1
 37e:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <velocitacorrente+0x1>
 382:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <velocitacorrente>
					}
					secondi = 0;
 386:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <secondi+0x1>
 38a:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <secondi>
				}
				
			}
			if (press == B7)
 38e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <press>
 392:	80 38       	cpi	r24, 0x80	; 128
 394:	79 f4       	brne	.+30     	; 0x3b4 <main+0x146>
			{
				if(secondi >= 1){
 396:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <secondi>
 39a:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <secondi+0x1>
 39e:	18 16       	cp	r1, r24
 3a0:	19 06       	cpc	r1, r25
 3a2:	34 f4       	brge	.+12     	; 0x3b0 <main+0x142>
					cambio();
 3a4:	0e 94 30 01 	call	0x260	; 0x260 <cambio>
					secondi = 0;
 3a8:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <secondi+0x1>
 3ac:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <secondi>
				}
				press = 0;
 3b0:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <press>
			}
			
			if (press == B2){
 3b4:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <press>
 3b8:	84 30       	cpi	r24, 0x04	; 4
 3ba:	09 f0       	breq	.+2      	; 0x3be <main+0x150>
 3bc:	93 cf       	rjmp	.-218    	; 0x2e4 <main+0x76>
				currentstates = reset;
 3be:	00 93 0a 01 	sts	0x010A, r16	; 0x80010a <__data_end>
 3c2:	90 cf       	rjmp	.-224    	; 0x2e4 <main+0x76>
			
			
			
			
			case reset:
			TCCR1B &=~ ((1<<CS10) | (1<<CS12));
 3c4:	88 81       	ld	r24, Y
 3c6:	8a 7f       	andi	r24, 0xFA	; 250
 3c8:	88 83       	st	Y, r24
			TCCR0B &=~ ((1<<CS00) | (1<<CS02));
 3ca:	85 b5       	in	r24, 0x25	; 37
 3cc:	8a 7f       	andi	r24, 0xFA	; 250
 3ce:	85 bd       	out	0x25, r24	; 37
			PORTC &=~ leds;
 3d0:	88 b1       	in	r24, 0x08	; 8
 3d2:	80 7c       	andi	r24, 0xC0	; 192
 3d4:	88 b9       	out	0x08, r24	; 8
			tick = 0;
 3d6:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <tick+0x1>
 3da:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <tick>
			secondi = 0;
 3de:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <secondi+0x1>
 3e2:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <secondi>
			press = 0;
 3e6:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <press>
			currentstates = riposo;
 3ea:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
			break;
 3ee:	7a cf       	rjmp	.-268    	; 0x2e4 <main+0x76>

000003f0 <__divmodhi4>:
 3f0:	97 fb       	bst	r25, 7
 3f2:	07 2e       	mov	r0, r23
 3f4:	16 f4       	brtc	.+4      	; 0x3fa <__divmodhi4+0xa>
 3f6:	00 94       	com	r0
 3f8:	07 d0       	rcall	.+14     	; 0x408 <__divmodhi4_neg1>
 3fa:	77 fd       	sbrc	r23, 7
 3fc:	09 d0       	rcall	.+18     	; 0x410 <__divmodhi4_neg2>
 3fe:	0e 94 0c 02 	call	0x418	; 0x418 <__udivmodhi4>
 402:	07 fc       	sbrc	r0, 7
 404:	05 d0       	rcall	.+10     	; 0x410 <__divmodhi4_neg2>
 406:	3e f4       	brtc	.+14     	; 0x416 <__divmodhi4_exit>

00000408 <__divmodhi4_neg1>:
 408:	90 95       	com	r25
 40a:	81 95       	neg	r24
 40c:	9f 4f       	sbci	r25, 0xFF	; 255
 40e:	08 95       	ret

00000410 <__divmodhi4_neg2>:
 410:	70 95       	com	r23
 412:	61 95       	neg	r22
 414:	7f 4f       	sbci	r23, 0xFF	; 255

00000416 <__divmodhi4_exit>:
 416:	08 95       	ret

00000418 <__udivmodhi4>:
 418:	aa 1b       	sub	r26, r26
 41a:	bb 1b       	sub	r27, r27
 41c:	51 e1       	ldi	r21, 0x11	; 17
 41e:	07 c0       	rjmp	.+14     	; 0x42e <__udivmodhi4_ep>

00000420 <__udivmodhi4_loop>:
 420:	aa 1f       	adc	r26, r26
 422:	bb 1f       	adc	r27, r27
 424:	a6 17       	cp	r26, r22
 426:	b7 07       	cpc	r27, r23
 428:	10 f0       	brcs	.+4      	; 0x42e <__udivmodhi4_ep>
 42a:	a6 1b       	sub	r26, r22
 42c:	b7 0b       	sbc	r27, r23

0000042e <__udivmodhi4_ep>:
 42e:	88 1f       	adc	r24, r24
 430:	99 1f       	adc	r25, r25
 432:	5a 95       	dec	r21
 434:	a9 f7       	brne	.-22     	; 0x420 <__udivmodhi4_loop>
 436:	80 95       	com	r24
 438:	90 95       	com	r25
 43a:	bc 01       	movw	r22, r24
 43c:	cd 01       	movw	r24, r26
 43e:	08 95       	ret

00000440 <_exit>:
 440:	f8 94       	cli

00000442 <__stop_program>:
 442:	ff cf       	rjmp	.-2      	; 0x442 <__stop_program>
