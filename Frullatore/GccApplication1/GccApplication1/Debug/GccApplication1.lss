
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000004a0  00000534  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800102  00800102  00000536  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000536  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000568  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000005a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000090c  00000000  00000000  000005f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000718  00000000  00000000  00000f04  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004d8  00000000  00000000  0000161c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e4  00000000  00000000  00001af4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040e  00000000  00000000  00001bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002a0  00000000  00000000  00001fe6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002286  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 9b 00 	jmp	0x136	; 0x136 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ea       	ldi	r30, 0xA0	; 160
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 30       	cpi	r26, 0x0A	; 10
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <main>
  9e:	0c 94 4e 02 	jmp	0x49c	; 0x49c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_5>:

		}
    }
}

ISR(PCINT2_vect){
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	4f 93       	push	r20
  b6:	5f 93       	push	r21
  b8:	6f 93       	push	r22
  ba:	8f 93       	push	r24
  bc:	9f 93       	push	r25
  be:	ef 93       	push	r30
  c0:	ff 93       	push	r31
	uint8_t change = oldvalue ^ PIND;
  c2:	49 b1       	in	r20, 0x09	; 9
  c4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  c8:	48 27       	eor	r20, r24
	oldvalue = PIND;
  ca:	89 b1       	in	r24, 0x09	; 9
  cc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
  d0:	82 e0       	ldi	r24, 0x02	; 2
  d2:	90 e0       	ldi	r25, 0x00	; 0
	for (uint8_t i = PIND2; i <= PIND7; i++)
	{
		if ((change & (1 << i))  && !(PIND & (1 << i)))
  d4:	50 e0       	ldi	r21, 0x00	; 0
		{
			pulsante = (1 << i);
  d6:	e1 e0       	ldi	r30, 0x01	; 1
  d8:	f0 e0       	ldi	r31, 0x00	; 0
ISR(PCINT2_vect){
	uint8_t change = oldvalue ^ PIND;
	oldvalue = PIND;
	for (uint8_t i = PIND2; i <= PIND7; i++)
	{
		if ((change & (1 << i))  && !(PIND & (1 << i)))
  da:	9a 01       	movw	r18, r20
  dc:	08 2e       	mov	r0, r24
  de:	02 c0       	rjmp	.+4      	; 0xe4 <__vector_5+0x3e>
  e0:	35 95       	asr	r19
  e2:	27 95       	ror	r18
  e4:	0a 94       	dec	r0
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <__vector_5+0x3a>
  e8:	20 ff       	sbrs	r18, 0
  ea:	13 c0       	rjmp	.+38     	; 0x112 <__vector_5+0x6c>
  ec:	29 b1       	in	r18, 0x09	; 9
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	08 2e       	mov	r0, r24
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <__vector_5+0x52>
  f4:	35 95       	asr	r19
  f6:	27 95       	ror	r18
  f8:	0a 94       	dec	r0
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <__vector_5+0x4e>
  fc:	20 fd       	sbrc	r18, 0
  fe:	09 c0       	rjmp	.+18     	; 0x112 <__vector_5+0x6c>
		{
			pulsante = (1 << i);
 100:	9f 01       	movw	r18, r30
 102:	08 2e       	mov	r0, r24
 104:	02 c0       	rjmp	.+4      	; 0x10a <__vector_5+0x64>
 106:	22 0f       	add	r18, r18
 108:	33 1f       	adc	r19, r19
 10a:	0a 94       	dec	r0
 10c:	e2 f7       	brpl	.-8      	; 0x106 <__vector_5+0x60>
 10e:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <pulsante>
 112:	01 96       	adiw	r24, 0x01	; 1
}

ISR(PCINT2_vect){
	uint8_t change = oldvalue ^ PIND;
	oldvalue = PIND;
	for (uint8_t i = PIND2; i <= PIND7; i++)
 114:	88 30       	cpi	r24, 0x08	; 8
 116:	91 05       	cpc	r25, r1
 118:	01 f7       	brne	.-64     	; 0xda <__vector_5+0x34>
		if ((change & (1 << i))  && !(PIND & (1 << i)))
		{
			pulsante = (1 << i);
		}
	}
}
 11a:	ff 91       	pop	r31
 11c:	ef 91       	pop	r30
 11e:	9f 91       	pop	r25
 120:	8f 91       	pop	r24
 122:	6f 91       	pop	r22
 124:	5f 91       	pop	r21
 126:	4f 91       	pop	r20
 128:	3f 91       	pop	r19
 12a:	2f 91       	pop	r18
 12c:	0f 90       	pop	r0
 12e:	0f be       	out	0x3f, r0	; 63
 130:	0f 90       	pop	r0
 132:	1f 90       	pop	r1
 134:	18 95       	reti

00000136 <__vector_14>:

ISR(TIMER0_COMPA_vect){
 136:	1f 92       	push	r1
 138:	0f 92       	push	r0
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	0f 92       	push	r0
 13e:	11 24       	eor	r1, r1
 140:	8f 93       	push	r24
 142:	9f 93       	push	r25
	tick++;
 144:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <tick>
 148:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <tick+0x1>
 14c:	01 96       	adiw	r24, 0x01	; 1
 14e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <tick+0x1>
 152:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <tick>
}
 156:	9f 91       	pop	r25
 158:	8f 91       	pop	r24
 15a:	0f 90       	pop	r0
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	0f 90       	pop	r0
 160:	1f 90       	pop	r1
 162:	18 95       	reti

00000164 <__vector_11>:
ISR(TIMER1_COMPA_vect){
 164:	1f 92       	push	r1
 166:	0f 92       	push	r0
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	0f 92       	push	r0
 16c:	11 24       	eor	r1, r1
 16e:	8f 93       	push	r24
 170:	9f 93       	push	r25
	secondi++;
 172:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <secondi>
 176:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <secondi+0x1>
 17a:	01 96       	adiw	r24, 0x01	; 1
 17c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <secondi+0x1>
 180:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <secondi>
}
 184:	9f 91       	pop	r25
 186:	8f 91       	pop	r24
 188:	0f 90       	pop	r0
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	0f 90       	pop	r0
 18e:	1f 90       	pop	r1
 190:	18 95       	reti

00000192 <velocita>:




void velocita(){
	switch(velocitacorrente){
 192:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 196:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 19a:	82 30       	cpi	r24, 0x02	; 2
 19c:	91 05       	cpc	r25, r1
 19e:	81 f0       	breq	.+32     	; 0x1c0 <velocita+0x2e>
 1a0:	1c f4       	brge	.+6      	; 0x1a8 <velocita+0x16>
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	49 f0       	breq	.+18     	; 0x1b8 <velocita+0x26>
 1a6:	05 c0       	rjmp	.+10     	; 0x1b2 <velocita+0x20>
 1a8:	83 30       	cpi	r24, 0x03	; 3
 1aa:	91 05       	cpc	r25, r1
 1ac:	69 f0       	breq	.+26     	; 0x1c8 <velocita+0x36>
 1ae:	04 97       	sbiw	r24, 0x04	; 4
 1b0:	79 f0       	breq	.+30     	; 0x1d0 <velocita+0x3e>
		
		default:
		currentstate = spento;
 1b2:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <currentstate>
		break;
 1b6:	08 95       	ret
		
		case 1: 
		currentstate = minimo;
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <currentstate>
		break;
 1be:	08 95       	ret
		
		case 2:
		currentstate = medio;
 1c0:	82 e0       	ldi	r24, 0x02	; 2
 1c2:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <currentstate>
		break;
 1c6:	08 95       	ret
		
		case 3:
		currentstate = alto;
 1c8:	83 e0       	ldi	r24, 0x03	; 3
 1ca:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <currentstate>
		break;
 1ce:	08 95       	ret
		
		case 4:
		currentstate = massimo;
 1d0:	84 e0       	ldi	r24, 0x04	; 4
 1d2:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <currentstate>
 1d6:	08 95       	ret

000001d8 <cambio>:
}



void cambio(){
	switch(pulsante){
 1d8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <pulsante>
 1dc:	84 30       	cpi	r24, 0x04	; 4
 1de:	b1 f0       	breq	.+44     	; 0x20c <cambio+0x34>
 1e0:	88 30       	cpi	r24, 0x08	; 8
 1e2:	41 f5       	brne	.+80     	; 0x234 <cambio+0x5c>
		case b3:
		if (velocitacorrente < 4)
 1e4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1e8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 1ec:	04 97       	sbiw	r24, 0x04	; 4
 1ee:	5c f4       	brge	.+22     	; 0x206 <cambio+0x2e>
		{
			velocitacorrente++;
 1f0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1f4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 1f8:	01 96       	adiw	r24, 0x01	; 1
 1fa:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 1fe:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
			velocita();
 202:	0e 94 c9 00 	call	0x192	; 0x192 <velocita>
		}
		pulsante = 0;
 206:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <pulsante>
		break;
 20a:	08 95       	ret
		
		
		case b2:
		if (velocitacorrente > 0)
 20c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 210:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 214:	18 16       	cp	r1, r24
 216:	19 06       	cpc	r1, r25
 218:	5c f4       	brge	.+22     	; 0x230 <cambio+0x58>
		{
			velocitacorrente--;
 21a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 21e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 228:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
			velocita();
 22c:	0e 94 c9 00 	call	0x192	; 0x192 <velocita>
		}
		pulsante = 0;
 230:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <pulsante>
 234:	08 95       	ret

00000236 <led>:
	int cycle;
	
	period = 20 ;
	cycle = 5;
	
	if (tick <= cycle)
 236:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <tick>
 23a:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <tick+0x1>
 23e:	36 97       	sbiw	r30, 0x06	; 6
 240:	24 f4       	brge	.+8      	; 0x24a <led+0x14>
	{
		PORTC |= led1;
 242:	98 b1       	in	r25, 0x08	; 8
 244:	89 2b       	or	r24, r25
 246:	88 b9       	out	0x08, r24	; 8
 248:	04 c0       	rjmp	.+8      	; 0x252 <led+0x1c>
}else
{
	PORTC &=~ led1;
 24a:	98 b1       	in	r25, 0x08	; 8
 24c:	80 95       	com	r24
 24e:	89 23       	and	r24, r25
 250:	88 b9       	out	0x08, r24	; 8
}
	if (tick == period)
 252:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <tick>
 256:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <tick+0x1>
 25a:	44 97       	sbiw	r24, 0x14	; 20
 25c:	21 f4       	brne	.+8      	; 0x266 <led+0x30>
	{
		tick = 0;
 25e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <tick+0x1>
 262:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <tick>
	}
	
	
	
	
	if (tick <= 2*cycle)
 266:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <tick>
 26a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <tick+0x1>
 26e:	0b 97       	sbiw	r24, 0x0b	; 11
 270:	24 f4       	brge	.+8      	; 0x27a <led+0x44>
	{
		PORTC |= led2;
 272:	88 b1       	in	r24, 0x08	; 8
 274:	68 2b       	or	r22, r24
 276:	68 b9       	out	0x08, r22	; 8
 278:	04 c0       	rjmp	.+8      	; 0x282 <led+0x4c>
	}else
	{
		PORTC &=~ led2;
 27a:	88 b1       	in	r24, 0x08	; 8
 27c:	60 95       	com	r22
 27e:	68 23       	and	r22, r24
 280:	68 b9       	out	0x08, r22	; 8
	}
	if (tick == period)
 282:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <tick>
 286:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <tick+0x1>
 28a:	44 97       	sbiw	r24, 0x14	; 20
 28c:	21 f4       	brne	.+8      	; 0x296 <led+0x60>
	{
		tick = 0;
 28e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <tick+0x1>
 292:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <tick>
	}
	
	
	
	if (tick <= 3*cycle)
 296:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <tick>
 29a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <tick+0x1>
 29e:	40 97       	sbiw	r24, 0x10	; 16
 2a0:	24 f4       	brge	.+8      	; 0x2aa <led+0x74>
	{
		PORTC |= led3;
 2a2:	88 b1       	in	r24, 0x08	; 8
 2a4:	48 2b       	or	r20, r24
 2a6:	48 b9       	out	0x08, r20	; 8
 2a8:	04 c0       	rjmp	.+8      	; 0x2b2 <led+0x7c>
	}else
	{
		PORTC &=~ led3;
 2aa:	88 b1       	in	r24, 0x08	; 8
 2ac:	40 95       	com	r20
 2ae:	48 23       	and	r20, r24
 2b0:	48 b9       	out	0x08, r20	; 8
	}
	if (tick == period)
 2b2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <tick>
 2b6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <tick+0x1>
 2ba:	44 97       	sbiw	r24, 0x14	; 20
 2bc:	21 f4       	brne	.+8      	; 0x2c6 <led+0x90>
	{
		tick = 0;
 2be:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <tick+0x1>
 2c2:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <tick>
	}
	
	
	
	
	if (tick <= 4*cycle)
 2c6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <tick>
 2ca:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <tick+0x1>
 2ce:	45 97       	sbiw	r24, 0x15	; 21
 2d0:	24 f4       	brge	.+8      	; 0x2da <led+0xa4>
	{
		PORTC |= led4;
 2d2:	88 b1       	in	r24, 0x08	; 8
 2d4:	28 2b       	or	r18, r24
 2d6:	28 b9       	out	0x08, r18	; 8
 2d8:	04 c0       	rjmp	.+8      	; 0x2e2 <led+0xac>
	}else
	{
		PORTC &=~ led4;
 2da:	88 b1       	in	r24, 0x08	; 8
 2dc:	20 95       	com	r18
 2de:	28 23       	and	r18, r24
 2e0:	28 b9       	out	0x08, r18	; 8
	}
	if (tick == period)
 2e2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <tick>
 2e6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <tick+0x1>
 2ea:	44 97       	sbiw	r24, 0x14	; 20
 2ec:	21 f4       	brne	.+8      	; 0x2f6 <led+0xc0>
	{
		tick = 0;
 2ee:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <tick+0x1>
 2f2:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <tick>
 2f6:	08 95       	ret

000002f8 <main>:
void velocita();


int main(void)
{	
	DDRC |= (l1|l2|l3|l4);
 2f8:	87 b1       	in	r24, 0x07	; 7
 2fa:	8e 61       	ori	r24, 0x1E	; 30
 2fc:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~(l1|l2|l3|l4);
 2fe:	88 b1       	in	r24, 0x08	; 8
 300:	81 7e       	andi	r24, 0xE1	; 225
 302:	88 b9       	out	0x08, r24	; 8
	
	DDRD &= ~(b2|b3|b7);
 304:	8a b1       	in	r24, 0x0a	; 10
 306:	83 77       	andi	r24, 0x73	; 115
 308:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (b2|b3|b7);
 30a:	8b b1       	in	r24, 0x0b	; 11
 30c:	8c 68       	ori	r24, 0x8C	; 140
 30e:	8b b9       	out	0x0b, r24	; 11
	
	PCICR |= (1 << PCIE2);
 310:	e8 e6       	ldi	r30, 0x68	; 104
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	80 81       	ld	r24, Z
 316:	84 60       	ori	r24, 0x04	; 4
 318:	80 83       	st	Z, r24
	PCMSK2 |= (b2|b3|b7);
 31a:	ed e6       	ldi	r30, 0x6D	; 109
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	80 81       	ld	r24, Z
 320:	8c 68       	ori	r24, 0x8C	; 140
 322:	80 83       	st	Z, r24
	
	TCCR0A |= (1 << WGM01);
 324:	84 b5       	in	r24, 0x24	; 36
 326:	82 60       	ori	r24, 0x02	; 2
 328:	84 bd       	out	0x24, r24	; 36
	TIMSK0 |= (1 << OCIE0A);
 32a:	ee e6       	ldi	r30, 0x6E	; 110
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	80 81       	ld	r24, Z
 330:	82 60       	ori	r24, 0x02	; 2
 332:	80 83       	st	Z, r24
	OCR0A = 79;
 334:	8f e4       	ldi	r24, 0x4F	; 79
 336:	87 bd       	out	0x27, r24	; 39
	
	TCCR1A |= (1 << WGM12);
 338:	e0 e8       	ldi	r30, 0x80	; 128
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	80 81       	ld	r24, Z
 33e:	88 60       	ori	r24, 0x08	; 8
 340:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A);
 342:	ef e6       	ldi	r30, 0x6F	; 111
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	80 81       	ld	r24, Z
 348:	82 60       	ori	r24, 0x02	; 2
 34a:	80 83       	st	Z, r24
	OCR1A = 15626;
 34c:	8a e0       	ldi	r24, 0x0A	; 10
 34e:	9d e3       	ldi	r25, 0x3D	; 61
 350:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 354:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	
	sei();
 358:	78 94       	sei
			
			
			
			case massimo:
			TCCR0B |= (1<<CS00) | (1<<CS02);
			TCCR1B |= (1<<CS10) | (1<<CS12);
 35a:	c1 e8       	ldi	r28, 0x81	; 129
 35c:	d0 e0       	ldi	r29, 0x00	; 0
			cambio();
			led( l1,  l2,  l3,  l4);
			
			if ((pulsante == b7) || (secondi == 10))
			{
				currentstate = reset;
 35e:	15 e0       	ldi	r17, 0x05	; 5
	
	sei();
	
    while (1) 
    {
		switch(currentstate){
 360:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <currentstate>
 364:	82 30       	cpi	r24, 0x02	; 2
 366:	61 f1       	breq	.+88     	; 0x3c0 <main+0xc8>
 368:	28 f4       	brcc	.+10     	; 0x374 <main+0x7c>
 36a:	88 23       	and	r24, r24
 36c:	59 f0       	breq	.+22     	; 0x384 <main+0x8c>
 36e:	81 30       	cpi	r24, 0x01	; 1
 370:	61 f0       	breq	.+24     	; 0x38a <main+0x92>
 372:	f8 cf       	rjmp	.-16     	; 0x364 <main+0x6c>
 374:	84 30       	cpi	r24, 0x04	; 4
 376:	09 f4       	brne	.+2      	; 0x37a <main+0x82>
 378:	5b c0       	rjmp	.+182    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 37a:	f0 f1       	brcs	.+124    	; 0x3f8 <main+0x100>
 37c:	85 30       	cpi	r24, 0x05	; 5
 37e:	09 f4       	brne	.+2      	; 0x382 <main+0x8a>
 380:	73 c0       	rjmp	.+230    	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 382:	f0 cf       	rjmp	.-32     	; 0x364 <main+0x6c>
			case spento:
			cambio();
 384:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <cambio>
			break;
 388:	eb cf       	rjmp	.-42     	; 0x360 <main+0x68>
			
			case minimo:
			TCCR0B |= (1<<CS00) | (1<<CS02);
 38a:	85 b5       	in	r24, 0x25	; 37
 38c:	85 60       	ori	r24, 0x05	; 5
 38e:	85 bd       	out	0x25, r24	; 37
			TCCR1B |= (1<<CS10) | (1<<CS12);
 390:	88 81       	ld	r24, Y
 392:	85 60       	ori	r24, 0x05	; 5
 394:	88 83       	st	Y, r24
			cambio();
 396:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <cambio>
			led( l1, 0, 0, 0);
 39a:	20 e0       	ldi	r18, 0x00	; 0
 39c:	40 e0       	ldi	r20, 0x00	; 0
 39e:	60 e0       	ldi	r22, 0x00	; 0
 3a0:	82 e0       	ldi	r24, 0x02	; 2
 3a2:	0e 94 1b 01 	call	0x236	; 0x236 <led>
			
			if ((pulsante == b7) || (secondi == 10))
 3a6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <pulsante>
 3aa:	80 38       	cpi	r24, 0x80	; 128
 3ac:	31 f0       	breq	.+12     	; 0x3ba <main+0xc2>
 3ae:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <secondi>
 3b2:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <secondi+0x1>
 3b6:	0a 97       	sbiw	r24, 0x0a	; 10
 3b8:	99 f6       	brne	.-90     	; 0x360 <main+0x68>
			{
				currentstate = reset;
 3ba:	10 93 09 01 	sts	0x0109, r17	; 0x800109 <currentstate>
 3be:	d0 cf       	rjmp	.-96     	; 0x360 <main+0x68>
			}
			break;
			
			
			case medio:
			TCCR0B |= (1<<CS00) | (1<<CS02);
 3c0:	85 b5       	in	r24, 0x25	; 37
 3c2:	85 60       	ori	r24, 0x05	; 5
 3c4:	85 bd       	out	0x25, r24	; 37
			TCCR1B |= (1<<CS10) | (1<<CS12);
 3c6:	88 81       	ld	r24, Y
 3c8:	85 60       	ori	r24, 0x05	; 5
 3ca:	88 83       	st	Y, r24
			cambio();
 3cc:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <cambio>
			led( l1,  l2, 0, 0);
 3d0:	20 e0       	ldi	r18, 0x00	; 0
 3d2:	40 e0       	ldi	r20, 0x00	; 0
 3d4:	64 e0       	ldi	r22, 0x04	; 4
 3d6:	82 e0       	ldi	r24, 0x02	; 2
 3d8:	0e 94 1b 01 	call	0x236	; 0x236 <led>
			
			if ((pulsante == b7) || (secondi == 10))
 3dc:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <pulsante>
 3e0:	80 38       	cpi	r24, 0x80	; 128
 3e2:	39 f0       	breq	.+14     	; 0x3f2 <main+0xfa>
 3e4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <secondi>
 3e8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <secondi+0x1>
 3ec:	0a 97       	sbiw	r24, 0x0a	; 10
 3ee:	09 f0       	breq	.+2      	; 0x3f2 <main+0xfa>
 3f0:	b7 cf       	rjmp	.-146    	; 0x360 <main+0x68>
			{
				currentstate = reset;
 3f2:	10 93 09 01 	sts	0x0109, r17	; 0x800109 <currentstate>
 3f6:	b4 cf       	rjmp	.-152    	; 0x360 <main+0x68>
			}
			break;
			
			
			case alto:
			TCCR0B |= (1<<CS00) | (1<<CS02);
 3f8:	85 b5       	in	r24, 0x25	; 37
 3fa:	85 60       	ori	r24, 0x05	; 5
 3fc:	85 bd       	out	0x25, r24	; 37
			TCCR1B |= (1<<CS10) | (1<<CS12);
 3fe:	88 81       	ld	r24, Y
 400:	85 60       	ori	r24, 0x05	; 5
 402:	88 83       	st	Y, r24
			cambio();
 404:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <cambio>
			led( l1,  l2,  l3, 0);
 408:	20 e0       	ldi	r18, 0x00	; 0
 40a:	48 e0       	ldi	r20, 0x08	; 8
 40c:	64 e0       	ldi	r22, 0x04	; 4
 40e:	82 e0       	ldi	r24, 0x02	; 2
 410:	0e 94 1b 01 	call	0x236	; 0x236 <led>
			
			if ((pulsante == b7) || (secondi == 10))
 414:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <pulsante>
 418:	80 38       	cpi	r24, 0x80	; 128
 41a:	39 f0       	breq	.+14     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 41c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <secondi>
 420:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <secondi+0x1>
 424:	0a 97       	sbiw	r24, 0x0a	; 10
 426:	09 f0       	breq	.+2      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 428:	9b cf       	rjmp	.-202    	; 0x360 <main+0x68>
			{
				currentstate = reset;
 42a:	10 93 09 01 	sts	0x0109, r17	; 0x800109 <currentstate>
 42e:	98 cf       	rjmp	.-208    	; 0x360 <main+0x68>
			break;
			
			
			
			case massimo:
			TCCR0B |= (1<<CS00) | (1<<CS02);
 430:	85 b5       	in	r24, 0x25	; 37
 432:	85 60       	ori	r24, 0x05	; 5
 434:	85 bd       	out	0x25, r24	; 37
			TCCR1B |= (1<<CS10) | (1<<CS12);
 436:	88 81       	ld	r24, Y
 438:	85 60       	ori	r24, 0x05	; 5
 43a:	88 83       	st	Y, r24
			cambio();
 43c:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <cambio>
			led( l1,  l2,  l3,  l4);
 440:	20 e1       	ldi	r18, 0x10	; 16
 442:	48 e0       	ldi	r20, 0x08	; 8
 444:	64 e0       	ldi	r22, 0x04	; 4
 446:	82 e0       	ldi	r24, 0x02	; 2
 448:	0e 94 1b 01 	call	0x236	; 0x236 <led>
			
			if ((pulsante == b7) || (secondi == 10))
 44c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <pulsante>
 450:	80 38       	cpi	r24, 0x80	; 128
 452:	39 f0       	breq	.+14     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 454:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <secondi>
 458:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <secondi+0x1>
 45c:	0a 97       	sbiw	r24, 0x0a	; 10
 45e:	09 f0       	breq	.+2      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 460:	7f cf       	rjmp	.-258    	; 0x360 <main+0x68>
			{
				currentstate = reset;
 462:	10 93 09 01 	sts	0x0109, r17	; 0x800109 <currentstate>
 466:	7c cf       	rjmp	.-264    	; 0x360 <main+0x68>
			
			
			
			
			case reset:
			TCCR0B &=~ (1<<CS00) | (1<<CS02);
 468:	85 b5       	in	r24, 0x25	; 37
 46a:	8e 7f       	andi	r24, 0xFE	; 254
 46c:	85 bd       	out	0x25, r24	; 37
			TCCR1B &=~ (1<<CS10) | (1<<CS12);
 46e:	88 81       	ld	r24, Y
 470:	8e 7f       	andi	r24, 0xFE	; 254
 472:	88 83       	st	Y, r24
			PORTC &=~ (l1|l2|l3|l4); ;
 474:	88 b1       	in	r24, 0x08	; 8
 476:	81 7e       	andi	r24, 0xE1	; 225
 478:	88 b9       	out	0x08, r24	; 8
			tick = 0;
 47a:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <tick+0x1>
 47e:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <tick>
			secondi = 0;
 482:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <secondi+0x1>
 486:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <secondi>
			pulsante = 0;
 48a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <pulsante>
			velocitacorrente = 0;
 48e:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 492:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
			currentstate = spento;
 496:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <currentstate>
 49a:	62 cf       	rjmp	.-316    	; 0x360 <main+0x68>

0000049c <_exit>:
 49c:	f8 94       	cli

0000049e <__stop_program>:
 49e:	ff cf       	rjmp	.-2      	; 0x49e <__stop_program>
