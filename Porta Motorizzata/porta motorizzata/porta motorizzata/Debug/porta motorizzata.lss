
porta motorizzata.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000324  000003b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000324  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800106  00800106  000003be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000430  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000084c  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006d7  00000000  00000000  00000cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003d5  00000000  00000000  0000139b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  00001770  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000434  00000000  00000000  00001850  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000236  00000000  00000000  00001c84  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001eba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e2       	ldi	r30, 0x24	; 36
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 31       	cpi	r26, 0x13	; 19
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 06 01 	call	0x20c	; 0x20c <main>
  9e:	0c 94 90 01 	jmp	0x320	; 0x320 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_5>:
		}
    }
}


ISR(PCINT2_vect){
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	4f 93       	push	r20
  b6:	5f 93       	push	r21
  b8:	6f 93       	push	r22
  ba:	7f 93       	push	r23
  bc:	8f 93       	push	r24
  be:	9f 93       	push	r25
  c0:	af 93       	push	r26
  c2:	bf 93       	push	r27
  c4:	ef 93       	push	r30
	uint8_t change = oldvalue ^ PIND;
  c6:	49 b1       	in	r20, 0x09	; 9
  c8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <oldvalue>
  cc:	48 27       	eor	r20, r24
	oldvalue = PIND;
  ce:	89 b1       	in	r24, 0x09	; 9
  d0:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <oldvalue>
  d4:	82 e0       	ldi	r24, 0x02	; 2
  d6:	90 e0       	ldi	r25, 0x00	; 0
	bool hold = false;
  d8:	70 e0       	ldi	r23, 0x00	; 0
	for(uint8_t i = PIND2; i <= PIND7; i++){
		if((change & (1<<i)) && !(PIND & (1<<i))){
  da:	50 e0       	ldi	r21, 0x00	; 0
			pulsantepremuto = (1<<i);
  dc:	a1 e0       	ldi	r26, 0x01	; 1
  de:	b0 e0       	ldi	r27, 0x00	; 0
			hold = true;
  e0:	e1 e0       	ldi	r30, 0x01	; 1
ISR(PCINT2_vect){
	uint8_t change = oldvalue ^ PIND;
	oldvalue = PIND;
	bool hold = false;
	for(uint8_t i = PIND2; i <= PIND7; i++){
		if((change & (1<<i)) && !(PIND & (1<<i))){
  e2:	9a 01       	movw	r18, r20
  e4:	08 2e       	mov	r0, r24
  e6:	02 c0       	rjmp	.+4      	; 0xec <__vector_5+0x46>
  e8:	35 95       	asr	r19
  ea:	27 95       	ror	r18
  ec:	0a 94       	dec	r0
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <__vector_5+0x42>
  f0:	20 ff       	sbrs	r18, 0
  f2:	14 c0       	rjmp	.+40     	; 0x11c <__vector_5+0x76>
  f4:	29 b1       	in	r18, 0x09	; 9
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	08 2e       	mov	r0, r24
  fa:	02 c0       	rjmp	.+4      	; 0x100 <__vector_5+0x5a>
  fc:	35 95       	asr	r19
  fe:	27 95       	ror	r18
 100:	0a 94       	dec	r0
 102:	e2 f7       	brpl	.-8      	; 0xfc <__vector_5+0x56>
 104:	20 fd       	sbrc	r18, 0
 106:	0a c0       	rjmp	.+20     	; 0x11c <__vector_5+0x76>
			pulsantepremuto = (1<<i);
 108:	9d 01       	movw	r18, r26
 10a:	08 2e       	mov	r0, r24
 10c:	02 c0       	rjmp	.+4      	; 0x112 <__vector_5+0x6c>
 10e:	22 0f       	add	r18, r18
 110:	33 1f       	adc	r19, r19
 112:	0a 94       	dec	r0
 114:	e2 f7       	brpl	.-8      	; 0x10e <__vector_5+0x68>
 116:	20 93 12 01 	sts	0x0112, r18	; 0x800112 <pulsantepremuto>
			hold = true;
 11a:	7e 2f       	mov	r23, r30
 11c:	01 96       	adiw	r24, 0x01	; 1

ISR(PCINT2_vect){
	uint8_t change = oldvalue ^ PIND;
	oldvalue = PIND;
	bool hold = false;
	for(uint8_t i = PIND2; i <= PIND7; i++){
 11e:	88 30       	cpi	r24, 0x08	; 8
 120:	91 05       	cpc	r25, r1
 122:	f9 f6       	brne	.-66     	; 0xe2 <__vector_5+0x3c>
		if((change & (1<<i)) && !(PIND & (1<<i))){
			pulsantepremuto = (1<<i);
			hold = true;
		}
	}
	if(!(hold)){
 124:	71 11       	cpse	r23, r1
 126:	02 c0       	rjmp	.+4      	; 0x12c <__vector_5+0x86>
		pulsantepremuto = 0;
 128:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <pulsantepremuto>
	}
}
 12c:	ef 91       	pop	r30
 12e:	bf 91       	pop	r27
 130:	af 91       	pop	r26
 132:	9f 91       	pop	r25
 134:	8f 91       	pop	r24
 136:	7f 91       	pop	r23
 138:	6f 91       	pop	r22
 13a:	5f 91       	pop	r21
 13c:	4f 91       	pop	r20
 13e:	3f 91       	pop	r19
 140:	2f 91       	pop	r18
 142:	0f 90       	pop	r0
 144:	0f be       	out	0x3f, r0	; 63
 146:	0f 90       	pop	r0
 148:	1f 90       	pop	r1
 14a:	18 95       	reti

0000014c <__vector_14>:

ISR(TIMER0_COMPA_vect){
 14c:	1f 92       	push	r1
 14e:	0f 92       	push	r0
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	0f 92       	push	r0
 154:	11 24       	eor	r1, r1
 156:	8f 93       	push	r24
 158:	9f 93       	push	r25
	tick++;
 15a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <tick>
 15e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <tick+0x1>
 162:	01 96       	adiw	r24, 0x01	; 1
 164:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <tick+0x1>
 168:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <tick>
}
 16c:	9f 91       	pop	r25
 16e:	8f 91       	pop	r24
 170:	0f 90       	pop	r0
 172:	0f be       	out	0x3f, r0	; 63
 174:	0f 90       	pop	r0
 176:	1f 90       	pop	r1
 178:	18 95       	reti

0000017a <__vector_11>:

ISR(TIMER1_COMPA_vect){
 17a:	1f 92       	push	r1
 17c:	0f 92       	push	r0
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	0f 92       	push	r0
 182:	11 24       	eor	r1, r1
 184:	8f 93       	push	r24
 186:	9f 93       	push	r25
	nopress++;
 188:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 18c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
 190:	01 96       	adiw	r24, 0x01	; 1
 192:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
 196:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
}
 19a:	9f 91       	pop	r25
 19c:	8f 91       	pop	r24
 19e:	0f 90       	pop	r0
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	0f 90       	pop	r0
 1a4:	1f 90       	pop	r1
 1a6:	18 95       	reti

000001a8 <accendi>:

void accendi(){
	switch(currentpos){
 1a8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <currentpos>
 1ac:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <currentpos+0x1>
 1b0:	82 30       	cpi	r24, 0x02	; 2
 1b2:	91 05       	cpc	r25, r1
 1b4:	49 f0       	breq	.+18     	; 0x1c8 <accendi+0x20>
 1b6:	83 30       	cpi	r24, 0x03	; 3
 1b8:	91 05       	cpc	r25, r1
 1ba:	41 f0       	breq	.+16     	; 0x1cc <accendi+0x24>
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	11 f0       	breq	.+4      	; 0x1c4 <accendi+0x1c>
		default:
		PORTC |= l0;
 1c0:	40 9a       	sbi	0x08, 0	; 8
		break;
 1c2:	05 c0       	rjmp	.+10     	; 0x1ce <accendi+0x26>
		case 1:
		PORTC |= l1;
 1c4:	41 9a       	sbi	0x08, 1	; 8
		break;
 1c6:	03 c0       	rjmp	.+6      	; 0x1ce <accendi+0x26>
		case 2:
		PORTC |= l3;
 1c8:	43 9a       	sbi	0x08, 3	; 8
		break;
 1ca:	01 c0       	rjmp	.+2      	; 0x1ce <accendi+0x26>
		case 3:
		PORTC |= l4;
 1cc:	44 9a       	sbi	0x08, 4	; 8
		break;
	}
	pulsantepremuto = 0;
 1ce:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <pulsantepremuto>
 1d2:	08 95       	ret

000001d4 <passcheck>:
}

bool passcheck(){
		 for(int i = 0; i<5; i++){
			 if(guess[i] != password[i]){
 1d4:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <guess>
 1d8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1dc:	98 13       	cpse	r25, r24
 1de:	12 c0       	rjmp	.+36     	; 0x204 <passcheck+0x30>
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	fc 01       	movw	r30, r24
 1e6:	e4 5f       	subi	r30, 0xF4	; 244
 1e8:	fe 4f       	sbci	r31, 0xFE	; 254
 1ea:	30 81       	ld	r19, Z
 1ec:	fc 01       	movw	r30, r24
 1ee:	e0 50       	subi	r30, 0x00	; 0
 1f0:	ff 4f       	sbci	r31, 0xFF	; 255
 1f2:	20 81       	ld	r18, Z
 1f4:	32 13       	cpse	r19, r18
 1f6:	08 c0       	rjmp	.+16     	; 0x208 <passcheck+0x34>
	}
	pulsantepremuto = 0;
}

bool passcheck(){
		 for(int i = 0; i<5; i++){
 1f8:	01 96       	adiw	r24, 0x01	; 1
 1fa:	85 30       	cpi	r24, 0x05	; 5
 1fc:	91 05       	cpc	r25, r1
 1fe:	91 f7       	brne	.-28     	; 0x1e4 <passcheck+0x10>
			 if(guess[i] != password[i]){
				 return false;
			 }
		 }
		 return true;
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	08 95       	ret
}

bool passcheck(){
		 for(int i = 0; i<5; i++){
			 if(guess[i] != password[i]){
				 return false;
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	08 95       	ret
 208:	80 e0       	ldi	r24, 0x00	; 0
			 }
		 }
		 return true;
 20a:	08 95       	ret

0000020c <main>:
void accendi();
bool passcheck();

int main(void)
{
    DDRC |= (l0|l1|l2|l3|l4|l5);
 20c:	87 b1       	in	r24, 0x07	; 7
 20e:	8f 63       	ori	r24, 0x3F	; 63
 210:	87 b9       	out	0x07, r24	; 7
	PORTC &=~ (l0|l1|l2|l3|l4|l5);
 212:	88 b1       	in	r24, 0x08	; 8
 214:	80 7c       	andi	r24, 0xC0	; 192
 216:	88 b9       	out	0x08, r24	; 8
	
	DDRD &=~ (b2|b3|b4|b5|b6|b7);
 218:	8a b1       	in	r24, 0x0a	; 10
 21a:	83 70       	andi	r24, 0x03	; 3
 21c:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (b2|b3|b4|b5|b6|b7);
 21e:	8b b1       	in	r24, 0x0b	; 11
 220:	8c 6f       	ori	r24, 0xFC	; 252
 222:	8b b9       	out	0x0b, r24	; 11
	
	PCICR |= (1 << PCIE2);
 224:	e8 e6       	ldi	r30, 0x68	; 104
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	80 81       	ld	r24, Z
 22a:	84 60       	ori	r24, 0x04	; 4
 22c:	80 83       	st	Z, r24
	PCMSK2 |= (b2|b3|b4|b5|b6|b7);
 22e:	ed e6       	ldi	r30, 0x6D	; 109
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	80 81       	ld	r24, Z
 234:	8c 6f       	ori	r24, 0xFC	; 252
 236:	80 83       	st	Z, r24
	
	TCCR0A |= (1 << WGM01);
 238:	84 b5       	in	r24, 0x24	; 36
 23a:	82 60       	ori	r24, 0x02	; 2
 23c:	84 bd       	out	0x24, r24	; 36
	TIMSK0 |= (1 << OCIE0A);
 23e:	ee e6       	ldi	r30, 0x6E	; 110
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	82 60       	ori	r24, 0x02	; 2
 246:	80 83       	st	Z, r24
	OCR0A = 156;
 248:	8c e9       	ldi	r24, 0x9C	; 156
 24a:	87 bd       	out	0x27, r24	; 39
	
	TCCR1B |= (1 << WGM12);
 24c:	e1 e8       	ldi	r30, 0x81	; 129
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	80 81       	ld	r24, Z
 252:	88 60       	ori	r24, 0x08	; 8
 254:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A);
 256:	ef e6       	ldi	r30, 0x6F	; 111
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	80 81       	ld	r24, Z
 25c:	82 60       	ori	r24, 0x02	; 2
 25e:	80 83       	st	Z, r24
	OCR1A = 15625;
 260:	89 e0       	ldi	r24, 0x09	; 9
 262:	9d e3       	ldi	r25, 0x3D	; 61
 264:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 268:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	 
	sei();
 26c:	78 94       	sei
			currentstate = reset;
			}
			
			if (nopress == 4)
			{
				currentstate = reset;
 26e:	12 e0       	ldi	r17, 0x02	; 2
			
			if (currentpos == 5)
			{
				if (passcheck());
				{
					currentstate = apertura;
 270:	01 e0       	ldi	r16, 0x01	; 1
					TCCR0B |= ((1<<CS00) | (1<<CS02));
					TCCR2B |= ((1<<CS20) | (1<<CS21) | (1<<CS22));
 272:	c1 eb       	ldi	r28, 0xB1	; 177
 274:	d0 e0       	ldi	r29, 0x00	; 0
	OCR1A = 15625;
	 
	sei();
    while (1) 
    {
		switch (currentstate)
 276:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <currentstate>
 27a:	81 30       	cpi	r24, 0x01	; 1
 27c:	f1 f1       	breq	.+124    	; 0x2fa <main+0xee>
 27e:	18 f0       	brcs	.+6      	; 0x286 <main+0x7a>
 280:	82 30       	cpi	r24, 0x02	; 2
 282:	e9 f1       	breq	.+122    	; 0x2fe <main+0xf2>
 284:	fa cf       	rjmp	.-12     	; 0x27a <main+0x6e>
		{
			case inserimento:
			if (pulsantepremuto)
 286:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <pulsantepremuto>
 28a:	88 23       	and	r24, r24
 28c:	d1 f0       	breq	.+52     	; 0x2c2 <main+0xb6>
			{
			guess[currentpos] = pulsantepremuto;
 28e:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <currentpos>
 292:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <currentpos+0x1>
 296:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <pulsantepremuto>
 29a:	e4 5f       	subi	r30, 0xF4	; 244
 29c:	fe 4f       	sbci	r31, 0xFE	; 254
 29e:	80 83       	st	Z, r24
			accendi();
 2a0:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <accendi>
			currentpos++;
 2a4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <currentpos>
 2a8:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <currentpos+0x1>
 2ac:	01 96       	adiw	r24, 0x01	; 1
 2ae:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <currentpos+0x1>
 2b2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <currentpos>
			pulsantepremuto = 0;
 2b6:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <pulsantepremuto>
			nopress = 0; 
 2ba:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__data_end+0x1>
 2be:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
			}
			
			if (currentpos == 5)
 2c2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <currentpos>
 2c6:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <currentpos+0x1>
 2ca:	05 97       	sbiw	r24, 0x05	; 5
 2cc:	59 f4       	brne	.+22     	; 0x2e4 <main+0xd8>
			{
				if (passcheck());
 2ce:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <passcheck>
				{
					currentstate = apertura;
 2d2:	00 93 11 01 	sts	0x0111, r16	; 0x800111 <currentstate>
					TCCR0B |= ((1<<CS00) | (1<<CS02));
 2d6:	85 b5       	in	r24, 0x25	; 37
 2d8:	85 60       	ori	r24, 0x05	; 5
 2da:	85 bd       	out	0x25, r24	; 37
					TCCR2B |= ((1<<CS20) | (1<<CS21) | (1<<CS22));
 2dc:	88 81       	ld	r24, Y
 2de:	87 60       	ori	r24, 0x07	; 7
 2e0:	88 83       	st	Y, r24
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <main+0xdc>
				}
			}else {
			currentstate = reset;
 2e4:	10 93 11 01 	sts	0x0111, r17	; 0x800111 <currentstate>
			}
			
			if (nopress == 4)
 2e8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 2ec:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
 2f0:	04 97       	sbiw	r24, 0x04	; 4
 2f2:	09 f6       	brne	.-126    	; 0x276 <main+0x6a>
			{
				currentstate = reset;
 2f4:	10 93 11 01 	sts	0x0111, r17	; 0x800111 <currentstate>
 2f8:	be cf       	rjmp	.-132    	; 0x276 <main+0x6a>
			}
			break;
			
			case apertura:
			PORTC |= l5;
 2fa:	45 9a       	sbi	0x08, 5	; 8
			break;
 2fc:	bc cf       	rjmp	.-136    	; 0x276 <main+0x6a>
			
			case reset:
			pulsantepremuto = 0;
 2fe:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <pulsantepremuto>
			nopress = 0;
 302:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__data_end+0x1>
 306:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
			tick = 0;
 30a:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <tick+0x1>
 30e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <tick>
			currentpos = 0;
 312:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <currentpos+0x1>
 316:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <currentpos>
			currentstate = inserimento;
 31a:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <currentstate>
 31e:	ab cf       	rjmp	.-170    	; 0x276 <main+0x6a>

00000320 <_exit>:
 320:	f8 94       	cli

00000322 <__stop_program>:
 322:	ff cf       	rjmp	.-2      	; 0x322 <__stop_program>
