
sempre.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000436  000004ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000436  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800106  00800106  000004d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000500  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000540  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008e2  00000000  00000000  00000598  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ef  00000000  00000000  00000e7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004b1  00000000  00000000  00001569  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  00001a1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000457  00000000  00000000  00001b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002f9  00000000  00000000  00001f87  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002280  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_7>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e3       	ldi	r30, 0x36	; 54
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 31       	cpi	r26, 0x15	; 21
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 4c 01 	call	0x298	; 0x298 <main>
  9e:	0c 94 19 02 	jmp	0x432	; 0x432 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_5>:
			
		}
    }
}

ISR(PCINT2_vect){
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	4f 93       	push	r20
  b6:	5f 93       	push	r21
  b8:	6f 93       	push	r22
  ba:	7f 93       	push	r23
  bc:	8f 93       	push	r24
  be:	9f 93       	push	r25
  c0:	af 93       	push	r26
  c2:	bf 93       	push	r27
  c4:	ef 93       	push	r30
	uint8_t change = oldvalue ^ PIND;
  c6:	49 b1       	in	r20, 0x09	; 9
  c8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <oldvalue>
  cc:	48 27       	eor	r20, r24
	oldvalue = PIND;
  ce:	89 b1       	in	r24, 0x09	; 9
  d0:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <oldvalue>
  d4:	82 e0       	ldi	r24, 0x02	; 2
  d6:	90 e0       	ldi	r25, 0x00	; 0
	bool hold = false;
  d8:	70 e0       	ldi	r23, 0x00	; 0
	for (uint8_t i=PIND2; i <= PIND7; i++)
	{
		if ((change & (1 <<i)) && !(PIND &(1<<i)))
  da:	50 e0       	ldi	r21, 0x00	; 0
		{
			pulsantepremuto = (1 << i);
  dc:	a1 e0       	ldi	r26, 0x01	; 1
  de:	b0 e0       	ldi	r27, 0x00	; 0
			hold = true;
  e0:	e1 e0       	ldi	r30, 0x01	; 1
	uint8_t change = oldvalue ^ PIND;
	oldvalue = PIND;
	bool hold = false;
	for (uint8_t i=PIND2; i <= PIND7; i++)
	{
		if ((change & (1 <<i)) && !(PIND &(1<<i)))
  e2:	9a 01       	movw	r18, r20
  e4:	08 2e       	mov	r0, r24
  e6:	02 c0       	rjmp	.+4      	; 0xec <__vector_5+0x46>
  e8:	35 95       	asr	r19
  ea:	27 95       	ror	r18
  ec:	0a 94       	dec	r0
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <__vector_5+0x42>
  f0:	20 ff       	sbrs	r18, 0
  f2:	14 c0       	rjmp	.+40     	; 0x11c <__vector_5+0x76>
  f4:	29 b1       	in	r18, 0x09	; 9
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	08 2e       	mov	r0, r24
  fa:	02 c0       	rjmp	.+4      	; 0x100 <__vector_5+0x5a>
  fc:	35 95       	asr	r19
  fe:	27 95       	ror	r18
 100:	0a 94       	dec	r0
 102:	e2 f7       	brpl	.-8      	; 0xfc <__vector_5+0x56>
 104:	20 fd       	sbrc	r18, 0
 106:	0a c0       	rjmp	.+20     	; 0x11c <__vector_5+0x76>
		{
			pulsantepremuto = (1 << i);
 108:	9d 01       	movw	r18, r26
 10a:	08 2e       	mov	r0, r24
 10c:	02 c0       	rjmp	.+4      	; 0x112 <__vector_5+0x6c>
 10e:	22 0f       	add	r18, r18
 110:	33 1f       	adc	r19, r19
 112:	0a 94       	dec	r0
 114:	e2 f7       	brpl	.-8      	; 0x10e <__vector_5+0x68>
 116:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <pulsantepremuto>
			hold = true;
 11a:	7e 2f       	mov	r23, r30
 11c:	01 96       	adiw	r24, 0x01	; 1

ISR(PCINT2_vect){
	uint8_t change = oldvalue ^ PIND;
	oldvalue = PIND;
	bool hold = false;
	for (uint8_t i=PIND2; i <= PIND7; i++)
 11e:	88 30       	cpi	r24, 0x08	; 8
 120:	91 05       	cpc	r25, r1
 122:	f9 f6       	brne	.-66     	; 0xe2 <__vector_5+0x3c>
		{
			pulsantepremuto = (1 << i);
			hold = true;
		}
	}
	if (!(hold))
 124:	71 11       	cpse	r23, r1
 126:	02 c0       	rjmp	.+4      	; 0x12c <__vector_5+0x86>
	{
		pulsantepremuto = 0;
 128:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <pulsantepremuto>
	}
	
}
 12c:	ef 91       	pop	r30
 12e:	bf 91       	pop	r27
 130:	af 91       	pop	r26
 132:	9f 91       	pop	r25
 134:	8f 91       	pop	r24
 136:	7f 91       	pop	r23
 138:	6f 91       	pop	r22
 13a:	5f 91       	pop	r21
 13c:	4f 91       	pop	r20
 13e:	3f 91       	pop	r19
 140:	2f 91       	pop	r18
 142:	0f 90       	pop	r0
 144:	0f be       	out	0x3f, r0	; 63
 146:	0f 90       	pop	r0
 148:	1f 90       	pop	r1
 14a:	18 95       	reti

0000014c <__vector_14>:

ISR(TIMER0_COMPA_vect){
 14c:	1f 92       	push	r1
 14e:	0f 92       	push	r0
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	0f 92       	push	r0
 154:	11 24       	eor	r1, r1
 156:	8f 93       	push	r24
 158:	9f 93       	push	r25
	tick++;
 15a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <tick>
 15e:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <tick+0x1>
 162:	01 96       	adiw	r24, 0x01	; 1
 164:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <tick+0x1>
 168:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <tick>
}
 16c:	9f 91       	pop	r25
 16e:	8f 91       	pop	r24
 170:	0f 90       	pop	r0
 172:	0f be       	out	0x3f, r0	; 63
 174:	0f 90       	pop	r0
 176:	1f 90       	pop	r1
 178:	18 95       	reti

0000017a <__vector_11>:

ISR(TIMER1_COMPA_vect){
 17a:	1f 92       	push	r1
 17c:	0f 92       	push	r0
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	0f 92       	push	r0
 182:	11 24       	eor	r1, r1
 184:	8f 93       	push	r24
 186:	9f 93       	push	r25
	tick2++;
 188:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <tick2>
 18c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <tick2+0x1>
 190:	01 96       	adiw	r24, 0x01	; 1
 192:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <tick2+0x1>
 196:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <tick2>
}
 19a:	9f 91       	pop	r25
 19c:	8f 91       	pop	r24
 19e:	0f 90       	pop	r0
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	0f 90       	pop	r0
 1a4:	1f 90       	pop	r1
 1a6:	18 95       	reti

000001a8 <__vector_7>:

ISR(TIMER2_COMPA_vect){
 1a8:	1f 92       	push	r1
 1aa:	0f 92       	push	r0
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	0f 92       	push	r0
 1b0:	11 24       	eor	r1, r1
 1b2:	8f 93       	push	r24
 1b4:	9f 93       	push	r25
	nopress++;
 1b6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 1ba:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
 1be:	01 96       	adiw	r24, 0x01	; 1
 1c0:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
 1c4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
}
 1c8:	9f 91       	pop	r25
 1ca:	8f 91       	pop	r24
 1cc:	0f 90       	pop	r0
 1ce:	0f be       	out	0x3f, r0	; 63
 1d0:	0f 90       	pop	r0
 1d2:	1f 90       	pop	r1
 1d4:	18 95       	reti

000001d6 <accensioneled>:

void accensioneled(){
	switch(currentpos){
 1d6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <currentpos>
 1da:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <currentpos+0x1>
 1de:	82 30       	cpi	r24, 0x02	; 2
 1e0:	91 05       	cpc	r25, r1
 1e2:	69 f0       	breq	.+26     	; 0x1fe <accensioneled+0x28>
 1e4:	1c f4       	brge	.+6      	; 0x1ec <accensioneled+0x16>
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	41 f0       	breq	.+16     	; 0x1fa <accensioneled+0x24>
 1ea:	05 c0       	rjmp	.+10     	; 0x1f6 <accensioneled+0x20>
 1ec:	83 30       	cpi	r24, 0x03	; 3
 1ee:	91 05       	cpc	r25, r1
 1f0:	41 f0       	breq	.+16     	; 0x202 <accensioneled+0x2c>
 1f2:	04 97       	sbiw	r24, 0x04	; 4
 1f4:	41 f0       	breq	.+16     	; 0x206 <accensioneled+0x30>
		default:
		PORTC |= l0;
 1f6:	40 9a       	sbi	0x08, 0	; 8
		break;
 1f8:	08 95       	ret
		
		case 1:
		PORTC |=l1;
 1fa:	41 9a       	sbi	0x08, 1	; 8
		break;
 1fc:	08 95       	ret
		
		case 2:
		PORTC |= l2;
 1fe:	42 9a       	sbi	0x08, 2	; 8
		break;
 200:	08 95       	ret
		
		case 3:
		PORTC |= l3;
 202:	43 9a       	sbi	0x08, 3	; 8
		break;
 204:	08 95       	ret
		
		case 4:
		PORTC |= l4;
 206:	44 9a       	sbi	0x08, 4	; 8
 208:	08 95       	ret

0000020a <check>:


bool check(){
	for (int i = 0; i<5; i++)
	{
		if (guess[i] != password[i])
 20a:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <guess>
 20e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 212:	98 13       	cpse	r25, r24
 214:	12 c0       	rjmp	.+36     	; 0x23a <check+0x30>
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	fc 01       	movw	r30, r24
 21c:	e2 5f       	subi	r30, 0xF2	; 242
 21e:	fe 4f       	sbci	r31, 0xFE	; 254
 220:	30 81       	ld	r19, Z
 222:	fc 01       	movw	r30, r24
 224:	e0 50       	subi	r30, 0x00	; 0
 226:	ff 4f       	sbci	r31, 0xFF	; 255
 228:	20 81       	ld	r18, Z
 22a:	32 13       	cpse	r19, r18
 22c:	08 c0       	rjmp	.+16     	; 0x23e <check+0x34>
	}
}


bool check(){
	for (int i = 0; i<5; i++)
 22e:	01 96       	adiw	r24, 0x01	; 1
 230:	85 30       	cpi	r24, 0x05	; 5
 232:	91 05       	cpc	r25, r1
 234:	91 f7       	brne	.-28     	; 0x21a <check+0x10>
		if (guess[i] != password[i])
		{
			return false;
		}
	}
	return true;
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	08 95       	ret
bool check(){
	for (int i = 0; i<5; i++)
	{
		if (guess[i] != password[i])
		{
			return false;
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	08 95       	ret
 23e:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return true;
}
 240:	08 95       	ret

00000242 <lampeggio>:
	int cycle;
	int period;
	stato nextstate;
	
	
	switch(currentstate){
 242:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <currentstate>
 246:	82 30       	cpi	r24, 0x02	; 2
 248:	49 f0       	breq	.+18     	; 0x25c <lampeggio+0x1a>
 24a:	83 30       	cpi	r24, 0x03	; 3
 24c:	59 f0       	breq	.+22     	; 0x264 <lampeggio+0x22>
 24e:	81 30       	cpi	r24, 0x01	; 1
 250:	69 f4       	brne	.+26     	; 0x26c <lampeggio+0x2a>
	case apertura:
	cycle = 200;
	period = 800;
 252:	20 e2       	ldi	r18, 0x20	; 32
 254:	33 e0       	ldi	r19, 0x03	; 3
	stato nextstate;
	
	
	switch(currentstate){
	case apertura:
	cycle = 200;
 256:	48 ec       	ldi	r20, 0xC8	; 200
 258:	50 e0       	ldi	r21, 0x00	; 0
 25a:	08 c0       	rjmp	.+16     	; 0x26c <lampeggio+0x2a>
	nextstate = stazionamento;
	break;
	
	case stazionamento:
	period = 600;
	PORTC |= l5;
 25c:	45 9a       	sbi	0x08, 5	; 8
	period = 800;
	nextstate = stazionamento;
	break;
	
	case stazionamento:
	period = 600;
 25e:	28 e5       	ldi	r18, 0x58	; 88
 260:	32 e0       	ldi	r19, 0x02	; 2
	PORTC |= l5;
	nextstate  = chiusura;
	break;
 262:	04 c0       	rjmp	.+8      	; 0x26c <lampeggio+0x2a>
	
	case chiusura:
	cycle = 525;
	period = 700;
 264:	2c eb       	ldi	r18, 0xBC	; 188
 266:	32 e0       	ldi	r19, 0x02	; 2
	PORTC |= l5;
	nextstate  = chiusura;
	break;
	
	case chiusura:
	cycle = 525;
 268:	4d e0       	ldi	r20, 0x0D	; 13
 26a:	52 e0       	ldi	r21, 0x02	; 2
	nextstate = reset;
	break;

}

	if (tick <= cycle)
 26c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <tick>
 270:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <tick+0x1>
 274:	48 17       	cp	r20, r24
 276:	59 07       	cpc	r21, r25
 278:	14 f0       	brlt	.+4      	; 0x27e <lampeggio+0x3c>
	{
		PORTC |= l5;
 27a:	45 9a       	sbi	0x08, 5	; 8
 27c:	01 c0       	rjmp	.+2      	; 0x280 <lampeggio+0x3e>
	}else{
	PORTC &=~ l5;
 27e:	45 98       	cbi	0x08, 5	; 8
	}
	
	if (tick >= period)
 280:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <tick>
 284:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <tick+0x1>
 288:	82 17       	cp	r24, r18
 28a:	93 07       	cpc	r25, r19
 28c:	24 f0       	brlt	.+8      	; 0x296 <lampeggio+0x54>
	{
		tick = 0;
 28e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <tick+0x1>
 292:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <tick>
 296:	08 95       	ret

00000298 <main>:
bool check();
void lampeggio();

int main(void)
{
    DDRC |= (l0|l1|l2|l3|l4|l5);
 298:	87 b1       	in	r24, 0x07	; 7
 29a:	8f 63       	ori	r24, 0x3F	; 63
 29c:	87 b9       	out	0x07, r24	; 7
	PORTC &=~ (l0|l1|l2|l3|l4|l5);
 29e:	88 b1       	in	r24, 0x08	; 8
 2a0:	80 7c       	andi	r24, 0xC0	; 192
 2a2:	88 b9       	out	0x08, r24	; 8
	
	DDRD &=~ (b2|b3|b4|b5|b6|b7);
 2a4:	8a b1       	in	r24, 0x0a	; 10
 2a6:	83 70       	andi	r24, 0x03	; 3
 2a8:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (b2|b3|b4|b5|b6|b7);
 2aa:	8b b1       	in	r24, 0x0b	; 11
 2ac:	8c 6f       	ori	r24, 0xFC	; 252
 2ae:	8b b9       	out	0x0b, r24	; 11
	
	PCICR |= (1 << PCIE2);
 2b0:	e8 e6       	ldi	r30, 0x68	; 104
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	80 81       	ld	r24, Z
 2b6:	84 60       	ori	r24, 0x04	; 4
 2b8:	80 83       	st	Z, r24
	PCMSK2 |= (b2|b3|b4|b5|b6|b7);
 2ba:	ed e6       	ldi	r30, 0x6D	; 109
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	80 81       	ld	r24, Z
 2c0:	8c 6f       	ori	r24, 0xFC	; 252
 2c2:	80 83       	st	Z, r24
	
	TCCR0A |= (1 << WGM01);
 2c4:	84 b5       	in	r24, 0x24	; 36
 2c6:	82 60       	ori	r24, 0x02	; 2
 2c8:	84 bd       	out	0x24, r24	; 36
	TIMSK0 |= (1 << OCIE0A);
 2ca:	ee e6       	ldi	r30, 0x6E	; 110
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	80 81       	ld	r24, Z
 2d0:	82 60       	ori	r24, 0x02	; 2
 2d2:	80 83       	st	Z, r24
	OCR0A = 79; //5ms
 2d4:	8f e4       	ldi	r24, 0x4F	; 79
 2d6:	87 bd       	out	0x27, r24	; 39
	
	TCCR1B |= (1 << WGM12);
 2d8:	a1 e8       	ldi	r26, 0x81	; 129
 2da:	b0 e0       	ldi	r27, 0x00	; 0
 2dc:	8c 91       	ld	r24, X
 2de:	88 60       	ori	r24, 0x08	; 8
 2e0:	8c 93       	st	X, r24
	TIMSK1 |= (1 << OCIE1A);
 2e2:	ef e6       	ldi	r30, 0x6F	; 111
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	80 81       	ld	r24, Z
 2e8:	82 60       	ori	r24, 0x02	; 2
 2ea:	80 83       	st	Z, r24
	OCR1A = 15626; //1sec
 2ec:	8a e0       	ldi	r24, 0x0A	; 10
 2ee:	9d e3       	ldi	r25, 0x3D	; 61
 2f0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 2f4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	
	TCCR2B |= (1 << WGM21);
 2f8:	e1 eb       	ldi	r30, 0xB1	; 177
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	80 81       	ld	r24, Z
 2fe:	82 60       	ori	r24, 0x02	; 2
 300:	80 83       	st	Z, r24
	TIMSK2 |= (1 << OCIE2A);
 302:	c0 e7       	ldi	r28, 0x70	; 112
 304:	d0 e0       	ldi	r29, 0x00	; 0
 306:	88 81       	ld	r24, Y
 308:	82 60       	ori	r24, 0x02	; 2
 30a:	88 83       	st	Y, r24
	OCR2A = 157;
 30c:	8d e9       	ldi	r24, 0x9D	; 157
 30e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
	
	TCCR1B |= ((1 << CS10) | (1 << CS12));
 312:	8c 91       	ld	r24, X
 314:	85 60       	ori	r24, 0x05	; 5
 316:	8c 93       	st	X, r24
	TCCR0B |= ((1 << CS00) | (1 << CS02));
 318:	85 b5       	in	r24, 0x25	; 37
 31a:	85 60       	ori	r24, 0x05	; 5
 31c:	85 bd       	out	0x25, r24	; 37
	TCCR2B |= ((1 << CS20) | (1 << CS21) |(1 << CS22));
 31e:	80 81       	ld	r24, Z
 320:	87 60       	ori	r24, 0x07	; 7
 322:	80 83       	st	Z, r24
	
	sei();
 324:	78 94       	sei
					currentstate = reset;
				}
			}
			if (nopress == 4)
			{
				currentstate = reset;
 326:	c4 e0       	ldi	r28, 0x04	; 4
			}
			if (currentpos == 5)
			{
				if (check())
				{
					currentstate = apertura;
 328:	d1 e0       	ldi	r29, 0x01	; 1
	TCCR2B |= ((1 << CS20) | (1 << CS21) |(1 << CS22));
	
	sei();
    while (1) 
    {
		switch (currentstate)
 32a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <currentstate>
 32e:	82 30       	cpi	r24, 0x02	; 2
 330:	09 f4       	brne	.+2      	; 0x334 <main+0x9c>
 332:	54 c0       	rjmp	.+168    	; 0x3dc <main+0x144>
 334:	28 f4       	brcc	.+10     	; 0x340 <main+0xa8>
 336:	88 23       	and	r24, r24
 338:	51 f0       	breq	.+20     	; 0x34e <main+0xb6>
 33a:	81 30       	cpi	r24, 0x01	; 1
 33c:	d9 f1       	breq	.+118    	; 0x3b4 <main+0x11c>
 33e:	f7 cf       	rjmp	.-18     	; 0x32e <main+0x96>
 340:	83 30       	cpi	r24, 0x03	; 3
 342:	09 f4       	brne	.+2      	; 0x346 <main+0xae>
 344:	5f c0       	rjmp	.+190    	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 346:	84 30       	cpi	r24, 0x04	; 4
 348:	09 f4       	brne	.+2      	; 0x34c <main+0xb4>
 34a:	5f c0       	rjmp	.+190    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 34c:	f0 cf       	rjmp	.-32     	; 0x32e <main+0x96>
		{
			case inserimento:
			if (pulsantepremuto)
 34e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <pulsantepremuto>
 352:	88 23       	and	r24, r24
 354:	b1 f0       	breq	.+44     	; 0x382 <main+0xea>
			{
				guess[currentpos]= pulsantepremuto;
 356:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <currentpos>
 35a:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <currentpos+0x1>
 35e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <pulsantepremuto>
 362:	e2 5f       	subi	r30, 0xF2	; 242
 364:	fe 4f       	sbci	r31, 0xFE	; 254
 366:	80 83       	st	Z, r24
				accensioneled();
 368:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <accensioneled>
				currentpos++;
 36c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <currentpos>
 370:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <currentpos+0x1>
 374:	01 96       	adiw	r24, 0x01	; 1
 376:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <currentpos+0x1>
 37a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <currentpos>
				pulsantepremuto = 0;
 37e:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <pulsantepremuto>
				
			}
			if (currentpos == 5)
 382:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <currentpos>
 386:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <currentpos+0x1>
 38a:	05 97       	sbiw	r24, 0x05	; 5
 38c:	49 f4       	brne	.+18     	; 0x3a0 <main+0x108>
			{
				if (check())
 38e:	0e 94 05 01 	call	0x20a	; 0x20a <check>
 392:	88 23       	and	r24, r24
 394:	19 f0       	breq	.+6      	; 0x39c <main+0x104>
				{
					currentstate = apertura;
 396:	d0 93 13 01 	sts	0x0113, r29	; 0x800113 <currentstate>
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <main+0x108>
				}
				else
				{
					currentstate = reset;
 39c:	c0 93 13 01 	sts	0x0113, r28	; 0x800113 <currentstate>
				}
			}
			if (nopress == 4)
 3a0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 3a4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
 3a8:	04 97       	sbiw	r24, 0x04	; 4
 3aa:	09 f0       	breq	.+2      	; 0x3ae <main+0x116>
 3ac:	be cf       	rjmp	.-132    	; 0x32a <main+0x92>
			{
				currentstate = reset;
 3ae:	c0 93 13 01 	sts	0x0113, r28	; 0x800113 <currentstate>
 3b2:	bb cf       	rjmp	.-138    	; 0x32a <main+0x92>
			}break;
			
		case apertura:
		lampeggio();
 3b4:	0e 94 21 01 	call	0x242	; 0x242 <lampeggio>
		if (pulsantepremuto == b5)
 3b8:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <pulsantepremuto>
 3bc:	80 32       	cpi	r24, 0x20	; 32
 3be:	09 f0       	breq	.+2      	; 0x3c2 <main+0x12a>
 3c0:	b4 cf       	rjmp	.-152    	; 0x32a <main+0x92>
		{
			currentstate = reset;
 3c2:	c0 93 13 01 	sts	0x0113, r28	; 0x800113 <currentstate>
			pulsantepremuto = 0;
 3c6:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <pulsantepremuto>
			tick = 0;
 3ca:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <tick+0x1>
 3ce:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <tick>
			tick2 = 0;
 3d2:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <tick2+0x1>
 3d6:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <tick2>
 3da:	a7 cf       	rjmp	.-178    	; 0x32a <main+0x92>
		}break;
		
		case stazionamento:
		lampeggio();
 3dc:	0e 94 21 01 	call	0x242	; 0x242 <lampeggio>
		if (pulsantepremuto == b5)
 3e0:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <pulsantepremuto>
 3e4:	80 32       	cpi	r24, 0x20	; 32
 3e6:	09 f0       	breq	.+2      	; 0x3ea <main+0x152>
 3e8:	a0 cf       	rjmp	.-192    	; 0x32a <main+0x92>
		{
			currentstate = reset;
 3ea:	c0 93 13 01 	sts	0x0113, r28	; 0x800113 <currentstate>
			pulsantepremuto = 0;
 3ee:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <pulsantepremuto>
			tick = 0;
 3f2:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <tick+0x1>
 3f6:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <tick>
			tick2 = 0;
 3fa:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <tick2+0x1>
 3fe:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <tick2>
 402:	93 cf       	rjmp	.-218    	; 0x32a <main+0x92>
		}break;
		
		case chiusura:
		lampeggio();
 404:	0e 94 21 01 	call	0x242	; 0x242 <lampeggio>
		break;
 408:	90 cf       	rjmp	.-224    	; 0x32a <main+0x92>
			
		case reset:
		PORTC &=~ (l0|l1|l2|l3|l4|l5);
 40a:	88 b1       	in	r24, 0x08	; 8
 40c:	80 7c       	andi	r24, 0xC0	; 192
 40e:	88 b9       	out	0x08, r24	; 8
		tick2 = 0;
 410:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <tick2+0x1>
 414:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <tick2>
		tick = 0;
 418:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <tick+0x1>
 41c:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <tick>
		nopress = 0;
 420:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__data_end+0x1>
 424:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
		pulsantepremuto = 0;
 428:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <pulsantepremuto>
		currentstate = inserimento;
 42c:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <currentstate>
 430:	7c cf       	rjmp	.-264    	; 0x32a <main+0x92>

00000432 <_exit>:
 432:	f8 94       	cli

00000434 <__stop_program>:
 434:	ff cf       	rjmp	.-2      	; 0x434 <__stop_program>
