
macchinetta caffe.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000226  000002ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000226  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800102  00800102  000002bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000798  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000681  00000000  00000000  00000afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002dd  00000000  00000000  0000117d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  0000145c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f6  00000000  00000000  0000151c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001d0  00000000  00000000  00001912  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001ae2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 90 00 	jmp	0x120	; 0x120 <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e2       	ldi	r30, 0x26	; 38
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 30       	cpi	r26, 0x08	; 8
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 11 01 	jmp	0x222	; 0x222 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:



int main(void)
{
    DDRC |= (l0|l1|l2|l3|l4|l5);
  a6:	87 b1       	in	r24, 0x07	; 7
  a8:	8f 63       	ori	r24, 0x3F	; 63
  aa:	87 b9       	out	0x07, r24	; 7
	PORTC &=~ (l0|l1|l2|l3|l4|l5);
  ac:	88 b1       	in	r24, 0x08	; 8
  ae:	80 7c       	andi	r24, 0xC0	; 192
  b0:	88 b9       	out	0x08, r24	; 8
	
	DDRD &=~ (b2|b4|b7);
  b2:	8a b1       	in	r24, 0x0a	; 10
  b4:	8b 76       	andi	r24, 0x6B	; 107
  b6:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (b2|b4|b7);
  b8:	8b b1       	in	r24, 0x0b	; 11
  ba:	84 69       	ori	r24, 0x94	; 148
  bc:	8b b9       	out	0x0b, r24	; 11
	
	PCICR |= (1<<PCIE2);
  be:	e8 e6       	ldi	r30, 0x68	; 104
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	84 60       	ori	r24, 0x04	; 4
  c6:	80 83       	st	Z, r24
	PCMSK2 |= (b2|b4|b7);
  c8:	ed e6       	ldi	r30, 0x6D	; 109
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	84 69       	ori	r24, 0x94	; 148
  d0:	80 83       	st	Z, r24
	
	TCCR0A |= (1<<WGM01);
  d2:	84 b5       	in	r24, 0x24	; 36
  d4:	82 60       	ori	r24, 0x02	; 2
  d6:	84 bd       	out	0x24, r24	; 36
	TIMSK0 |= (1<<OCIE0A);
  d8:	ee e6       	ldi	r30, 0x6E	; 110
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	82 60       	ori	r24, 0x02	; 2
  e0:	80 83       	st	Z, r24
	OCR0A = 79;
  e2:	8f e4       	ldi	r24, 0x4F	; 79
  e4:	87 bd       	out	0x27, r24	; 39
	
	TCCR1B |= (1<<WGM12);
  e6:	e1 e8       	ldi	r30, 0x81	; 129
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	88 60       	ori	r24, 0x08	; 8
  ee:	80 83       	st	Z, r24
	TIMSK1 |= (1<< OCIE1A);
  f0:	ef e6       	ldi	r30, 0x6F	; 111
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	82 60       	ori	r24, 0x02	; 2
  f8:	80 83       	st	Z, r24
	OCR1A = 15626;
  fa:	8a e0       	ldi	r24, 0x0A	; 10
  fc:	9d e3       	ldi	r25, 0x3D	; 61
  fe:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 102:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	
	sei();
 106:	78 94       	sei
	
    while (1) 
    {
		switch(currentstate){
 108:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <currentstate>
 10c:	81 11       	cpse	r24, r1
 10e:	fe cf       	rjmp	.-4      	; 0x10c <main+0x66>
			case zucchero:
			if (pulsantepremuto == b7)
 110:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <pulsantepremuto>
 114:	80 38       	cpi	r24, 0x80	; 128
 116:	09 f4       	brne	.+2      	; 0x11a <main+0x74>
			{
				PORTC|=l5;
 118:	45 9a       	sbi	0x08, 5	; 8
			}pulsantepremuto = 0;
 11a:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <pulsantepremuto>
 11e:	f4 cf       	rjmp	.-24     	; 0x108 <main+0x62>

00000120 <__vector_5>:
			
		}
    }
}

ISR(PCINT2_vect){
 120:	1f 92       	push	r1
 122:	0f 92       	push	r0
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	0f 92       	push	r0
 128:	11 24       	eor	r1, r1
 12a:	2f 93       	push	r18
 12c:	3f 93       	push	r19
 12e:	4f 93       	push	r20
 130:	5f 93       	push	r21
 132:	6f 93       	push	r22
 134:	7f 93       	push	r23
 136:	8f 93       	push	r24
 138:	9f 93       	push	r25
 13a:	af 93       	push	r26
 13c:	bf 93       	push	r27
 13e:	ef 93       	push	r30
	uint8_t change = oldvalue ^ PIND;
 140:	49 b1       	in	r20, 0x09	; 9
 142:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 146:	48 27       	eor	r20, r24
	oldvalue = PIND;
 148:	89 b1       	in	r24, 0x09	; 9
 14a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 14e:	82 e0       	ldi	r24, 0x02	; 2
 150:	90 e0       	ldi	r25, 0x00	; 0
	bool hold = false;
 152:	70 e0       	ldi	r23, 0x00	; 0
	for (uint8_t i= PIND2; i<= PIND7; i++)
	{
		if ((change & (1<<i)) && !(PIND &(1<<i)))
 154:	50 e0       	ldi	r21, 0x00	; 0
		{
			pulsantepremuto = (1<<i);
 156:	a1 e0       	ldi	r26, 0x01	; 1
 158:	b0 e0       	ldi	r27, 0x00	; 0
			hold = true;
 15a:	e1 e0       	ldi	r30, 0x01	; 1
	uint8_t change = oldvalue ^ PIND;
	oldvalue = PIND;
	bool hold = false;
	for (uint8_t i= PIND2; i<= PIND7; i++)
	{
		if ((change & (1<<i)) && !(PIND &(1<<i)))
 15c:	9a 01       	movw	r18, r20
 15e:	08 2e       	mov	r0, r24
 160:	02 c0       	rjmp	.+4      	; 0x166 <__vector_5+0x46>
 162:	35 95       	asr	r19
 164:	27 95       	ror	r18
 166:	0a 94       	dec	r0
 168:	e2 f7       	brpl	.-8      	; 0x162 <__vector_5+0x42>
 16a:	20 ff       	sbrs	r18, 0
 16c:	14 c0       	rjmp	.+40     	; 0x196 <__vector_5+0x76>
 16e:	29 b1       	in	r18, 0x09	; 9
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	08 2e       	mov	r0, r24
 174:	02 c0       	rjmp	.+4      	; 0x17a <__vector_5+0x5a>
 176:	35 95       	asr	r19
 178:	27 95       	ror	r18
 17a:	0a 94       	dec	r0
 17c:	e2 f7       	brpl	.-8      	; 0x176 <__vector_5+0x56>
 17e:	20 fd       	sbrc	r18, 0
 180:	0a c0       	rjmp	.+20     	; 0x196 <__vector_5+0x76>
		{
			pulsantepremuto = (1<<i);
 182:	9d 01       	movw	r18, r26
 184:	08 2e       	mov	r0, r24
 186:	02 c0       	rjmp	.+4      	; 0x18c <__vector_5+0x6c>
 188:	22 0f       	add	r18, r18
 18a:	33 1f       	adc	r19, r19
 18c:	0a 94       	dec	r0
 18e:	e2 f7       	brpl	.-8      	; 0x188 <__vector_5+0x68>
 190:	20 93 07 01 	sts	0x0107, r18	; 0x800107 <pulsantepremuto>
			hold = true;
 194:	7e 2f       	mov	r23, r30
 196:	01 96       	adiw	r24, 0x01	; 1

ISR(PCINT2_vect){
	uint8_t change = oldvalue ^ PIND;
	oldvalue = PIND;
	bool hold = false;
	for (uint8_t i= PIND2; i<= PIND7; i++)
 198:	88 30       	cpi	r24, 0x08	; 8
 19a:	91 05       	cpc	r25, r1
 19c:	f9 f6       	brne	.-66     	; 0x15c <__vector_5+0x3c>
		{
			pulsantepremuto = (1<<i);
			hold = true;
		}
	}
	if(!(hold)){
 19e:	71 11       	cpse	r23, r1
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <__vector_5+0x86>
		pulsantepremuto = 0;
 1a2:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <pulsantepremuto>
	}
}
 1a6:	ef 91       	pop	r30
 1a8:	bf 91       	pop	r27
 1aa:	af 91       	pop	r26
 1ac:	9f 91       	pop	r25
 1ae:	8f 91       	pop	r24
 1b0:	7f 91       	pop	r23
 1b2:	6f 91       	pop	r22
 1b4:	5f 91       	pop	r21
 1b6:	4f 91       	pop	r20
 1b8:	3f 91       	pop	r19
 1ba:	2f 91       	pop	r18
 1bc:	0f 90       	pop	r0
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	0f 90       	pop	r0
 1c2:	1f 90       	pop	r1
 1c4:	18 95       	reti

000001c6 <__vector_14>:

ISR(TIMER0_COMPA_vect){
 1c6:	1f 92       	push	r1
 1c8:	0f 92       	push	r0
 1ca:	0f b6       	in	r0, 0x3f	; 63
 1cc:	0f 92       	push	r0
 1ce:	11 24       	eor	r1, r1
 1d0:	8f 93       	push	r24
 1d2:	9f 93       	push	r25
	tick++;
 1d4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <tick>
 1d8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <tick+0x1>
 1dc:	01 96       	adiw	r24, 0x01	; 1
 1de:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <tick+0x1>
 1e2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <tick>
}
 1e6:	9f 91       	pop	r25
 1e8:	8f 91       	pop	r24
 1ea:	0f 90       	pop	r0
 1ec:	0f be       	out	0x3f, r0	; 63
 1ee:	0f 90       	pop	r0
 1f0:	1f 90       	pop	r1
 1f2:	18 95       	reti

000001f4 <__vector_11>:

ISR(TIMER1_COMPA_vect){
 1f4:	1f 92       	push	r1
 1f6:	0f 92       	push	r0
 1f8:	0f b6       	in	r0, 0x3f	; 63
 1fa:	0f 92       	push	r0
 1fc:	11 24       	eor	r1, r1
 1fe:	8f 93       	push	r24
 200:	9f 93       	push	r25
	secondi++;
 202:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 206:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 20a:	01 96       	adiw	r24, 0x01	; 1
 20c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 210:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
}
 214:	9f 91       	pop	r25
 216:	8f 91       	pop	r24
 218:	0f 90       	pop	r0
 21a:	0f be       	out	0x3f, r0	; 63
 21c:	0f 90       	pop	r0
 21e:	1f 90       	pop	r1
 220:	18 95       	reti

00000222 <_exit>:
 222:	f8 94       	cli

00000224 <__stop_program>:
 224:	ff cf       	rjmp	.-2      	; 0x224 <__stop_program>
